global table: [Field; 11008] = comptime { make_lookup_table() };

comptime fn make_lookup_table() -> [Field; 11008] {
    let mut table = [0; 11008];
    table[41 * 256 + 0] = 42;
    table[42 * 256 + 0] = 42;
    table[41 * 256 + 1] = 42;
    table[42 * 256 + 1] = 42;
    table[41 * 256 + 2] = 42;
    table[42 * 256 + 2] = 42;
    table[41 * 256 + 3] = 42;
    table[42 * 256 + 3] = 42;
    table[41 * 256 + 4] = 42;
    table[42 * 256 + 4] = 42;
    table[41 * 256 + 5] = 42;
    table[42 * 256 + 5] = 42;
    table[41 * 256 + 6] = 42;
    table[42 * 256 + 6] = 42;
    table[41 * 256 + 7] = 42;
    table[42 * 256 + 7] = 42;
    table[41 * 256 + 8] = 42;
    table[42 * 256 + 8] = 42;
    table[41 * 256 + 9] = 42;
    table[42 * 256 + 9] = 42;
    table[41 * 256 + 10] = 42;
    table[42 * 256 + 10] = 42;
    table[41 * 256 + 11] = 42;
    table[42 * 256 + 11] = 42;
    table[41 * 256 + 12] = 42;
    table[42 * 256 + 12] = 42;
    table[41 * 256 + 13] = 42;
    table[42 * 256 + 13] = 42;
    table[41 * 256 + 14] = 42;
    table[42 * 256 + 14] = 42;
    table[41 * 256 + 15] = 42;
    table[42 * 256 + 15] = 42;
    table[41 * 256 + 16] = 42;
    table[42 * 256 + 16] = 42;
    table[41 * 256 + 17] = 42;
    table[42 * 256 + 17] = 42;
    table[41 * 256 + 18] = 42;
    table[42 * 256 + 18] = 42;
    table[41 * 256 + 19] = 42;
    table[42 * 256 + 19] = 42;
    table[41 * 256 + 20] = 42;
    table[42 * 256 + 20] = 42;
    table[41 * 256 + 21] = 42;
    table[42 * 256 + 21] = 42;
    table[41 * 256 + 22] = 42;
    table[42 * 256 + 22] = 42;
    table[41 * 256 + 23] = 42;
    table[42 * 256 + 23] = 42;
    table[41 * 256 + 24] = 42;
    table[42 * 256 + 24] = 42;
    table[41 * 256 + 25] = 42;
    table[42 * 256 + 25] = 42;
    table[41 * 256 + 26] = 42;
    table[42 * 256 + 26] = 42;
    table[41 * 256 + 27] = 42;
    table[42 * 256 + 27] = 42;
    table[41 * 256 + 28] = 42;
    table[42 * 256 + 28] = 42;
    table[41 * 256 + 29] = 42;
    table[42 * 256 + 29] = 42;
    table[41 * 256 + 30] = 42;
    table[42 * 256 + 30] = 42;
    table[41 * 256 + 31] = 42;
    table[42 * 256 + 31] = 42;
    table[41 * 256 + 32] = 42;
    table[42 * 256 + 32] = 42;
    table[41 * 256 + 33] = 42;
    table[42 * 256 + 33] = 42;
    table[41 * 256 + 34] = 42;
    table[42 * 256 + 34] = 42;
    table[41 * 256 + 35] = 42;
    table[42 * 256 + 35] = 42;
    table[41 * 256 + 36] = 42;
    table[42 * 256 + 36] = 42;
    table[41 * 256 + 37] = 42;
    table[42 * 256 + 37] = 42;
    table[41 * 256 + 38] = 42;
    table[42 * 256 + 38] = 42;
    table[41 * 256 + 39] = 42;
    table[42 * 256 + 39] = 42;
    table[41 * 256 + 40] = 42;
    table[42 * 256 + 40] = 42;
    table[41 * 256 + 41] = 42;
    table[42 * 256 + 41] = 42;
    table[41 * 256 + 42] = 42;
    table[42 * 256 + 42] = 42;
    table[41 * 256 + 43] = 42;
    table[42 * 256 + 43] = 42;
    table[41 * 256 + 44] = 42;
    table[42 * 256 + 44] = 42;
    table[41 * 256 + 45] = 42;
    table[42 * 256 + 45] = 42;
    table[41 * 256 + 46] = 42;
    table[42 * 256 + 46] = 42;
    table[41 * 256 + 47] = 42;
    table[42 * 256 + 47] = 42;
    table[41 * 256 + 48] = 42;
    table[42 * 256 + 48] = 42;
    table[41 * 256 + 49] = 42;
    table[42 * 256 + 49] = 42;
    table[41 * 256 + 50] = 42;
    table[42 * 256 + 50] = 42;
    table[41 * 256 + 51] = 42;
    table[42 * 256 + 51] = 42;
    table[41 * 256 + 52] = 42;
    table[42 * 256 + 52] = 42;
    table[41 * 256 + 53] = 42;
    table[42 * 256 + 53] = 42;
    table[41 * 256 + 54] = 42;
    table[42 * 256 + 54] = 42;
    table[41 * 256 + 55] = 42;
    table[42 * 256 + 55] = 42;
    table[41 * 256 + 56] = 42;
    table[42 * 256 + 56] = 42;
    table[41 * 256 + 57] = 42;
    table[42 * 256 + 57] = 42;
    table[41 * 256 + 58] = 42;
    table[42 * 256 + 58] = 42;
    table[41 * 256 + 59] = 42;
    table[42 * 256 + 59] = 42;
    table[41 * 256 + 60] = 42;
    table[42 * 256 + 60] = 42;
    table[41 * 256 + 61] = 42;
    table[42 * 256 + 61] = 42;
    table[41 * 256 + 62] = 42;
    table[42 * 256 + 62] = 42;
    table[41 * 256 + 63] = 42;
    table[42 * 256 + 63] = 42;
    table[41 * 256 + 64] = 42;
    table[42 * 256 + 64] = 42;
    table[41 * 256 + 65] = 42;
    table[42 * 256 + 65] = 42;
    table[41 * 256 + 66] = 42;
    table[42 * 256 + 66] = 42;
    table[41 * 256 + 67] = 42;
    table[42 * 256 + 67] = 42;
    table[41 * 256 + 68] = 42;
    table[42 * 256 + 68] = 42;
    table[41 * 256 + 69] = 42;
    table[42 * 256 + 69] = 42;
    table[41 * 256 + 70] = 42;
    table[42 * 256 + 70] = 42;
    table[41 * 256 + 71] = 42;
    table[42 * 256 + 71] = 42;
    table[41 * 256 + 72] = 42;
    table[42 * 256 + 72] = 42;
    table[41 * 256 + 73] = 42;
    table[42 * 256 + 73] = 42;
    table[41 * 256 + 74] = 42;
    table[42 * 256 + 74] = 42;
    table[41 * 256 + 75] = 42;
    table[42 * 256 + 75] = 42;
    table[41 * 256 + 76] = 42;
    table[42 * 256 + 76] = 42;
    table[41 * 256 + 77] = 42;
    table[42 * 256 + 77] = 42;
    table[41 * 256 + 78] = 42;
    table[42 * 256 + 78] = 42;
    table[41 * 256 + 79] = 42;
    table[42 * 256 + 79] = 42;
    table[41 * 256 + 80] = 42;
    table[42 * 256 + 80] = 42;
    table[41 * 256 + 81] = 42;
    table[42 * 256 + 81] = 42;
    table[41 * 256 + 82] = 42;
    table[42 * 256 + 82] = 42;
    table[41 * 256 + 83] = 42;
    table[42 * 256 + 83] = 42;
    table[41 * 256 + 84] = 42;
    table[42 * 256 + 84] = 42;
    table[41 * 256 + 85] = 42;
    table[42 * 256 + 85] = 42;
    table[41 * 256 + 86] = 42;
    table[42 * 256 + 86] = 42;
    table[41 * 256 + 87] = 42;
    table[42 * 256 + 87] = 42;
    table[41 * 256 + 88] = 42;
    table[42 * 256 + 88] = 42;
    table[41 * 256 + 89] = 42;
    table[42 * 256 + 89] = 42;
    table[41 * 256 + 90] = 42;
    table[42 * 256 + 90] = 42;
    table[41 * 256 + 91] = 42;
    table[42 * 256 + 91] = 42;
    table[41 * 256 + 92] = 42;
    table[42 * 256 + 92] = 42;
    table[41 * 256 + 93] = 42;
    table[42 * 256 + 93] = 42;
    table[41 * 256 + 94] = 42;
    table[42 * 256 + 94] = 42;
    table[41 * 256 + 95] = 42;
    table[42 * 256 + 95] = 42;
    table[41 * 256 + 96] = 42;
    table[42 * 256 + 96] = 42;
    table[41 * 256 + 97] = 42;
    table[42 * 256 + 97] = 42;
    table[41 * 256 + 98] = 42;
    table[42 * 256 + 98] = 42;
    table[41 * 256 + 99] = 42;
    table[42 * 256 + 99] = 42;
    table[41 * 256 + 100] = 42;
    table[42 * 256 + 100] = 42;
    table[41 * 256 + 101] = 42;
    table[42 * 256 + 101] = 42;
    table[41 * 256 + 102] = 42;
    table[42 * 256 + 102] = 42;
    table[41 * 256 + 103] = 42;
    table[42 * 256 + 103] = 42;
    table[41 * 256 + 104] = 42;
    table[42 * 256 + 104] = 42;
    table[41 * 256 + 105] = 42;
    table[42 * 256 + 105] = 42;
    table[41 * 256 + 106] = 42;
    table[42 * 256 + 106] = 42;
    table[41 * 256 + 107] = 42;
    table[42 * 256 + 107] = 42;
    table[41 * 256 + 108] = 42;
    table[42 * 256 + 108] = 42;
    table[41 * 256 + 109] = 42;
    table[42 * 256 + 109] = 42;
    table[41 * 256 + 110] = 42;
    table[42 * 256 + 110] = 42;
    table[41 * 256 + 111] = 42;
    table[42 * 256 + 111] = 42;
    table[41 * 256 + 112] = 42;
    table[42 * 256 + 112] = 42;
    table[41 * 256 + 113] = 42;
    table[42 * 256 + 113] = 42;
    table[41 * 256 + 114] = 42;
    table[42 * 256 + 114] = 42;
    table[41 * 256 + 115] = 42;
    table[42 * 256 + 115] = 42;
    table[41 * 256 + 116] = 42;
    table[42 * 256 + 116] = 42;
    table[41 * 256 + 117] = 42;
    table[42 * 256 + 117] = 42;
    table[41 * 256 + 118] = 42;
    table[42 * 256 + 118] = 42;
    table[41 * 256 + 119] = 42;
    table[42 * 256 + 119] = 42;
    table[41 * 256 + 120] = 42;
    table[42 * 256 + 120] = 42;
    table[41 * 256 + 121] = 42;
    table[42 * 256 + 121] = 42;
    table[41 * 256 + 122] = 42;
    table[42 * 256 + 122] = 42;
    table[41 * 256 + 123] = 42;
    table[42 * 256 + 123] = 42;
    table[41 * 256 + 124] = 42;
    table[42 * 256 + 124] = 42;
    table[41 * 256 + 125] = 42;
    table[42 * 256 + 125] = 42;
    table[41 * 256 + 126] = 42;
    table[42 * 256 + 126] = 42;
    table[41 * 256 + 127] = 42;
    table[42 * 256 + 127] = 42;
    table[41 * 256 + 128] = 42;
    table[42 * 256 + 128] = 42;
    table[41 * 256 + 129] = 42;
    table[42 * 256 + 129] = 42;
    table[41 * 256 + 130] = 42;
    table[42 * 256 + 130] = 42;
    table[41 * 256 + 131] = 42;
    table[42 * 256 + 131] = 42;
    table[41 * 256 + 132] = 42;
    table[42 * 256 + 132] = 42;
    table[41 * 256 + 133] = 42;
    table[42 * 256 + 133] = 42;
    table[41 * 256 + 134] = 42;
    table[42 * 256 + 134] = 42;
    table[41 * 256 + 135] = 42;
    table[42 * 256 + 135] = 42;
    table[41 * 256 + 136] = 42;
    table[42 * 256 + 136] = 42;
    table[41 * 256 + 137] = 42;
    table[42 * 256 + 137] = 42;
    table[41 * 256 + 138] = 42;
    table[42 * 256 + 138] = 42;
    table[41 * 256 + 139] = 42;
    table[42 * 256 + 139] = 42;
    table[41 * 256 + 140] = 42;
    table[42 * 256 + 140] = 42;
    table[41 * 256 + 141] = 42;
    table[42 * 256 + 141] = 42;
    table[41 * 256 + 142] = 42;
    table[42 * 256 + 142] = 42;
    table[41 * 256 + 143] = 42;
    table[42 * 256 + 143] = 42;
    table[41 * 256 + 144] = 42;
    table[42 * 256 + 144] = 42;
    table[41 * 256 + 145] = 42;
    table[42 * 256 + 145] = 42;
    table[41 * 256 + 146] = 42;
    table[42 * 256 + 146] = 42;
    table[41 * 256 + 147] = 42;
    table[42 * 256 + 147] = 42;
    table[41 * 256 + 148] = 42;
    table[42 * 256 + 148] = 42;
    table[41 * 256 + 149] = 42;
    table[42 * 256 + 149] = 42;
    table[41 * 256 + 150] = 42;
    table[42 * 256 + 150] = 42;
    table[41 * 256 + 151] = 42;
    table[42 * 256 + 151] = 42;
    table[41 * 256 + 152] = 42;
    table[42 * 256 + 152] = 42;
    table[41 * 256 + 153] = 42;
    table[42 * 256 + 153] = 42;
    table[41 * 256 + 154] = 42;
    table[42 * 256 + 154] = 42;
    table[41 * 256 + 155] = 42;
    table[42 * 256 + 155] = 42;
    table[41 * 256 + 156] = 42;
    table[42 * 256 + 156] = 42;
    table[41 * 256 + 157] = 42;
    table[42 * 256 + 157] = 42;
    table[41 * 256 + 158] = 42;
    table[42 * 256 + 158] = 42;
    table[41 * 256 + 159] = 42;
    table[42 * 256 + 159] = 42;
    table[41 * 256 + 160] = 42;
    table[42 * 256 + 160] = 42;
    table[41 * 256 + 161] = 42;
    table[42 * 256 + 161] = 42;
    table[41 * 256 + 162] = 42;
    table[42 * 256 + 162] = 42;
    table[41 * 256 + 163] = 42;
    table[42 * 256 + 163] = 42;
    table[41 * 256 + 164] = 42;
    table[42 * 256 + 164] = 42;
    table[41 * 256 + 165] = 42;
    table[42 * 256 + 165] = 42;
    table[41 * 256 + 166] = 42;
    table[42 * 256 + 166] = 42;
    table[41 * 256 + 167] = 42;
    table[42 * 256 + 167] = 42;
    table[41 * 256 + 168] = 42;
    table[42 * 256 + 168] = 42;
    table[41 * 256 + 169] = 42;
    table[42 * 256 + 169] = 42;
    table[41 * 256 + 170] = 42;
    table[42 * 256 + 170] = 42;
    table[41 * 256 + 171] = 42;
    table[42 * 256 + 171] = 42;
    table[41 * 256 + 172] = 42;
    table[42 * 256 + 172] = 42;
    table[41 * 256 + 173] = 42;
    table[42 * 256 + 173] = 42;
    table[41 * 256 + 174] = 42;
    table[42 * 256 + 174] = 42;
    table[41 * 256 + 175] = 42;
    table[42 * 256 + 175] = 42;
    table[41 * 256 + 176] = 42;
    table[42 * 256 + 176] = 42;
    table[41 * 256 + 177] = 42;
    table[42 * 256 + 177] = 42;
    table[41 * 256 + 178] = 42;
    table[42 * 256 + 178] = 42;
    table[41 * 256 + 179] = 42;
    table[42 * 256 + 179] = 42;
    table[41 * 256 + 180] = 42;
    table[42 * 256 + 180] = 42;
    table[41 * 256 + 181] = 42;
    table[42 * 256 + 181] = 42;
    table[41 * 256 + 182] = 42;
    table[42 * 256 + 182] = 42;
    table[41 * 256 + 183] = 42;
    table[42 * 256 + 183] = 42;
    table[41 * 256 + 184] = 42;
    table[42 * 256 + 184] = 42;
    table[41 * 256 + 185] = 42;
    table[42 * 256 + 185] = 42;
    table[41 * 256 + 186] = 42;
    table[42 * 256 + 186] = 42;
    table[41 * 256 + 187] = 42;
    table[42 * 256 + 187] = 42;
    table[41 * 256 + 188] = 42;
    table[42 * 256 + 188] = 42;
    table[41 * 256 + 189] = 42;
    table[42 * 256 + 189] = 42;
    table[41 * 256 + 190] = 42;
    table[42 * 256 + 190] = 42;
    table[41 * 256 + 191] = 42;
    table[42 * 256 + 191] = 42;
    table[41 * 256 + 192] = 42;
    table[42 * 256 + 192] = 42;
    table[41 * 256 + 193] = 42;
    table[42 * 256 + 193] = 42;
    table[41 * 256 + 194] = 42;
    table[42 * 256 + 194] = 42;
    table[41 * 256 + 195] = 42;
    table[42 * 256 + 195] = 42;
    table[41 * 256 + 196] = 42;
    table[42 * 256 + 196] = 42;
    table[41 * 256 + 197] = 42;
    table[42 * 256 + 197] = 42;
    table[41 * 256 + 198] = 42;
    table[42 * 256 + 198] = 42;
    table[41 * 256 + 199] = 42;
    table[42 * 256 + 199] = 42;
    table[41 * 256 + 200] = 42;
    table[42 * 256 + 200] = 42;
    table[41 * 256 + 201] = 42;
    table[42 * 256 + 201] = 42;
    table[41 * 256 + 202] = 42;
    table[42 * 256 + 202] = 42;
    table[41 * 256 + 203] = 42;
    table[42 * 256 + 203] = 42;
    table[41 * 256 + 204] = 42;
    table[42 * 256 + 204] = 42;
    table[41 * 256 + 205] = 42;
    table[42 * 256 + 205] = 42;
    table[41 * 256 + 206] = 42;
    table[42 * 256 + 206] = 42;
    table[41 * 256 + 207] = 42;
    table[42 * 256 + 207] = 42;
    table[41 * 256 + 208] = 42;
    table[42 * 256 + 208] = 42;
    table[41 * 256 + 209] = 42;
    table[42 * 256 + 209] = 42;
    table[41 * 256 + 210] = 42;
    table[42 * 256 + 210] = 42;
    table[41 * 256 + 211] = 42;
    table[42 * 256 + 211] = 42;
    table[41 * 256 + 212] = 42;
    table[42 * 256 + 212] = 42;
    table[41 * 256 + 213] = 42;
    table[42 * 256 + 213] = 42;
    table[41 * 256 + 214] = 42;
    table[42 * 256 + 214] = 42;
    table[41 * 256 + 215] = 42;
    table[42 * 256 + 215] = 42;
    table[41 * 256 + 216] = 42;
    table[42 * 256 + 216] = 42;
    table[41 * 256 + 217] = 42;
    table[42 * 256 + 217] = 42;
    table[41 * 256 + 218] = 42;
    table[42 * 256 + 218] = 42;
    table[41 * 256 + 219] = 42;
    table[42 * 256 + 219] = 42;
    table[41 * 256 + 220] = 42;
    table[42 * 256 + 220] = 42;
    table[41 * 256 + 221] = 42;
    table[42 * 256 + 221] = 42;
    table[41 * 256 + 222] = 42;
    table[42 * 256 + 222] = 42;
    table[41 * 256 + 223] = 42;
    table[42 * 256 + 223] = 42;
    table[41 * 256 + 224] = 42;
    table[42 * 256 + 224] = 42;
    table[41 * 256 + 225] = 42;
    table[42 * 256 + 225] = 42;
    table[41 * 256 + 226] = 42;
    table[42 * 256 + 226] = 42;
    table[41 * 256 + 227] = 42;
    table[42 * 256 + 227] = 42;
    table[41 * 256 + 228] = 42;
    table[42 * 256 + 228] = 42;
    table[41 * 256 + 229] = 42;
    table[42 * 256 + 229] = 42;
    table[41 * 256 + 230] = 42;
    table[42 * 256 + 230] = 42;
    table[41 * 256 + 231] = 42;
    table[42 * 256 + 231] = 42;
    table[41 * 256 + 232] = 42;
    table[42 * 256 + 232] = 42;
    table[41 * 256 + 233] = 42;
    table[42 * 256 + 233] = 42;
    table[41 * 256 + 234] = 42;
    table[42 * 256 + 234] = 42;
    table[41 * 256 + 235] = 42;
    table[42 * 256 + 235] = 42;
    table[41 * 256 + 236] = 42;
    table[42 * 256 + 236] = 42;
    table[41 * 256 + 237] = 42;
    table[42 * 256 + 237] = 42;
    table[41 * 256 + 238] = 42;
    table[42 * 256 + 238] = 42;
    table[41 * 256 + 239] = 42;
    table[42 * 256 + 239] = 42;
    table[41 * 256 + 240] = 42;
    table[42 * 256 + 240] = 42;
    table[41 * 256 + 241] = 42;
    table[42 * 256 + 241] = 42;
    table[41 * 256 + 242] = 42;
    table[42 * 256 + 242] = 42;
    table[41 * 256 + 243] = 42;
    table[42 * 256 + 243] = 42;
    table[41 * 256 + 244] = 42;
    table[42 * 256 + 244] = 42;
    table[41 * 256 + 245] = 42;
    table[42 * 256 + 245] = 42;
    table[41 * 256 + 246] = 42;
    table[42 * 256 + 246] = 42;
    table[41 * 256 + 247] = 42;
    table[42 * 256 + 247] = 42;
    table[41 * 256 + 248] = 42;
    table[42 * 256 + 248] = 42;
    table[41 * 256 + 249] = 42;
    table[42 * 256 + 249] = 42;
    table[41 * 256 + 250] = 42;
    table[42 * 256 + 250] = 42;
    table[41 * 256 + 251] = 42;
    table[42 * 256 + 251] = 42;
    table[41 * 256 + 252] = 42;
    table[42 * 256 + 252] = 42;
    table[41 * 256 + 253] = 42;
    table[42 * 256 + 253] = 42;
    table[41 * 256 + 254] = 42;
    table[42 * 256 + 254] = 42;
    table[0 * 256 + 76] = 1;
    table[1 * 256 + 97] = 2;
    table[2 * 256 + 116] = 3;
    table[3 * 256 + 105] = 4;
    table[4 * 256 + 110] = 5;
    table[5 * 256 + 45] = 6;
    table[6 * 256 + 69] = 7;
    table[7 * 256 + 120] = 8;
    table[8 * 256 + 116] = 9;
    table[9 * 256 + 101] = 10;
    table[10 * 256 + 110] = 11;
    table[11 * 256 + 115] = 12;
    table[12 * 256 + 105] = 13;
    table[13 * 256 + 111] = 14;
    table[14 * 256 + 110] = 15;
    table[15 * 256 + 61] = 16;
    table[16 * 256 + 194] = 17;
    table[16 * 256 + 195] = 18;
    table[16 * 256 + 196] = 18;
    table[16 * 256 + 197] = 18;
    table[16 * 256 + 198] = 18;
    table[17 * 256 + 161] = 19;
    table[17 * 256 + 162] = 19;
    table[17 * 256 + 163] = 19;
    table[17 * 256 + 164] = 19;
    table[17 * 256 + 165] = 19;
    table[17 * 256 + 166] = 19;
    table[17 * 256 + 167] = 19;
    table[17 * 256 + 168] = 19;
    table[17 * 256 + 169] = 19;
    table[17 * 256 + 170] = 19;
    table[17 * 256 + 171] = 19;
    table[17 * 256 + 172] = 19;
    table[17 * 256 + 173] = 19;
    table[17 * 256 + 174] = 19;
    table[17 * 256 + 175] = 19;
    table[17 * 256 + 176] = 19;
    table[17 * 256 + 177] = 19;
    table[17 * 256 + 178] = 19;
    table[17 * 256 + 179] = 19;
    table[17 * 256 + 180] = 19;
    table[17 * 256 + 181] = 19;
    table[17 * 256 + 182] = 19;
    table[17 * 256 + 183] = 19;
    table[17 * 256 + 184] = 19;
    table[17 * 256 + 185] = 19;
    table[17 * 256 + 186] = 19;
    table[17 * 256 + 187] = 19;
    table[17 * 256 + 188] = 19;
    table[17 * 256 + 189] = 19;
    table[17 * 256 + 190] = 19;
    table[17 * 256 + 191] = 19;
    table[18 * 256 + 128] = 19;
    table[18 * 256 + 129] = 19;
    table[18 * 256 + 130] = 19;
    table[18 * 256 + 131] = 19;
    table[18 * 256 + 132] = 19;
    table[18 * 256 + 133] = 19;
    table[18 * 256 + 134] = 19;
    table[18 * 256 + 135] = 19;
    table[18 * 256 + 136] = 19;
    table[18 * 256 + 137] = 19;
    table[18 * 256 + 138] = 19;
    table[18 * 256 + 139] = 19;
    table[18 * 256 + 140] = 19;
    table[18 * 256 + 141] = 19;
    table[18 * 256 + 142] = 19;
    table[18 * 256 + 143] = 19;
    table[18 * 256 + 144] = 19;
    table[18 * 256 + 145] = 19;
    table[18 * 256 + 146] = 19;
    table[18 * 256 + 147] = 19;
    table[18 * 256 + 148] = 19;
    table[18 * 256 + 149] = 19;
    table[18 * 256 + 150] = 19;
    table[18 * 256 + 151] = 19;
    table[18 * 256 + 152] = 19;
    table[18 * 256 + 153] = 19;
    table[18 * 256 + 154] = 19;
    table[18 * 256 + 155] = 19;
    table[18 * 256 + 156] = 19;
    table[18 * 256 + 157] = 19;
    table[18 * 256 + 158] = 19;
    table[18 * 256 + 159] = 19;
    table[18 * 256 + 160] = 19;
    table[18 * 256 + 161] = 19;
    table[18 * 256 + 162] = 19;
    table[18 * 256 + 163] = 19;
    table[18 * 256 + 164] = 19;
    table[18 * 256 + 165] = 19;
    table[18 * 256 + 166] = 19;
    table[18 * 256 + 167] = 19;
    table[18 * 256 + 168] = 19;
    table[18 * 256 + 169] = 19;
    table[18 * 256 + 170] = 19;
    table[18 * 256 + 171] = 19;
    table[18 * 256 + 172] = 19;
    table[18 * 256 + 173] = 19;
    table[18 * 256 + 174] = 19;
    table[18 * 256 + 175] = 19;
    table[18 * 256 + 176] = 19;
    table[18 * 256 + 177] = 19;
    table[18 * 256 + 178] = 19;
    table[18 * 256 + 179] = 19;
    table[18 * 256 + 180] = 19;
    table[18 * 256 + 181] = 19;
    table[18 * 256 + 182] = 19;
    table[18 * 256 + 183] = 19;
    table[18 * 256 + 184] = 19;
    table[18 * 256 + 185] = 19;
    table[18 * 256 + 186] = 19;
    table[18 * 256 + 187] = 19;
    table[18 * 256 + 188] = 19;
    table[18 * 256 + 189] = 19;
    table[18 * 256 + 190] = 19;
    table[18 * 256 + 191] = 19;
    table[19 * 256 + 194] = 17;
    table[19 * 256 + 195] = 18;
    table[19 * 256 + 196] = 18;
    table[19 * 256 + 197] = 18;
    table[19 * 256 + 198] = 18;
    table[19 * 256 + 32] = 20;
    table[20 * 256 + 71] = 21;
    table[21 * 256 + 114] = 22;
    table[22 * 256 + 101] = 23;
    table[23 * 256 + 101] = 24;
    table[24 * 256 + 107] = 25;
    table[25 * 256 + 61] = 26;
    table[26 * 256 + 205] = 27;
    table[26 * 256 + 206] = 28;
    table[26 * 256 + 207] = 28;
    table[27 * 256 + 176] = 29;
    table[27 * 256 + 177] = 29;
    table[27 * 256 + 178] = 29;
    table[27 * 256 + 179] = 29;
    table[27 * 256 + 180] = 29;
    table[27 * 256 + 181] = 29;
    table[27 * 256 + 182] = 29;
    table[27 * 256 + 183] = 29;
    table[27 * 256 + 184] = 29;
    table[27 * 256 + 185] = 29;
    table[27 * 256 + 186] = 29;
    table[27 * 256 + 187] = 29;
    table[27 * 256 + 188] = 29;
    table[27 * 256 + 189] = 29;
    table[27 * 256 + 190] = 29;
    table[27 * 256 + 191] = 29;
    table[28 * 256 + 128] = 29;
    table[28 * 256 + 129] = 29;
    table[28 * 256 + 130] = 29;
    table[28 * 256 + 131] = 29;
    table[28 * 256 + 132] = 29;
    table[28 * 256 + 133] = 29;
    table[28 * 256 + 134] = 29;
    table[28 * 256 + 135] = 29;
    table[28 * 256 + 136] = 29;
    table[28 * 256 + 137] = 29;
    table[28 * 256 + 138] = 29;
    table[28 * 256 + 139] = 29;
    table[28 * 256 + 140] = 29;
    table[28 * 256 + 141] = 29;
    table[28 * 256 + 142] = 29;
    table[28 * 256 + 143] = 29;
    table[28 * 256 + 144] = 29;
    table[28 * 256 + 145] = 29;
    table[28 * 256 + 146] = 29;
    table[28 * 256 + 147] = 29;
    table[28 * 256 + 148] = 29;
    table[28 * 256 + 149] = 29;
    table[28 * 256 + 150] = 29;
    table[28 * 256 + 151] = 29;
    table[28 * 256 + 152] = 29;
    table[28 * 256 + 153] = 29;
    table[28 * 256 + 154] = 29;
    table[28 * 256 + 155] = 29;
    table[28 * 256 + 156] = 29;
    table[28 * 256 + 157] = 29;
    table[28 * 256 + 158] = 29;
    table[28 * 256 + 159] = 29;
    table[28 * 256 + 160] = 29;
    table[28 * 256 + 161] = 29;
    table[28 * 256 + 162] = 29;
    table[28 * 256 + 163] = 29;
    table[28 * 256 + 164] = 29;
    table[28 * 256 + 165] = 29;
    table[28 * 256 + 166] = 29;
    table[28 * 256 + 167] = 29;
    table[28 * 256 + 168] = 29;
    table[28 * 256 + 169] = 29;
    table[28 * 256 + 170] = 29;
    table[28 * 256 + 171] = 29;
    table[28 * 256 + 172] = 29;
    table[28 * 256 + 173] = 29;
    table[28 * 256 + 174] = 29;
    table[28 * 256 + 175] = 29;
    table[28 * 256 + 176] = 29;
    table[28 * 256 + 177] = 29;
    table[28 * 256 + 178] = 29;
    table[28 * 256 + 179] = 29;
    table[28 * 256 + 180] = 29;
    table[28 * 256 + 181] = 29;
    table[28 * 256 + 182] = 29;
    table[28 * 256 + 183] = 29;
    table[28 * 256 + 184] = 29;
    table[28 * 256 + 185] = 29;
    table[28 * 256 + 186] = 29;
    table[28 * 256 + 187] = 29;
    table[28 * 256 + 188] = 29;
    table[28 * 256 + 189] = 29;
    table[28 * 256 + 190] = 29;
    table[28 * 256 + 191] = 29;
    table[29 * 256 + 205] = 27;
    table[29 * 256 + 206] = 28;
    table[29 * 256 + 207] = 28;
    table[29 * 256 + 32] = 30;
    table[30 * 256 + 67] = 31;
    table[31 * 256 + 121] = 32;
    table[32 * 256 + 114] = 33;
    table[33 * 256 + 105] = 34;
    table[34 * 256 + 108] = 35;
    table[35 * 256 + 108] = 36;
    table[36 * 256 + 105] = 37;
    table[37 * 256 + 99] = 38;
    table[38 * 256 + 61] = 39;
    table[39 * 256 + 208] = 40;
    table[39 * 256 + 209] = 40;
    table[39 * 256 + 210] = 40;
    table[39 * 256 + 211] = 40;
    table[40 * 256 + 128] = 41;
    table[40 * 256 + 129] = 41;
    table[40 * 256 + 130] = 41;
    table[40 * 256 + 131] = 41;
    table[40 * 256 + 132] = 41;
    table[40 * 256 + 133] = 41;
    table[40 * 256 + 134] = 41;
    table[40 * 256 + 135] = 41;
    table[40 * 256 + 136] = 41;
    table[40 * 256 + 137] = 41;
    table[40 * 256 + 138] = 41;
    table[40 * 256 + 139] = 41;
    table[40 * 256 + 140] = 41;
    table[40 * 256 + 141] = 41;
    table[40 * 256 + 142] = 41;
    table[40 * 256 + 143] = 41;
    table[40 * 256 + 144] = 41;
    table[40 * 256 + 145] = 41;
    table[40 * 256 + 146] = 41;
    table[40 * 256 + 147] = 41;
    table[40 * 256 + 148] = 41;
    table[40 * 256 + 149] = 41;
    table[40 * 256 + 150] = 41;
    table[40 * 256 + 151] = 41;
    table[40 * 256 + 152] = 41;
    table[40 * 256 + 153] = 41;
    table[40 * 256 + 154] = 41;
    table[40 * 256 + 155] = 41;
    table[40 * 256 + 156] = 41;
    table[40 * 256 + 157] = 41;
    table[40 * 256 + 158] = 41;
    table[40 * 256 + 159] = 41;
    table[40 * 256 + 160] = 41;
    table[40 * 256 + 161] = 41;
    table[40 * 256 + 162] = 41;
    table[40 * 256 + 163] = 41;
    table[40 * 256 + 164] = 41;
    table[40 * 256 + 165] = 41;
    table[40 * 256 + 166] = 41;
    table[40 * 256 + 167] = 41;
    table[40 * 256 + 168] = 41;
    table[40 * 256 + 169] = 41;
    table[40 * 256 + 170] = 41;
    table[40 * 256 + 171] = 41;
    table[40 * 256 + 172] = 41;
    table[40 * 256 + 173] = 41;
    table[40 * 256 + 174] = 41;
    table[40 * 256 + 175] = 41;
    table[40 * 256 + 176] = 41;
    table[40 * 256 + 177] = 41;
    table[40 * 256 + 178] = 41;
    table[40 * 256 + 179] = 41;
    table[40 * 256 + 180] = 41;
    table[40 * 256 + 181] = 41;
    table[40 * 256 + 182] = 41;
    table[40 * 256 + 183] = 41;
    table[40 * 256 + 184] = 41;
    table[40 * 256 + 185] = 41;
    table[40 * 256 + 186] = 41;
    table[40 * 256 + 187] = 41;
    table[40 * 256 + 188] = 41;
    table[40 * 256 + 189] = 41;
    table[40 * 256 + 190] = 41;
    table[40 * 256 + 191] = 41;
    table[41 * 256 + 208] = 40;
    table[41 * 256 + 209] = 40;
    table[41 * 256 + 210] = 40;
    table[41 * 256 + 211] = 40;

    table
}

pub fn regex_match<let N: u32>(input: [u8; N]) -> BoundedVec<BoundedVec<u8, N>, 3> {
    let pattern_match = unsafe { __regex_match(input) };
    let substring_ranges = pattern_match.substrings;
    // "Previous" state
    let mut s: Field = 0;
    s = table[255];
    // "Next"/upcoming state
    let mut s_next: Field = 0;

    // check the match
    for i in 0..N {
        let temp = input[i] as Field;
        s_next = table[s * 256 + temp];
        let potential_s_next = table[temp];
        if s_next == 0 {
            s = 0;
            s_next = potential_s_next;
        }
        std::as_witness(s_next);

        // check case 1
        let range_1 = substring_ranges.get_unchecked(0).in_range(i);
        let case_1 = [
            (s == 16) & ((s_next == 17) | (s_next == 18)),
            (s_next == 19) & ((s == 17) | (s == 18)),
            (s == 19) & ((s_next == 17) | (s_next == 18)),
        ]
            .any(|case| case == true | range_1 == false);

        let range_2 = substring_ranges.get_unchecked(1).in_range(i);
        // ((s == 26) & (s_next == 27)),
        // ((s == 26) & (s_next == 28)),
        // ((s == 27) & (s_next == 29)),
        // ((s == 28) & (s_next == 29)),
        // ((s == 29) & (s_next == 27)),
        // ((s == 29) & (s_next == 28)),
        let case_2 = [
            (s_next == 27) & ((s == 26) | (s == 29)),
            (s_next == 28) & ((s == 26) | (s == 29)),
            (s_next == 29) & ((s == 27) | (s == 28)),
        ]
            .any(|case| case == true | range_2 == false);

        // let check_2 = case_2.any(|case| case == true | range_2 == false);
        let range_3 = substring_ranges.get_unchecked(2).in_range(i);
        let case_3 = [
            (s_next == 40) & ((s == 41) | (s == 39)),
            (s == 40) & (s_next == 41),
        ].any(|case| case == true | range_3 == false);

        // let check_3 = case_3.any(|case| case == true | range_3 == false);

        let substring_range_check = [case_1, case_2, case_3]
            .all(|check| check == true);

        // let check = check_1 & check_2 & check_3;
        assert(substring_range_check, "substr array ranges wrong");

        s = s_next;
    }
    // check final state
    assert((s == 41) | (s == 42), f"no match: {s}");

    // extract substrings
    let mut substrings: BoundedVec<BoundedVec<u8, N>, 3> = BoundedVec::new();
    for i in 0..2 {
        let substring = pattern_match.substrings.get_unchecked(i);
        let mut extracted_substring = extract_substring(substring, pattern_match.masked);
        let mut len = substrings.len() + 1;
        if i < pattern_match.substrings.len() {
            extracted_substring = BoundedVec::new();
            len = substrings.len();
        }
        substrings.len = len;
        substrings.storage[i] = extracted_substring;
    }

    substrings
}

pub unconstrained fn __regex_match<let N: u32>(input: [u8; N]) -> RegexMatch<N, 3> {
    // regex: Latin-Extension=[\u{00a1}-\u{01bf}]+ Greek=[\u{0370}-\u{03ff}]+ Cyrillic=[\u{0400}-\u{04ff}]+
    let mut substrings: BoundedVec<Sequence, 3> = BoundedVec::new();
    let mut current_substring = Sequence::default();
    let mut full_match = Sequence::default();

    // "Previous" state
    let mut s: Field = 0;
    s = table[255];
    // "Next"/upcoming state
    let mut s_next: Field = 0;

    let mut consecutive_substr = 0;
    let mut complete = false;

    for i in 0..input.len() {
        let temp = input[i] as Field;
        let mut reset = false;
        s_next = table[s * 256 + temp];
        let potential_s_next = table[temp];
        if s_next == 0 {
            reset = true;
            s = 0;
            s_next = potential_s_next;
        }
        // If a substring was in the making, but the state was reset
        // we disregard previous progress because apparently it is invalid
        if (reset & (consecutive_substr == 1)) {
            current_substring = Sequence::default();
            consecutive_substr = 0;
        }
        // Fill up substrings
        if (
            (s == 16) & (s_next == 17)
                | (s == 16) & (s_next == 18)
                | (s == 17) & (s_next == 19)
                | (s == 18) & (s_next == 19)
                | (s == 19) & (s_next == 17)
                | (s == 19) & (s_next == 18)
        ) {
            if (consecutive_substr == 0) {
                full_match.index = i;
                current_substring.index = i;
            };

            current_substring.length += 1;
            consecutive_substr = 1;
        } else if (
            (s == 26) & (s_next == 27)
                | (s == 26) & (s_next == 28)
                | (s == 27) & (s_next == 29)
                | (s == 28) & (s_next == 29)
                | (s == 29) & (s_next == 27)
                | (s == 29) & (s_next == 28)
        ) {
            current_substring.length += 1;
            consecutive_substr = 1;
        } else if (
            (s == 39) & (s_next == 40) | (s == 40) & (s_next == 41) | (s == 41) & (s_next == 40)
        ) {
            current_substring.length += 1;
            consecutive_substr = 1;
        } else if ((consecutive_substr == 1) & (s_next == 0)) {
            current_substring = Sequence::default();
            full_match = Sequence::default();
            substrings = BoundedVec::new();
            consecutive_substr = 0;
        } else if (s == 41) & (s_next == 42) {
            full_match.length = i - full_match.index + 1;
            complete = true;
        } else if (consecutive_substr == 1) {
            // The substring is done so "save" it
            substrings.push(current_substring);
            // reset the substring holder for next use
            current_substring = Sequence::default();
            consecutive_substr = 0;
        }
        s = s_next;
        if complete == true {
            break;
        }
    }
    assert((s == 41) | (s == 42), f"no match: {s}");
    // Add pending substring that hasn't been added
    if consecutive_substr == 1 {
        substrings.push(current_substring);
        full_match.length = input.len() - full_match.index;
    }

    // make masked array
    let mut masked = [0; N];
    for i in 0..substrings.len() {
        let substring = substrings.get(i);
        let start_index = substring.index;
        let end_index = start_index + substring.length;
        for j in start_index..end_index {
            masked[j] = input[j];
        }
    }

    RegexMatch { masked, full_match, substrings }
}

pub struct Sequence {
    index: u32,
    length: u32,
}

impl Sequence {
    pub fn new(index: u32, length: u32) -> Self {
        Self { index, length }
    }

    pub fn default() -> Self {
        Self { index: 0, length: 0 }
    }

    pub fn end(self) -> u32 {
        self.index + self.length
    }

    pub fn in_range(self, index: u32) -> bool {
        index >= self.index & index < self.end()
    }
}

pub struct RegexMatch<let INPUT_LENGTH: u32, let NUM_SUBSTRINGS: u32> {
    masked: [u8; INPUT_LENGTH],
    full_match: Sequence,
    substrings: BoundedVec<Sequence, NUM_SUBSTRINGS>,
}

pub fn extract_substring<let INPUT_LENGTH: u32, let MAX_SUBSTRING_LENGTH: u32>(
    substring_sequence: Sequence,
    input: [u8; INPUT_LENGTH],
) -> BoundedVec<u8, MAX_SUBSTRING_LENGTH> {
    let mut substring: BoundedVec<u8, MAX_SUBSTRING_LENGTH> =
        unsafe { __extract_substring(substring_sequence, input) };
    assert(substring_sequence.length == substring.len(), "length mismatch");
    // let first_index = input[substring_sequence.index];
    for i in 0..MAX_SUBSTRING_LENGTH {
        // hack for index to never exceed array bounds
        // must be constrained to be true when matching is required to prevent 0's passing when shouldn't
        // @dev while this adds constraints in worse case it can be more efficient if MAX_SUBSTRING_LENGTH < INPUT_LENGTH
        let input_range_check = substring_sequence.index + i < INPUT_LENGTH;
        let index = (substring_sequence.index + i) as Field * input_range_check as Field;

        // range where input should match substring
        let sequence_range_check = i >= substring_sequence.length;

        // constrain array construction if in range
        let expected_byte = input[index];
        let byte = substring.get_unchecked(i);
        let matched = (expected_byte as Field == byte as Field);
        assert(matched | sequence_range_check, "incorrect substring construction");
    }
    substring
}

unconstrained fn __extract_substring<let INPUT_LENGTH: u32, let MAX_SUBSTRING_LENGTH: u32>(
    substring_sequence: Sequence,
    input: [u8; INPUT_LENGTH],
) -> BoundedVec<u8, MAX_SUBSTRING_LENGTH> {
    let mut substring: BoundedVec<u8, MAX_SUBSTRING_LENGTH> = BoundedVec::new();
    for i in 0..substring_sequence.length {
        let byte = input[substring_sequence.index + i];
        substring.push(byte);
    }
    substring
}
