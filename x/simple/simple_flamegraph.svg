<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = true;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">./simple/target/simple_regex.json-main</text><text id="details" fill="rgb(0,0,0)" x="10" y="197.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="197.00"> </text><svg id="frames" x="10" width="1180" total_samples="134325"><g><title>acir::blackbox::range (5,419 gates, 4.03%)</title><rect x="0.0000%" y="133" width="4.0342%" height="23" fill="rgb(255,219,219)" fg:x="0" fg:w="5419"/><text x="0.2500%" y="147.50">acir..</text></g><g><title>acir::memory::init (3 gates, 0.00%)</title><rect x="4.0342%" y="133" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="5419" fg:w="3"/><text x="4.2842%" y="147.50"></text></g><g><title>main.nr:10:16::r != 0 (3,072 gates, 2.29%)</title><rect x="4.0365%" y="133" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="5422" fg:w="3072"/><text x="4.2865%" y="147.50">m..</text></g><g><title>acir::arithmetic (3,072 gates, 2.29%)</title><rect x="4.0365%" y="109" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="5422" fg:w="3072"/><text x="4.2865%" y="123.50">a..</text></g><g><title>acir::blackbox::range (4,027 gates, 3.00%)</title><rect x="6.3235%" y="85" width="2.9980%" height="23" fill="rgb(255,224,224)" fg:x="8494" fg:w="4027"/><text x="6.5735%" y="99.50">aci..</text></g><g><title>regex.nr:1512:34::__regex_match(input) (4,029 gates, 3.00%)</title><rect x="6.3235%" y="109" width="2.9994%" height="23" fill="rgb(255,224,224)" fg:x="8494" fg:w="4029"/><text x="6.5735%" y="123.50">reg..</text></g><g><title>acir::memory::init (2 gates, 0.00%)</title><rect x="9.3214%" y="85" width="0.0015%" height="23" fill="rgb(255,249,249)" fg:x="12521" fg:w="2"/><text x="9.5714%" y="99.50"></text></g><g><title>acir::arithmetic (1,060 gates, 0.79%)</title><rect x="9.3229%" y="85" width="0.7891%" height="23" fill="rgb(255,236,236)" fg:x="12523" fg:w="1060"/><text x="9.5729%" y="99.50"></text></g><g><title>acir::memory::init (15 gates, 0.01%)</title><rect x="10.1120%" y="85" width="0.0112%" height="23" fill="rgb(255,248,248)" fg:x="13583" fg:w="15"/><text x="10.3620%" y="99.50"></text></g><g><title>regex.nr:1525:18::table[s * 256 + temp] (16,435 gates, 12.24%)</title><rect x="9.3229%" y="109" width="12.2353%" height="23" fill="rgb(255,197,197)" fg:x="12523" fg:w="16435"/><text x="9.5729%" y="123.50">regex.nr:1525:18::..</text></g><g><title>acir::memory::op (15,360 gates, 11.43%)</title><rect x="10.1232%" y="85" width="11.4350%" height="23" fill="rgb(255,199,199)" fg:x="13598" fg:w="15360"/><text x="10.3732%" y="99.50">acir::memory::op</text></g><g><title>regex.nr:1526:32::table[temp] (15,360 gates, 11.43%)</title><rect x="21.5582%" y="109" width="11.4350%" height="23" fill="rgb(255,199,199)" fg:x="28958" fg:w="15360"/><text x="21.8082%" y="123.50">regex.nr:1526:32:..</text></g><g><title>acir::memory::op (15,360 gates, 11.43%)</title><rect x="21.5582%" y="85" width="11.4350%" height="23" fill="rgb(255,199,199)" fg:x="28958" fg:w="15360"/><text x="21.8082%" y="99.50">acir::memory::op</text></g><g><title>regex.nr:1527:12::s_next == 0 (2,048 gates, 1.52%)</title><rect x="32.9931%" y="109" width="1.5247%" height="23" fill="rgb(255,231,231)" fg:x="44318" fg:w="2048"/><text x="33.2431%" y="123.50"></text></g><g><title>acir::arithmetic (2,048 gates, 1.52%)</title><rect x="32.9931%" y="85" width="1.5247%" height="23" fill="rgb(255,231,231)" fg:x="44318" fg:w="2048"/><text x="33.2431%" y="99.50"></text></g><g><title>regex.nr:1529:27::0 (1,021 gates, 0.76%)</title><rect x="34.5178%" y="109" width="0.7601%" height="23" fill="rgb(255,236,236)" fg:x="46366" fg:w="1021"/><text x="34.7678%" y="123.50"></text></g><g><title>acir::arithmetic (1,021 gates, 0.76%)</title><rect x="34.5178%" y="85" width="0.7601%" height="23" fill="rgb(255,236,236)" fg:x="46366" fg:w="1021"/><text x="34.7678%" y="99.50"></text></g><g><title>regex.nr:1532:14::start_range == 0 (3,066 gates, 2.28%)</title><rect x="35.2779%" y="109" width="2.2825%" height="23" fill="rgb(255,227,227)" fg:x="47387" fg:w="3066"/><text x="35.5279%" y="123.50">r..</text></g><g><title>acir::arithmetic (3,066 gates, 2.28%)</title><rect x="35.2779%" y="85" width="2.2825%" height="23" fill="rgb(255,227,227)" fg:x="47387" fg:w="3066"/><text x="35.5279%" y="99.50">a..</text></g><g><title>regex.nr:1532:35::end_range == 0 (5,108 gates, 3.80%)</title><rect x="37.5604%" y="109" width="3.8027%" height="23" fill="rgb(255,220,220)" fg:x="50453" fg:w="5108"/><text x="37.8104%" y="123.50">rege..</text></g><g><title>acir::arithmetic (5,108 gates, 3.80%)</title><rect x="37.5604%" y="85" width="3.8027%" height="23" fill="rgb(255,220,220)" fg:x="50453" fg:w="5108"/><text x="37.8104%" y="99.50">acir..</text></g><g><title>regex.nr:1533:27::i as Field (2,044 gates, 1.52%)</title><rect x="41.3631%" y="109" width="1.5217%" height="23" fill="rgb(255,231,231)" fg:x="55561" fg:w="2044"/><text x="41.6131%" y="123.50"></text></g><g><title>acir::arithmetic (2,044 gates, 1.52%)</title><rect x="41.3631%" y="85" width="1.5217%" height="23" fill="rgb(255,231,231)" fg:x="55561" fg:w="2044"/><text x="41.6131%" y="99.50"></text></g><g><title>regex.nr:1535:13::((s == 33) | (s == 34)) &amp; (end_range == 0) (1,022 gates, 0.76%)</title><rect x="42.8848%" y="109" width="0.7608%" height="23" fill="rgb(255,236,236)" fg:x="57605" fg:w="1022"/><text x="43.1348%" y="123.50"></text></g><g><title>acir::arithmetic (1,022 gates, 0.76%)</title><rect x="42.8848%" y="85" width="0.7608%" height="23" fill="rgb(255,236,236)" fg:x="57605" fg:w="1022"/><text x="43.1348%" y="99.50"></text></g><g><title>regex.nr:1535:15::s == 33 (3,069 gates, 2.28%)</title><rect x="43.6456%" y="109" width="2.2848%" height="23" fill="rgb(255,227,227)" fg:x="58627" fg:w="3069"/><text x="43.8956%" y="123.50">r..</text></g><g><title>acir::arithmetic (3,069 gates, 2.28%)</title><rect x="43.6456%" y="85" width="2.2848%" height="23" fill="rgb(255,227,227)" fg:x="58627" fg:w="3069"/><text x="43.8956%" y="99.50">a..</text></g><g><title>regex.nr:1535:27::s == 34 (3,069 gates, 2.28%)</title><rect x="45.9304%" y="109" width="2.2848%" height="23" fill="rgb(255,227,227)" fg:x="61696" fg:w="3069"/><text x="46.1804%" y="123.50">r..</text></g><g><title>acir::arithmetic (3,069 gates, 2.28%)</title><rect x="45.9304%" y="85" width="2.2848%" height="23" fill="rgb(255,227,227)" fg:x="61696" fg:w="3069"/><text x="46.1804%" y="99.50">a..</text></g><g><title>regex.nr:1536:25::i as Field (2,044 gates, 1.52%)</title><rect x="48.2151%" y="109" width="1.5217%" height="23" fill="rgb(255,231,231)" fg:x="64765" fg:w="2044"/><text x="48.4651%" y="123.50"></text></g><g><title>acir::arithmetic (2,044 gates, 1.52%)</title><rect x="48.2151%" y="85" width="1.5217%" height="23" fill="rgb(255,231,231)" fg:x="64765" fg:w="2044"/><text x="48.4651%" y="99.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="49.7368%" y="61" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="66809" fg:w="1024"/><text x="49.9868%" y="75.50"></text></g><g><title>regex.nr:1691:31::index &lt; self.end() (3,584 gates, 2.67%)</title><rect x="49.7368%" y="85" width="2.6682%" height="23" fill="rgb(255,225,225)" fg:x="66809" fg:w="3584"/><text x="49.9868%" y="99.50">re..</text></g><g><title>acir::blackbox::range (2,560 gates, 1.91%)</title><rect x="50.4992%" y="61" width="1.9058%" height="23" fill="rgb(255,229,229)" fg:x="67833" fg:w="2560"/><text x="50.7492%" y="75.50">a..</text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="52.4050%" y="37" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="70393" fg:w="1"/><text x="52.6550%" y="51.50"></text></g><g><title>regex.nr:1691:39::self.end (3 gates, 0.00%)</title><rect x="52.4050%" y="85" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="70393" fg:w="3"/><text x="52.6550%" y="99.50"></text></g><g><title>regex.nr:1687:9::self.index + self.length (3 gates, 0.00%)</title><rect x="52.4050%" y="61" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="70393" fg:w="3"/><text x="52.6550%" y="75.50"></text></g><g><title>acir::blackbox::range (2 gates, 0.00%)</title><rect x="52.4057%" y="37" width="0.0015%" height="23" fill="rgb(255,249,249)" fg:x="70394" fg:w="2"/><text x="52.6557%" y="51.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="52.4072%" y="61" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="70396" fg:w="1024"/><text x="52.6572%" y="75.50"></text></g><g><title>regex.nr:1541:23::pattern_match.substrings.get_unchecked(0).in_range (7,683 gates, 5.72%)</title><rect x="49.7368%" y="109" width="5.7197%" height="23" fill="rgb(255,214,214)" fg:x="66809" fg:w="7683"/><text x="49.9868%" y="123.50">regex.n..</text></g><g><title>regex.nr:1691:9::index &gt;= self.index (4,096 gates, 3.05%)</title><rect x="52.4072%" y="85" width="3.0493%" height="23" fill="rgb(255,223,223)" fg:x="70396" fg:w="4096"/><text x="52.6572%" y="99.50">reg..</text></g><g><title>acir::blackbox::range (3,072 gates, 2.29%)</title><rect x="53.1696%" y="61" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="71420" fg:w="3072"/><text x="53.4196%" y="75.50">a..</text></g><g><title>regex.nr:1542:22::[
            (s_next == 32) &amp; ((s == 31) | (s == 32))
        ].any(|case| case == true) | !range_0 (2,048 gates, 1.52%)</title><rect x="55.4565%" y="109" width="1.5247%" height="23" fill="rgb(255,231,231)" fg:x="74492" fg:w="2048"/><text x="55.7065%" y="123.50"></text></g><g><title>acir::arithmetic (2,048 gates, 1.52%)</title><rect x="55.4565%" y="85" width="1.5247%" height="23" fill="rgb(255,231,231)" fg:x="74492" fg:w="2048"/><text x="55.7065%" y="99.50"></text></g><g><title>regex.nr:1543:13::(s_next == 32) &amp; ((s == 31) | (s == 32)) (1,024 gates, 0.76%)</title><rect x="56.9812%" y="109" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="76540" fg:w="1024"/><text x="57.2312%" y="123.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="56.9812%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="76540" fg:w="1024"/><text x="57.2312%" y="99.50"></text></g><g><title>regex.nr:1543:14::s_next == 32 (3,072 gates, 2.29%)</title><rect x="57.7435%" y="109" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="77564" fg:w="3072"/><text x="57.9935%" y="123.50">r..</text></g><g><title>acir::arithmetic (3,072 gates, 2.29%)</title><rect x="57.7435%" y="85" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="77564" fg:w="3072"/><text x="57.9935%" y="99.50">a..</text></g><g><title>regex.nr:1543:32::s == 31 (3,072 gates, 2.29%)</title><rect x="60.0305%" y="109" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="80636" fg:w="3072"/><text x="60.2805%" y="123.50">r..</text></g><g><title>acir::arithmetic (3,072 gates, 2.29%)</title><rect x="60.0305%" y="85" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="80636" fg:w="3072"/><text x="60.2805%" y="99.50">a..</text></g><g><title>regex.nr:1543:44::s == 32 (3,072 gates, 2.29%)</title><rect x="62.3175%" y="109" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="83708" fg:w="3072"/><text x="62.5675%" y="123.50">r..</text></g><g><title>acir::arithmetic (3,072 gates, 2.29%)</title><rect x="62.3175%" y="85" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="83708" fg:w="3072"/><text x="62.5675%" y="99.50">a..</text></g><g><title>regex.nr:1551:16::substring_range_check (1,024 gates, 0.76%)</title><rect x="64.6045%" y="109" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="86780" fg:w="1024"/><text x="64.8545%" y="123.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="64.6045%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="86780" fg:w="1024"/><text x="64.8545%" y="99.50"></text></g><g><title>acir::arithmetic (4 gates, 0.00%)</title><rect x="65.3668%" y="85" width="0.0030%" height="23" fill="rgb(255,249,249)" fg:x="87804" fg:w="4"/><text x="65.6168%" y="99.50"></text></g><g><title>regex.nr:1556:36::start_range as u32 (710 gates, 0.53%)</title><rect x="65.3668%" y="109" width="0.5286%" height="23" fill="rgb(255,239,239)" fg:x="87804" fg:w="710"/><text x="65.6168%" y="123.50"></text></g><g><title>acir::blackbox::range (706 gates, 0.53%)</title><rect x="65.3698%" y="85" width="0.5256%" height="23" fill="rgb(255,239,239)" fg:x="87808" fg:w="706"/><text x="65.6198%" y="99.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="65.8954%" y="85" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="88514" fg:w="1"/><text x="66.1454%" y="99.50"></text></g><g><title>regex.nr:1556:56::end_range as u32 - start_range as u32 (2 gates, 0.00%)</title><rect x="65.8954%" y="109" width="0.0015%" height="23" fill="rgb(255,249,249)" fg:x="88514" fg:w="2"/><text x="66.1454%" y="123.50"></text></g><g><title>acir::blackbox::range (1 gates, 0.00%)</title><rect x="65.8961%" y="85" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="88515" fg:w="1"/><text x="66.1461%" y="99.50"></text></g><g><title>acir::arithmetic (4 gates, 0.00%)</title><rect x="65.8969%" y="85" width="0.0030%" height="23" fill="rgb(255,249,249)" fg:x="88516" fg:w="4"/><text x="66.1469%" y="99.50"></text></g><g><title>regex.nr:1556:56::end_range as u32 (18 gates, 0.01%)</title><rect x="65.8969%" y="109" width="0.0134%" height="23" fill="rgb(255,248,248)" fg:x="88516" fg:w="18"/><text x="66.1469%" y="123.50"></text></g><g><title>acir::blackbox::range (14 gates, 0.01%)</title><rect x="65.8999%" y="85" width="0.0104%" height="23" fill="rgb(255,248,248)" fg:x="88520" fg:w="14"/><text x="66.1499%" y="99.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="65.9103%" y="61" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="88534" fg:w="1"/><text x="66.1603%" y="75.50"></text></g><g><title>regex.nr:1557:26::full_match.end (4 gates, 0.00%)</title><rect x="65.9103%" y="109" width="0.0030%" height="23" fill="rgb(255,249,249)" fg:x="88534" fg:w="4"/><text x="66.1603%" y="123.50"></text></g><g><title>regex.nr:1687:9::self.index + self.length (4 gates, 0.00%)</title><rect x="65.9103%" y="85" width="0.0030%" height="23" fill="rgb(255,249,249)" fg:x="88534" fg:w="4"/><text x="66.1603%" y="99.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.00%)</title><rect x="65.9110%" y="61" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="88535" fg:w="3"/><text x="66.1610%" y="75.50"></text></g><g><title>acir::arithmetic (2,013 gates, 1.50%)</title><rect x="65.9133%" y="61" width="1.4986%" height="23" fill="rgb(255,231,231)" fg:x="88538" fg:w="2013"/><text x="66.1633%" y="75.50"></text></g><g><title>regex.nr:1559:25::pattern_match.substrings.get_unchecked (6,105 gates, 4.54%)</title><rect x="65.9133%" y="109" width="4.5449%" height="23" fill="rgb(255,218,218)" fg:x="88538" fg:w="6105"/><text x="66.1633%" y="123.50">regex..</text></g><g><title>bounded_vec.nr:112:9::self.storage[index] (6,105 gates, 4.54%)</title><rect x="65.9133%" y="85" width="4.5449%" height="23" fill="rgb(255,218,218)" fg:x="88538" fg:w="6105"/><text x="66.1633%" y="99.50">bound..</text></g><g><title>acir::memory::op (4,092 gates, 3.05%)</title><rect x="67.4119%" y="61" width="3.0463%" height="23" fill="rgb(255,223,223)" fg:x="90551" fg:w="4092"/><text x="67.6619%" y="75.50">aci..</text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="70.4582%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="94643" fg:w="1024"/><text x="70.7082%" y="99.50"></text></g><g><title>regex.nr:1560:28::i &gt;= pattern_match.substrings.len() (5,118 gates, 3.81%)</title><rect x="70.4582%" y="109" width="3.8102%" height="23" fill="rgb(255,220,220)" fg:x="94643" fg:w="5118"/><text x="70.7082%" y="123.50">rege..</text></g><g><title>acir::blackbox::range (4,094 gates, 3.05%)</title><rect x="71.2205%" y="85" width="3.0478%" height="23" fill="rgb(255,223,223)" fg:x="95667" fg:w="4094"/><text x="71.4705%" y="99.50">aci..</text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="74.2684%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="99761" fg:w="1024"/><text x="74.5184%" y="99.50"></text></g><g><title>regex.nr:1561:27::substring.index &gt;= full_match.index (3,073 gates, 2.29%)</title><rect x="74.2684%" y="109" width="2.2877%" height="23" fill="rgb(255,227,227)" fg:x="99761" fg:w="3073"/><text x="74.5184%" y="123.50">r..</text></g><g><title>acir::blackbox::range (2,049 gates, 1.53%)</title><rect x="75.0307%" y="85" width="1.5254%" height="23" fill="rgb(255,231,231)" fg:x="100785" fg:w="2049"/><text x="75.2807%" y="99.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="76.5561%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="102834" fg:w="1024"/><text x="76.8061%" y="99.50"></text></g><g><title>regex.nr:1562:28::substring.end() &lt;= full_match_end (3,072 gates, 2.29%)</title><rect x="76.5561%" y="109" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="102834" fg:w="3072"/><text x="76.8061%" y="123.50">r..</text></g><g><title>acir::blackbox::range (2,048 gates, 1.52%)</title><rect x="77.3184%" y="85" width="1.5247%" height="23" fill="rgb(255,231,231)" fg:x="103858" fg:w="2048"/><text x="77.5684%" y="99.50"></text></g><g><title>acir::arithmetic (1,023 gates, 0.76%)</title><rect x="78.8431%" y="61" width="0.7616%" height="23" fill="rgb(255,236,236)" fg:x="105906" fg:w="1023"/><text x="79.0931%" y="75.50"></text></g><g><title>regex.nr:1562:28::substring.end (3,069 gates, 2.28%)</title><rect x="78.8431%" y="109" width="2.2848%" height="23" fill="rgb(255,227,227)" fg:x="105906" fg:w="3069"/><text x="79.0931%" y="123.50">r..</text></g><g><title>regex.nr:1687:9::self.index + self.length (3,069 gates, 2.28%)</title><rect x="78.8431%" y="85" width="2.2848%" height="23" fill="rgb(255,227,227)" fg:x="105906" fg:w="3069"/><text x="79.0931%" y="99.50">r..</text></g><g><title>acir::blackbox::range (2,046 gates, 1.52%)</title><rect x="79.6047%" y="61" width="1.5232%" height="23" fill="rgb(255,231,231)" fg:x="106929" fg:w="2046"/><text x="79.8547%" y="75.50"></text></g><g><title>regex.nr:1563:21::(index_check &amp; length_check) | is_not_valid (1,024 gates, 0.76%)</title><rect x="81.1279%" y="109" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="108975" fg:w="1024"/><text x="81.3779%" y="123.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="81.1279%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="108975" fg:w="1024"/><text x="81.3779%" y="99.50"></text></g><g><title>regex.nr:1564:16::check (1,024 gates, 0.76%)</title><rect x="81.8902%" y="109" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="109999" fg:w="1024"/><text x="82.1402%" y="123.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="81.8902%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="109999" fg:w="1024"/><text x="82.1402%" y="99.50"></text></g><g><title>regex.nr:1568:12::(s == 33) | (s == 34) (1 gates, 0.00%)</title><rect x="82.6525%" y="109" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="111023" fg:w="1"/><text x="82.9025%" y="123.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="82.6525%" y="85" width="0.0007%" height="23" fill="rgb(255,249,249)" fg:x="111023" fg:w="1"/><text x="82.9025%" y="99.50"></text></g><g><title>regex.nr:1568:13::s == 33 (3 gates, 0.00%)</title><rect x="82.6533%" y="109" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="111024" fg:w="3"/><text x="82.9033%" y="123.50"></text></g><g><title>acir::arithmetic (3 gates, 0.00%)</title><rect x="82.6533%" y="85" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="111024" fg:w="3"/><text x="82.9033%" y="99.50"></text></g><g><title>regex.nr:1568:25::s == 34 (3 gates, 0.00%)</title><rect x="82.6555%" y="109" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="111027" fg:w="3"/><text x="82.9055%" y="123.50"></text></g><g><title>acir::arithmetic (3 gates, 0.00%)</title><rect x="82.6555%" y="85" width="0.0022%" height="23" fill="rgb(255,249,249)" fg:x="111027" fg:w="3"/><text x="82.9055%" y="99.50"></text></g><g><title>regex.nr:1705:72::__extract_substring(substring_sequence, input) (1,283 gates, 0.96%)</title><rect x="82.6577%" y="85" width="0.9551%" height="23" fill="rgb(255,235,235)" fg:x="111030" fg:w="1283"/><text x="82.9077%" y="99.50"></text></g><g><title>acir::blackbox::range (1,283 gates, 0.96%)</title><rect x="82.6577%" y="61" width="0.9551%" height="23" fill="rgb(255,235,235)" fg:x="111030" fg:w="1283"/><text x="82.9077%" y="75.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="83.6129%" y="61" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="112313" fg:w="1024"/><text x="83.8629%" y="75.50"></text></g><g><title>regex.nr:1711:33::substring_sequence.index + i &lt; INPUT_LENGTH (3,840 gates, 2.86%)</title><rect x="83.6129%" y="85" width="2.8587%" height="23" fill="rgb(255,224,224)" fg:x="112313" fg:w="3840"/><text x="83.8629%" y="99.50">re..</text></g><g><title>acir::blackbox::range (2,816 gates, 2.10%)</title><rect x="84.3752%" y="61" width="2.0964%" height="23" fill="rgb(255,228,228)" fg:x="113337" fg:w="2816"/><text x="84.6252%" y="75.50">a..</text></g><g><title>acir::arithmetic (1,023 gates, 0.76%)</title><rect x="86.4716%" y="61" width="0.7616%" height="23" fill="rgb(255,236,236)" fg:x="116153" fg:w="1023"/><text x="86.7216%" y="75.50"></text></g><g><title>regex.nr:1711:33::substring_sequence.index + i (2,812 gates, 2.09%)</title><rect x="86.4716%" y="85" width="2.0934%" height="23" fill="rgb(255,228,228)" fg:x="116153" fg:w="2812"/><text x="86.7216%" y="99.50">r..</text></g><g><title>acir::blackbox::range (1,789 gates, 1.33%)</title><rect x="87.2332%" y="61" width="1.3318%" height="23" fill="rgb(255,232,232)" fg:x="117176" fg:w="1789"/><text x="87.4832%" y="75.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="88.5650%" y="61" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="118965" fg:w="1024"/><text x="88.8150%" y="75.50"></text></g><g><title>regex.nr:1715:36::i &gt;= substring_sequence.length (3,840 gates, 2.86%)</title><rect x="88.5650%" y="85" width="2.8587%" height="23" fill="rgb(255,224,224)" fg:x="118965" fg:w="3840"/><text x="88.8150%" y="99.50">re..</text></g><g><title>acir::blackbox::range (2,816 gates, 2.10%)</title><rect x="89.3274%" y="61" width="2.0964%" height="23" fill="rgb(255,228,228)" fg:x="119989" fg:w="2816"/><text x="89.5774%" y="75.50">a..</text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="91.4238%" y="61" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="122805" fg:w="1024"/><text x="91.6738%" y="75.50"></text></g><g><title>regex.nr:1718:29::input[index] (4,096 gates, 3.05%)</title><rect x="91.4238%" y="85" width="3.0493%" height="23" fill="rgb(255,223,223)" fg:x="122805" fg:w="4096"/><text x="91.6738%" y="99.50">reg..</text></g><g><title>acir::memory::op (3,072 gates, 2.29%)</title><rect x="92.1861%" y="61" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="123829" fg:w="3072"/><text x="92.4361%" y="75.50">a..</text></g><g><title>regex.nr:1720:24::expected_byte as Field == byte as Field (3,072 gates, 2.29%)</title><rect x="94.4731%" y="85" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="126901" fg:w="3072"/><text x="94.7231%" y="99.50">r..</text></g><g><title>acir::arithmetic (3,072 gates, 2.29%)</title><rect x="94.4731%" y="61" width="2.2870%" height="23" fill="rgb(255,227,227)" fg:x="126901" fg:w="3072"/><text x="94.7231%" y="75.50">a..</text></g><g><title>regex.nr:1574:39::extract_substring(substring, input) (19,967 gates, 14.86%)</title><rect x="82.6577%" y="109" width="14.8647%" height="23" fill="rgb(255,192,192)" fg:x="111030" fg:w="19967"/><text x="82.9077%" y="123.50">regex.nr:1574:39::extra..</text></g><g><title>regex.nr:1721:16::matched | sequence_range_check (1,024 gates, 0.76%)</title><rect x="96.7601%" y="85" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="129973" fg:w="1024"/><text x="97.0101%" y="99.50"></text></g><g><title>acir::arithmetic (1,024 gates, 0.76%)</title><rect x="96.7601%" y="61" width="0.7623%" height="23" fill="rgb(255,236,236)" fg:x="129973" fg:w="1024"/><text x="97.0101%" y="75.50"></text></g><g><title>acir::arithmetic (2,048 gates, 1.52%)</title><rect x="97.5224%" y="85" width="1.5247%" height="23" fill="rgb(255,231,231)" fg:x="130997" fg:w="2048"/><text x="97.7724%" y="99.50"></text></g><g><title>all (134,325 gates, 100%)</title><rect x="0.0000%" y="157" width="100.0000%" height="23" fill="rgb(255,100,100)" fg:x="0" fg:w="134325"/><text x="0.2500%" y="171.50"></text></g><g><title>main.nr:6:13::regex::regex_match(input) (125,831 gates, 93.68%)</title><rect x="6.3235%" y="133" width="93.6765%" height="23" fill="rgb(255,104,104)" fg:x="8494" fg:w="125831"/><text x="6.5735%" y="147.50">main.nr:6:13::regex::regex_match(input)</text></g><g><title>regex.nr:1577:35::BoundedVec::new() (3,328 gates, 2.48%)</title><rect x="97.5224%" y="109" width="2.4776%" height="23" fill="rgb(255,226,226)" fg:x="130997" fg:w="3328"/><text x="97.7724%" y="123.50">re..</text></g><g><title>acir::blackbox::range (1,280 gates, 0.95%)</title><rect x="99.0471%" y="85" width="0.9529%" height="23" fill="rgb(255,235,235)" fg:x="133045" fg:w="1280"/><text x="99.2971%" y="99.50"></text></g></svg></svg>