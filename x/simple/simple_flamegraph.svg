<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="190" onload="init(evt)" viewBox="0 0 1200 190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = true;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">./simple/target/simple_regex.json-main</text><text id="details" fill="rgb(0,0,0)" x="10" y="173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="173.00"> </text><svg id="frames" x="10" width="1180" total_samples="187352"><g><title>acir::blackbox::range (3,371 gates, 1.80%)</title><rect x="0.0000%" y="109" width="1.7993%" height="23" fill="rgb(255,229,229)" fg:x="0" fg:w="3371"/><text x="0.2500%" y="123.50">a..</text></g><g><title>main.nr:10:16::r != 0 (3,072 gates, 1.64%)</title><rect x="1.7993%" y="109" width="1.6397%" height="23" fill="rgb(255,230,230)" fg:x="3371" fg:w="3072"/><text x="2.0493%" y="123.50"></text></g><g><title>acir::arithmetic (3,072 gates, 1.64%)</title><rect x="1.7993%" y="85" width="1.6397%" height="23" fill="rgb(255,230,230)" fg:x="3371" fg:w="3072"/><text x="2.0493%" y="99.50"></text></g><g><title>acir::blackbox::range (4,034 gates, 2.15%)</title><rect x="3.4390%" y="61" width="2.1532%" height="23" fill="rgb(255,228,228)" fg:x="6443" fg:w="4034"/><text x="3.6890%" y="75.50">a..</text></g><g><title>regex.nr:816:34::__regex_match(input) (4,036 gates, 2.15%)</title><rect x="3.4390%" y="85" width="2.1542%" height="23" fill="rgb(255,228,228)" fg:x="6443" fg:w="4036"/><text x="3.6890%" y="99.50">r..</text></g><g><title>acir::memory::init (2 gates, 0.00%)</title><rect x="5.5921%" y="61" width="0.0011%" height="23" fill="rgb(255,249,249)" fg:x="10477" fg:w="2"/><text x="5.8421%" y="75.50"></text></g><g><title>acir::arithmetic (1,067 gates, 0.57%)</title><rect x="5.5932%" y="61" width="0.5695%" height="23" fill="rgb(255,238,238)" fg:x="10479" fg:w="1067"/><text x="5.8432%" y="75.50"></text></g><g><title>acir::memory::init (18 gates, 0.01%)</title><rect x="6.1627%" y="61" width="0.0096%" height="23" fill="rgb(255,248,248)" fg:x="11546" fg:w="18"/><text x="6.4127%" y="75.50"></text></g><g><title>regex.nr:827:18::table[s * 256 + temp] (19,517 gates, 10.42%)</title><rect x="5.5932%" y="85" width="10.4173%" height="23" fill="rgb(255,201,201)" fg:x="10479" fg:w="19517"/><text x="5.8432%" y="99.50">regex.nr:827:18..</text></g><g><title>acir::memory::op (18,432 gates, 9.84%)</title><rect x="6.1723%" y="61" width="9.8382%" height="23" fill="rgb(255,202,202)" fg:x="11564" fg:w="18432"/><text x="6.4223%" y="75.50">acir::memory::..</text></g><g><title>regex.nr:828:32::table[temp] (18,414 gates, 9.83%)</title><rect x="16.0105%" y="85" width="9.8286%" height="23" fill="rgb(255,202,202)" fg:x="29996" fg:w="18414"/><text x="16.2605%" y="99.50">regex.nr:828:3..</text></g><g><title>acir::memory::op (18,414 gates, 9.83%)</title><rect x="16.0105%" y="61" width="9.8286%" height="23" fill="rgb(255,202,202)" fg:x="29996" fg:w="18414"/><text x="16.2605%" y="75.50">acir::memory::..</text></g><g><title>regex.nr:829:12::s_next == 0 (2,048 gates, 1.09%)</title><rect x="25.8391%" y="85" width="1.0931%" height="23" fill="rgb(255,234,234)" fg:x="48410" fg:w="2048"/><text x="26.0891%" y="99.50"></text></g><g><title>acir::arithmetic (2,048 gates, 1.09%)</title><rect x="25.8391%" y="61" width="1.0931%" height="23" fill="rgb(255,234,234)" fg:x="48410" fg:w="2048"/><text x="26.0891%" y="75.50"></text></g><g><title>regex.nr:837:22::[
            (s == 16) &amp; ((s_next == 17) | (s_next == 18)),
            (s_next == 19) &amp; ((s == 17) | (s == 18)),
            (s == 19) &amp; ((s_next == 17) | (s_next == 18)),
        ]
            .any (4,092 gates, 2.18%)</title><rect x="26.9322%" y="85" width="2.1841%" height="23" fill="rgb(255,227,227)" fg:x="50458" fg:w="4092"/><text x="27.1822%" y="99.50">r..</text></g><g><title>mod.nr:135:13::ret |= predicate(elem) (4,092 gates, 2.18%)</title><rect x="26.9322%" y="61" width="2.1841%" height="23" fill="rgb(255,227,227)" fg:x="50458" fg:w="4092"/><text x="27.1822%" y="75.50">m..</text></g><g><title>acir::arithmetic (4,092 gates, 2.18%)</title><rect x="26.9322%" y="37" width="2.1841%" height="23" fill="rgb(255,227,227)" fg:x="50458" fg:w="4092"/><text x="27.1822%" y="51.50">a..</text></g><g><title>regex.nr:838:13::(s == 16) &amp; ((s_next == 17) | (s_next == 18)) (1,023 gates, 0.55%)</title><rect x="29.1163%" y="85" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="54550" fg:w="1023"/><text x="29.3663%" y="99.50"></text></g><g><title>acir::arithmetic (1,023 gates, 0.55%)</title><rect x="29.1163%" y="61" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="54550" fg:w="1023"/><text x="29.3663%" y="75.50"></text></g><g><title>regex.nr:838:14::s == 16 (3,069 gates, 1.64%)</title><rect x="29.6623%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="55573" fg:w="3069"/><text x="29.9123%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="29.6623%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="55573" fg:w="3069"/><text x="29.9123%" y="75.50"></text></g><g><title>regex.nr:838:27::s_next == 17 (3,069 gates, 1.64%)</title><rect x="31.3004%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="58642" fg:w="3069"/><text x="31.5504%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="31.3004%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="58642" fg:w="3069"/><text x="31.5504%" y="75.50"></text></g><g><title>regex.nr:838:44::s_next == 18 (3,069 gates, 1.64%)</title><rect x="32.9385%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="61711" fg:w="3069"/><text x="33.1885%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="32.9385%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="61711" fg:w="3069"/><text x="33.1885%" y="75.50"></text></g><g><title>regex.nr:839:13::(s_next == 19) &amp; ((s == 17) | (s == 18)) (1,023 gates, 0.55%)</title><rect x="34.5766%" y="85" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="64780" fg:w="1023"/><text x="34.8266%" y="99.50"></text></g><g><title>acir::arithmetic (1,023 gates, 0.55%)</title><rect x="34.5766%" y="61" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="64780" fg:w="1023"/><text x="34.8266%" y="75.50"></text></g><g><title>regex.nr:839:14::s_next == 19 (3,069 gates, 1.64%)</title><rect x="35.1227%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="65803" fg:w="3069"/><text x="35.3727%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="35.1227%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="65803" fg:w="3069"/><text x="35.3727%" y="75.50"></text></g><g><title>regex.nr:839:32::s == 17 (3,069 gates, 1.64%)</title><rect x="36.7607%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="68872" fg:w="3069"/><text x="37.0107%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="36.7607%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="68872" fg:w="3069"/><text x="37.0107%" y="75.50"></text></g><g><title>regex.nr:839:44::s == 18 (3,069 gates, 1.64%)</title><rect x="38.3988%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="71941" fg:w="3069"/><text x="38.6488%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="38.3988%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="71941" fg:w="3069"/><text x="38.6488%" y="75.50"></text></g><g><title>regex.nr:840:14::s == 19 (3,069 gates, 1.64%)</title><rect x="40.0369%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="75010" fg:w="3069"/><text x="40.2869%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="40.0369%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="75010" fg:w="3069"/><text x="40.2869%" y="75.50"></text></g><g><title>regex.nr:851:22::[
            (s_next == 27) &amp; ((s == 26) | (s == 29)),
            (s_next == 28) &amp; ((s == 26) | (s == 29)),
            (s_next == 29) &amp; ((s == 27) | (s == 28)),
        ]
            .any (4,092 gates, 2.18%)</title><rect x="41.6750%" y="85" width="2.1841%" height="23" fill="rgb(255,227,227)" fg:x="78079" fg:w="4092"/><text x="41.9250%" y="99.50">r..</text></g><g><title>mod.nr:135:13::ret |= predicate(elem) (4,092 gates, 2.18%)</title><rect x="41.6750%" y="61" width="2.1841%" height="23" fill="rgb(255,227,227)" fg:x="78079" fg:w="4092"/><text x="41.9250%" y="75.50">m..</text></g><g><title>acir::arithmetic (4,092 gates, 2.18%)</title><rect x="41.6750%" y="37" width="2.1841%" height="23" fill="rgb(255,227,227)" fg:x="78079" fg:w="4092"/><text x="41.9250%" y="51.50">a..</text></g><g><title>regex.nr:852:13::(s_next == 27) &amp; ((s == 26) | (s == 29)) (1,023 gates, 0.55%)</title><rect x="43.8592%" y="85" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="82171" fg:w="1023"/><text x="44.1092%" y="99.50"></text></g><g><title>acir::arithmetic (1,023 gates, 0.55%)</title><rect x="43.8592%" y="61" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="82171" fg:w="1023"/><text x="44.1092%" y="75.50"></text></g><g><title>regex.nr:852:14::s_next == 27 (3,069 gates, 1.64%)</title><rect x="44.4052%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="83194" fg:w="3069"/><text x="44.6552%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="44.4052%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="83194" fg:w="3069"/><text x="44.6552%" y="75.50"></text></g><g><title>regex.nr:852:32::s == 26 (3,069 gates, 1.64%)</title><rect x="46.0433%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="86263" fg:w="3069"/><text x="46.2933%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="46.0433%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="86263" fg:w="3069"/><text x="46.2933%" y="75.50"></text></g><g><title>regex.nr:852:44::s == 29 (3,069 gates, 1.64%)</title><rect x="47.6814%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="89332" fg:w="3069"/><text x="47.9314%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="47.6814%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="89332" fg:w="3069"/><text x="47.9314%" y="75.50"></text></g><g><title>regex.nr:853:14::s_next == 28 (3,069 gates, 1.64%)</title><rect x="49.3195%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="92401" fg:w="3069"/><text x="49.5695%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="49.3195%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="92401" fg:w="3069"/><text x="49.5695%" y="75.50"></text></g><g><title>regex.nr:854:13::(s_next == 29) &amp; ((s == 27) | (s == 28)) (1,023 gates, 0.55%)</title><rect x="50.9576%" y="85" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="95470" fg:w="1023"/><text x="51.2076%" y="99.50"></text></g><g><title>acir::arithmetic (1,023 gates, 0.55%)</title><rect x="50.9576%" y="61" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="95470" fg:w="1023"/><text x="51.2076%" y="75.50"></text></g><g><title>regex.nr:854:14::s_next == 29 (3,069 gates, 1.64%)</title><rect x="51.5036%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="96493" fg:w="3069"/><text x="51.7536%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="51.5036%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="96493" fg:w="3069"/><text x="51.7536%" y="75.50"></text></g><g><title>regex.nr:854:32::s == 27 (3,069 gates, 1.64%)</title><rect x="53.1417%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="99562" fg:w="3069"/><text x="53.3917%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="53.1417%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="99562" fg:w="3069"/><text x="53.3917%" y="75.50"></text></g><g><title>regex.nr:854:44::s == 28 (3,069 gates, 1.64%)</title><rect x="54.7798%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="102631" fg:w="3069"/><text x="55.0298%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="54.7798%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="102631" fg:w="3069"/><text x="55.0298%" y="75.50"></text></g><g><title>regex.nr:860:22::[
            (s_next == 40) &amp; ((s == 41) | (s == 39)),
            (s == 40) &amp; (s_next == 41),
        ].any (2,046 gates, 1.09%)</title><rect x="56.4179%" y="85" width="1.0921%" height="23" fill="rgb(255,234,234)" fg:x="105700" fg:w="2046"/><text x="56.6679%" y="99.50"></text></g><g><title>mod.nr:135:13::ret |= predicate(elem) (2,046 gates, 1.09%)</title><rect x="56.4179%" y="61" width="1.0921%" height="23" fill="rgb(255,234,234)" fg:x="105700" fg:w="2046"/><text x="56.6679%" y="75.50"></text></g><g><title>acir::arithmetic (2,046 gates, 1.09%)</title><rect x="56.4179%" y="37" width="1.0921%" height="23" fill="rgb(255,234,234)" fg:x="105700" fg:w="2046"/><text x="56.6679%" y="51.50"></text></g><g><title>regex.nr:861:13::(s_next == 40) &amp; ((s == 41) | (s == 39)) (1,023 gates, 0.55%)</title><rect x="57.5099%" y="85" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="107746" fg:w="1023"/><text x="57.7599%" y="99.50"></text></g><g><title>acir::arithmetic (1,023 gates, 0.55%)</title><rect x="57.5099%" y="61" width="0.5460%" height="23" fill="rgb(255,238,238)" fg:x="107746" fg:w="1023"/><text x="57.7599%" y="75.50"></text></g><g><title>regex.nr:861:14::s_next == 40 (3,069 gates, 1.64%)</title><rect x="58.0560%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="108769" fg:w="3069"/><text x="58.3060%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="58.0560%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="108769" fg:w="3069"/><text x="58.3060%" y="75.50"></text></g><g><title>regex.nr:861:32::s == 41 (3,069 gates, 1.64%)</title><rect x="59.6941%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="111838" fg:w="3069"/><text x="59.9441%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="59.6941%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="111838" fg:w="3069"/><text x="59.9441%" y="75.50"></text></g><g><title>regex.nr:861:44::s == 39 (3,069 gates, 1.64%)</title><rect x="61.3321%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="114907" fg:w="3069"/><text x="61.5821%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="61.3321%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="114907" fg:w="3069"/><text x="61.5821%" y="75.50"></text></g><g><title>regex.nr:862:14::s == 40 (3,069 gates, 1.64%)</title><rect x="62.9702%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="117976" fg:w="3069"/><text x="63.2202%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="62.9702%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="117976" fg:w="3069"/><text x="63.2202%" y="75.50"></text></g><g><title>regex.nr:862:26::s_next == 41 (3,069 gates, 1.64%)</title><rect x="64.6083%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="121045" fg:w="3069"/><text x="64.8583%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="64.6083%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="121045" fg:w="3069"/><text x="64.8583%" y="75.50"></text></g><g><title>regex.nr:871:16::substring_range_check (3,069 gates, 1.64%)</title><rect x="66.2464%" y="85" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="124114" fg:w="3069"/><text x="66.4964%" y="99.50"></text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="66.2464%" y="61" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="124114" fg:w="3069"/><text x="66.4964%" y="75.50"></text></g><g><title>regex.nr:876:12::(s == 41) | (s == 42) (1 gates, 0.00%)</title><rect x="67.8845%" y="85" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="127183" fg:w="1"/><text x="68.1345%" y="99.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="67.8845%" y="61" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="127183" fg:w="1"/><text x="68.1345%" y="75.50"></text></g><g><title>regex.nr:876:25::s == 42 (3 gates, 0.00%)</title><rect x="67.8851%" y="85" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="127184" fg:w="3"/><text x="68.1351%" y="99.50"></text></g><g><title>acir::arithmetic (3 gates, 0.00%)</title><rect x="67.8851%" y="61" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="127184" fg:w="3"/><text x="68.1351%" y="75.50"></text></g><g><title>regex.nr:1035:18::__extract_substring(substring_sequence, input) (3,846 gates, 2.05%)</title><rect x="67.8867%" y="61" width="2.0528%" height="23" fill="rgb(255,228,228)" fg:x="127187" fg:w="3846"/><text x="68.1367%" y="75.50">r..</text></g><g><title>acir::blackbox::range (3,846 gates, 2.05%)</title><rect x="67.8867%" y="37" width="2.0528%" height="23" fill="rgb(255,228,228)" fg:x="127187" fg:w="3846"/><text x="68.1367%" y="51.50">a..</text></g><g><title>regex.nr:1036:12::substring_sequence.length == substring.len() (3 gates, 0.00%)</title><rect x="69.9395%" y="61" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="131033" fg:w="3"/><text x="70.1895%" y="75.50"></text></g><g><title>acir::arithmetic (3 gates, 0.00%)</title><rect x="69.9395%" y="37" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="131033" fg:w="3"/><text x="70.1895%" y="51.50"></text></g><g><title>acir::arithmetic (3,072 gates, 1.64%)</title><rect x="69.9411%" y="37" width="1.6397%" height="23" fill="rgb(255,230,230)" fg:x="131036" fg:w="3072"/><text x="70.1911%" y="51.50"></text></g><g><title>regex.nr:1042:33::substring_sequence.index + i &lt; INPUT_LENGTH (11,520 gates, 6.15%)</title><rect x="69.9411%" y="61" width="6.1489%" height="23" fill="rgb(255,212,212)" fg:x="131036" fg:w="11520"/><text x="70.1911%" y="75.50">regex.nr..</text></g><g><title>acir::blackbox::range (8,448 gates, 4.51%)</title><rect x="71.5808%" y="37" width="4.5092%" height="23" fill="rgb(255,218,218)" fg:x="134108" fg:w="8448"/><text x="71.8308%" y="51.50">acir:..</text></g><g><title>acir::arithmetic (3,069 gates, 1.64%)</title><rect x="76.0899%" y="37" width="1.6381%" height="23" fill="rgb(255,230,230)" fg:x="142556" fg:w="3069"/><text x="76.3399%" y="51.50"></text></g><g><title>regex.nr:1042:33::substring_sequence.index + i (8,439 gates, 4.50%)</title><rect x="76.0899%" y="61" width="4.5044%" height="23" fill="rgb(255,218,218)" fg:x="142556" fg:w="8439"/><text x="76.3399%" y="75.50">regex..</text></g><g><title>acir::blackbox::range (5,370 gates, 2.87%)</title><rect x="77.7280%" y="37" width="2.8663%" height="23" fill="rgb(255,224,224)" fg:x="145625" fg:w="5370"/><text x="77.9780%" y="51.50">ac..</text></g><g><title>acir::arithmetic (3,072 gates, 1.64%)</title><rect x="80.5943%" y="37" width="1.6397%" height="23" fill="rgb(255,230,230)" fg:x="150995" fg:w="3072"/><text x="80.8443%" y="51.50"></text></g><g><title>regex.nr:1046:36::i &gt;= substring_sequence.length (11,520 gates, 6.15%)</title><rect x="80.5943%" y="61" width="6.1489%" height="23" fill="rgb(255,212,212)" fg:x="150995" fg:w="11520"/><text x="80.8443%" y="75.50">regex.nr..</text></g><g><title>acir::blackbox::range (8,448 gates, 4.51%)</title><rect x="82.2340%" y="37" width="4.5092%" height="23" fill="rgb(255,218,218)" fg:x="154067" fg:w="8448"/><text x="82.4840%" y="51.50">acir:..</text></g><g><title>acir::arithmetic (3,072 gates, 1.64%)</title><rect x="86.7431%" y="37" width="1.6397%" height="23" fill="rgb(255,230,230)" fg:x="162515" fg:w="3072"/><text x="86.9931%" y="51.50"></text></g><g><title>regex.nr:1049:29::input[index] (9,216 gates, 4.92%)</title><rect x="86.7431%" y="61" width="4.9191%" height="23" fill="rgb(255,216,216)" fg:x="162515" fg:w="9216"/><text x="86.9931%" y="75.50">regex...</text></g><g><title>acir::memory::op (6,144 gates, 3.28%)</title><rect x="88.3828%" y="37" width="3.2794%" height="23" fill="rgb(255,222,222)" fg:x="165587" fg:w="6144"/><text x="88.6328%" y="51.50">aci..</text></g><g><title>regex.nr:1051:24::expected_byte as Field == byte as Field (9,216 gates, 4.92%)</title><rect x="91.6622%" y="61" width="4.9191%" height="23" fill="rgb(255,216,216)" fg:x="171731" fg:w="9216"/><text x="91.9122%" y="75.50">regex...</text></g><g><title>acir::arithmetic (9,216 gates, 4.92%)</title><rect x="91.6622%" y="37" width="4.9191%" height="23" fill="rgb(255,216,216)" fg:x="171731" fg:w="9216"/><text x="91.9122%" y="51.50">acir::..</text></g><g><title>regex.nr:882:39::extract_substring(substring, pattern_match.masked) (56,832 gates, 30.33%)</title><rect x="67.8867%" y="85" width="30.3343%" height="23" fill="rgb(255,167,167)" fg:x="127187" fg:w="56832"/><text x="68.1367%" y="99.50">regex.nr:882:39::extract_substring(substring, pat..</text></g><g><title>regex.nr:1052:16::matched | sequence_range_check (3,072 gates, 1.64%)</title><rect x="96.5813%" y="61" width="1.6397%" height="23" fill="rgb(255,230,230)" fg:x="180947" fg:w="3072"/><text x="96.8313%" y="75.50"></text></g><g><title>acir::arithmetic (3,072 gates, 1.64%)</title><rect x="96.5813%" y="37" width="1.6397%" height="23" fill="rgb(255,230,230)" fg:x="180947" fg:w="3072"/><text x="96.8313%" y="51.50"></text></g><g><title>acir::arithmetic (1 gates, 0.00%)</title><rect x="98.2210%" y="61" width="0.0005%" height="23" fill="rgb(255,249,249)" fg:x="184019" fg:w="1"/><text x="98.4710%" y="75.50"></text></g><g><title>regex.nr:884:12::i &lt; pattern_match.substrings.len() (4 gates, 0.00%)</title><rect x="98.2210%" y="85" width="0.0021%" height="23" fill="rgb(255,249,249)" fg:x="184019" fg:w="4"/><text x="98.4710%" y="99.50"></text></g><g><title>acir::blackbox::range (3 gates, 0.00%)</title><rect x="98.2215%" y="61" width="0.0016%" height="23" fill="rgb(255,249,249)" fg:x="184020" fg:w="3"/><text x="98.4715%" y="75.50"></text></g><g><title>acir::arithmetic (2,049 gates, 1.09%)</title><rect x="98.2231%" y="61" width="1.0937%" height="23" fill="rgb(255,234,234)" fg:x="184023" fg:w="2049"/><text x="98.4731%" y="75.50"></text></g><g><title>all (187,352 gates, 100%)</title><rect x="0.0000%" y="133" width="100.0000%" height="23" fill="rgb(255,100,100)" fg:x="0" fg:w="187352"/><text x="0.2500%" y="147.50"></text></g><g><title>main.nr:6:13::regex::regex_match(input) (180,909 gates, 96.56%)</title><rect x="3.4390%" y="109" width="96.5610%" height="23" fill="rgb(255,102,102)" fg:x="6443" fg:w="180909"/><text x="3.6890%" y="123.50">main.nr:6:13::regex::regex_match(input)</text></g><g><title>regex.nr:885:35::BoundedVec::new() (3,329 gates, 1.78%)</title><rect x="98.2231%" y="85" width="1.7769%" height="23" fill="rgb(255,230,230)" fg:x="184023" fg:w="3329"/><text x="98.4731%" y="99.50">r..</text></g><g><title>acir::blackbox::range (1,280 gates, 0.68%)</title><rect x="99.3168%" y="61" width="0.6832%" height="23" fill="rgb(255,237,237)" fg:x="186072" fg:w="1280"/><text x="99.5668%" y="75.50"></text></g></svg></svg>