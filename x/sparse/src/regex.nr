
use crate::regex_common::Sequence;


global table: sparse_array::SparseArray<806, Field> = sparse_array::SparseArray {
    keys: [0x00000000, 0x0000004c, 0x00000161, 0x00000274, 0x00000369, 0x0000046e, 0x0000052d, 0x00000645, 0x00000778, 0x00000874, 0x00000965, 0x00000a6e, 0x00000b73, 0x00000c69, 0x00000d6f, 0x00000e6e, 0x00000f3d, 0x000010c2, 0x000010c3, 0x000010c4, 0x000010c5, 0x000010c6, 0x000011a1, 0x000011a2, 0x000011a3, 0x000011a4, 0x000011a5, 0x000011a6, 0x000011a7, 0x000011a8, 0x000011a9, 0x000011aa, 0x000011ab, 0x000011ac, 0x000011ad, 0x000011ae, 0x000011af, 0x000011b0, 0x000011b1, 0x000011b2, 0x000011b3, 0x000011b4, 0x000011b5, 0x000011b6, 0x000011b7, 0x000011b8, 0x000011b9, 0x000011ba, 0x000011bb, 0x000011bc, 0x000011bd, 0x000011be, 0x000011bf, 0x00001280, 0x00001281, 0x00001282, 0x00001283, 0x00001284, 0x00001285, 0x00001286, 0x00001287, 0x00001288, 0x00001289, 0x0000128a, 0x0000128b, 0x0000128c, 0x0000128d, 0x0000128e, 0x0000128f, 0x00001290, 0x00001291, 0x00001292, 0x00001293, 0x00001294, 0x00001295, 0x00001296, 0x00001297, 0x00001298, 0x00001299, 0x0000129a, 0x0000129b, 0x0000129c, 0x0000129d, 0x0000129e, 0x0000129f, 0x000012a0, 0x000012a1, 0x000012a2, 0x000012a3, 0x000012a4, 0x000012a5, 0x000012a6, 0x000012a7, 0x000012a8, 0x000012a9, 0x000012aa, 0x000012ab, 0x000012ac, 0x000012ad, 0x000012ae, 0x000012af, 0x000012b0, 0x000012b1, 0x000012b2, 0x000012b3, 0x000012b4, 0x000012b5, 0x000012b6, 0x000012b7, 0x000012b8, 0x000012b9, 0x000012ba, 0x000012bb, 0x000012bc, 0x000012bd, 0x000012be, 0x000012bf, 0x00001320, 0x000013c2, 0x000013c3, 0x000013c4, 0x000013c5, 0x000013c6, 0x00001447, 0x00001572, 0x00001665, 0x00001765, 0x0000186b, 0x0000193d, 0x00001acd, 0x00001ace, 0x00001acf, 0x00001bb0, 0x00001bb1, 0x00001bb2, 0x00001bb3, 0x00001bb4, 0x00001bb5, 0x00001bb6, 0x00001bb7, 0x00001bb8, 0x00001bb9, 0x00001bba, 0x00001bbb, 0x00001bbc, 0x00001bbd, 0x00001bbe, 0x00001bbf, 0x00001c80, 0x00001c81, 0x00001c82, 0x00001c83, 0x00001c84, 0x00001c85, 0x00001c86, 0x00001c87, 0x00001c88, 0x00001c89, 0x00001c8a, 0x00001c8b, 0x00001c8c, 0x00001c8d, 0x00001c8e, 0x00001c8f, 0x00001c90, 0x00001c91, 0x00001c92, 0x00001c93, 0x00001c94, 0x00001c95, 0x00001c96, 0x00001c97, 0x00001c98, 0x00001c99, 0x00001c9a, 0x00001c9b, 0x00001c9c, 0x00001c9d, 0x00001c9e, 0x00001c9f, 0x00001ca0, 0x00001ca1, 0x00001ca2, 0x00001ca3, 0x00001ca4, 0x00001ca5, 0x00001ca6, 0x00001ca7, 0x00001ca8, 0x00001ca9, 0x00001caa, 0x00001cab, 0x00001cac, 0x00001cad, 0x00001cae, 0x00001caf, 0x00001cb0, 0x00001cb1, 0x00001cb2, 0x00001cb3, 0x00001cb4, 0x00001cb5, 0x00001cb6, 0x00001cb7, 0x00001cb8, 0x00001cb9, 0x00001cba, 0x00001cbb, 0x00001cbc, 0x00001cbd, 0x00001cbe, 0x00001cbf, 0x00001d20, 0x00001dcd, 0x00001dce, 0x00001dcf, 0x00001e43, 0x00001f79, 0x00002072, 0x00002169, 0x0000226c, 0x0000236c, 0x00002469, 0x00002563, 0x0000263d, 0x000027d0, 0x000027d1, 0x000027d2, 0x000027d3, 0x00002880, 0x00002881, 0x00002882, 0x00002883, 0x00002884, 0x00002885, 0x00002886, 0x00002887, 0x00002888, 0x00002889, 0x0000288a, 0x0000288b, 0x0000288c, 0x0000288d, 0x0000288e, 0x0000288f, 0x00002890, 0x00002891, 0x00002892, 0x00002893, 0x00002894, 0x00002895, 0x00002896, 0x00002897, 0x00002898, 0x00002899, 0x0000289a, 0x0000289b, 0x0000289c, 0x0000289d, 0x0000289e, 0x0000289f, 0x000028a0, 0x000028a1, 0x000028a2, 0x000028a3, 0x000028a4, 0x000028a5, 0x000028a6, 0x000028a7, 0x000028a8, 0x000028a9, 0x000028aa, 0x000028ab, 0x000028ac, 0x000028ad, 0x000028ae, 0x000028af, 0x000028b0, 0x000028b1, 0x000028b2, 0x000028b3, 0x000028b4, 0x000028b5, 0x000028b6, 0x000028b7, 0x000028b8, 0x000028b9, 0x000028ba, 0x000028bb, 0x000028bc, 0x000028bd, 0x000028be, 0x000028bf, 0x00002900, 0x00002901, 0x00002902, 0x00002903, 0x00002904, 0x00002905, 0x00002906, 0x00002907, 0x00002908, 0x00002909, 0x0000290a, 0x0000290b, 0x0000290c, 0x0000290d, 0x0000290e, 0x0000290f, 0x00002910, 0x00002911, 0x00002912, 0x00002913, 0x00002914, 0x00002915, 0x00002916, 0x00002917, 0x00002918, 0x00002919, 0x0000291a, 0x0000291b, 0x0000291c, 0x0000291d, 0x0000291e, 0x0000291f, 0x00002920, 0x00002921, 0x00002922, 0x00002923, 0x00002924, 0x00002925, 0x00002926, 0x00002927, 0x00002928, 0x00002929, 0x0000292a, 0x0000292b, 0x0000292c, 0x0000292d, 0x0000292e, 0x0000292f, 0x00002930, 0x00002931, 0x00002932, 0x00002933, 0x00002934, 0x00002935, 0x00002936, 0x00002937, 0x00002938, 0x00002939, 0x0000293a, 0x0000293b, 0x0000293c, 0x0000293d, 0x0000293e, 0x0000293f, 0x00002940, 0x00002941, 0x00002942, 0x00002943, 0x00002944, 0x00002945, 0x00002946, 0x00002947, 0x00002948, 0x00002949, 0x0000294a, 0x0000294b, 0x0000294c, 0x0000294d, 0x0000294e, 0x0000294f, 0x00002950, 0x00002951, 0x00002952, 0x00002953, 0x00002954, 0x00002955, 0x00002956, 0x00002957, 0x00002958, 0x00002959, 0x0000295a, 0x0000295b, 0x0000295c, 0x0000295d, 0x0000295e, 0x0000295f, 0x00002960, 0x00002961, 0x00002962, 0x00002963, 0x00002964, 0x00002965, 0x00002966, 0x00002967, 0x00002968, 0x00002969, 0x0000296a, 0x0000296b, 0x0000296c, 0x0000296d, 0x0000296e, 0x0000296f, 0x00002970, 0x00002971, 0x00002972, 0x00002973, 0x00002974, 0x00002975, 0x00002976, 0x00002977, 0x00002978, 0x00002979, 0x0000297a, 0x0000297b, 0x0000297c, 0x0000297d, 0x0000297e, 0x0000297f, 0x00002980, 0x00002981, 0x00002982, 0x00002983, 0x00002984, 0x00002985, 0x00002986, 0x00002987, 0x00002988, 0x00002989, 0x0000298a, 0x0000298b, 0x0000298c, 0x0000298d, 0x0000298e, 0x0000298f, 0x00002990, 0x00002991, 0x00002992, 0x00002993, 0x00002994, 0x00002995, 0x00002996, 0x00002997, 0x00002998, 0x00002999, 0x0000299a, 0x0000299b, 0x0000299c, 0x0000299d, 0x0000299e, 0x0000299f, 0x000029a0, 0x000029a1, 0x000029a2, 0x000029a3, 0x000029a4, 0x000029a5, 0x000029a6, 0x000029a7, 0x000029a8, 0x000029a9, 0x000029aa, 0x000029ab, 0x000029ac, 0x000029ad, 0x000029ae, 0x000029af, 0x000029b0, 0x000029b1, 0x000029b2, 0x000029b3, 0x000029b4, 0x000029b5, 0x000029b6, 0x000029b7, 0x000029b8, 0x000029b9, 0x000029ba, 0x000029bb, 0x000029bc, 0x000029bd, 0x000029be, 0x000029bf, 0x000029c0, 0x000029c1, 0x000029c2, 0x000029c3, 0x000029c4, 0x000029c5, 0x000029c6, 0x000029c7, 0x000029c8, 0x000029c9, 0x000029ca, 0x000029cb, 0x000029cc, 0x000029cd, 0x000029ce, 0x000029cf, 0x000029d0, 0x000029d0, 0x000029d1, 0x000029d1, 0x000029d2, 0x000029d2, 0x000029d3, 0x000029d3, 0x000029d4, 0x000029d5, 0x000029d6, 0x000029d7, 0x000029d8, 0x000029d9, 0x000029da, 0x000029db, 0x000029dc, 0x000029dd, 0x000029de, 0x000029df, 0x000029e0, 0x000029e1, 0x000029e2, 0x000029e3, 0x000029e4, 0x000029e5, 0x000029e6, 0x000029e7, 0x000029e8, 0x000029e9, 0x000029ea, 0x000029eb, 0x000029ec, 0x000029ed, 0x000029ee, 0x000029ef, 0x000029f0, 0x000029f1, 0x000029f2, 0x000029f3, 0x000029f4, 0x000029f5, 0x000029f6, 0x000029f7, 0x000029f8, 0x000029f9, 0x000029fa, 0x000029fb, 0x000029fc, 0x000029fd, 0x000029fe, 0x00002a00, 0x00002a01, 0x00002a02, 0x00002a03, 0x00002a04, 0x00002a05, 0x00002a06, 0x00002a07, 0x00002a08, 0x00002a09, 0x00002a0a, 0x00002a0b, 0x00002a0c, 0x00002a0d, 0x00002a0e, 0x00002a0f, 0x00002a10, 0x00002a11, 0x00002a12, 0x00002a13, 0x00002a14, 0x00002a15, 0x00002a16, 0x00002a17, 0x00002a18, 0x00002a19, 0x00002a1a, 0x00002a1b, 0x00002a1c, 0x00002a1d, 0x00002a1e, 0x00002a1f, 0x00002a20, 0x00002a21, 0x00002a22, 0x00002a23, 0x00002a24, 0x00002a25, 0x00002a26, 0x00002a27, 0x00002a28, 0x00002a29, 0x00002a2a, 0x00002a2b, 0x00002a2c, 0x00002a2d, 0x00002a2e, 0x00002a2f, 0x00002a30, 0x00002a31, 0x00002a32, 0x00002a33, 0x00002a34, 0x00002a35, 0x00002a36, 0x00002a37, 0x00002a38, 0x00002a39, 0x00002a3a, 0x00002a3b, 0x00002a3c, 0x00002a3d, 0x00002a3e, 0x00002a3f, 0x00002a40, 0x00002a41, 0x00002a42, 0x00002a43, 0x00002a44, 0x00002a45, 0x00002a46, 0x00002a47, 0x00002a48, 0x00002a49, 0x00002a4a, 0x00002a4b, 0x00002a4c, 0x00002a4d, 0x00002a4e, 0x00002a4f, 0x00002a50, 0x00002a51, 0x00002a52, 0x00002a53, 0x00002a54, 0x00002a55, 0x00002a56, 0x00002a57, 0x00002a58, 0x00002a59, 0x00002a5a, 0x00002a5b, 0x00002a5c, 0x00002a5d, 0x00002a5e, 0x00002a5f, 0x00002a60, 0x00002a61, 0x00002a62, 0x00002a63, 0x00002a64, 0x00002a65, 0x00002a66, 0x00002a67, 0x00002a68, 0x00002a69, 0x00002a6a, 0x00002a6b, 0x00002a6c, 0x00002a6d, 0x00002a6e, 0x00002a6f, 0x00002a70, 0x00002a71, 0x00002a72, 0x00002a73, 0x00002a74, 0x00002a75, 0x00002a76, 0x00002a77, 0x00002a78, 0x00002a79, 0x00002a7a, 0x00002a7b, 0x00002a7c, 0x00002a7d, 0x00002a7e, 0x00002a7f, 0x00002a80, 0x00002a81, 0x00002a82, 0x00002a83, 0x00002a84, 0x00002a85, 0x00002a86, 0x00002a87, 0x00002a88, 0x00002a89, 0x00002a8a, 0x00002a8b, 0x00002a8c, 0x00002a8d, 0x00002a8e, 0x00002a8f, 0x00002a90, 0x00002a91, 0x00002a92, 0x00002a93, 0x00002a94, 0x00002a95, 0x00002a96, 0x00002a97, 0x00002a98, 0x00002a99, 0x00002a9a, 0x00002a9b, 0x00002a9c, 0x00002a9d, 0x00002a9e, 0x00002a9f, 0x00002aa0, 0x00002aa1, 0x00002aa2, 0x00002aa3, 0x00002aa4, 0x00002aa5, 0x00002aa6, 0x00002aa7, 0x00002aa8, 0x00002aa9, 0x00002aaa, 0x00002aab, 0x00002aac, 0x00002aad, 0x00002aae, 0x00002aaf, 0x00002ab0, 0x00002ab1, 0x00002ab2, 0x00002ab3, 0x00002ab4, 0x00002ab5, 0x00002ab6, 0x00002ab7, 0x00002ab8, 0x00002ab9, 0x00002aba, 0x00002abb, 0x00002abc, 0x00002abd, 0x00002abe, 0x00002abf, 0x00002ac0, 0x00002ac1, 0x00002ac2, 0x00002ac3, 0x00002ac4, 0x00002ac5, 0x00002ac6, 0x00002ac7, 0x00002ac8, 0x00002ac9, 0x00002aca, 0x00002acb, 0x00002acc, 0x00002acd, 0x00002ace, 0x00002acf, 0x00002ad0, 0x00002ad1, 0x00002ad2, 0x00002ad3, 0x00002ad4, 0x00002ad5, 0x00002ad6, 0x00002ad7, 0x00002ad8, 0x00002ad9, 0x00002ada, 0x00002adb, 0x00002adc, 0x00002add, 0x00002ade, 0x00002adf, 0x00002ae0, 0x00002ae1, 0x00002ae2, 0x00002ae3, 0x00002ae4, 0x00002ae5, 0x00002ae6, 0x00002ae7, 0x00002ae8, 0x00002ae9, 0x00002aea, 0x00002aeb, 0x00002aec, 0x00002aed, 0x00002aee, 0x00002aef, 0x00002af0, 0x00002af1, 0x00002af2, 0x00002af3, 0x00002af4, 0x00002af5, 0x00002af6, 0x00002af7, 0x00002af8, 0x00002af9, 0x00002afa, 0x00002afb, 0x00002afc, 0x00002afd, 0x00002afe, 0x00002aff],
    values: [0x00000000, 0x00000000, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000013, 0x0000002a, 0x00000011, 0x0000002a, 0x00000012, 0x0000002a, 0x00000012, 0x0000002a, 0x00000012, 0x0000002a, 0x00000012, 0x0000002a, 0x00000014, 0x0000002a, 0x00000015, 0x0000002a, 0x00000016, 0x0000002a, 0x00000017, 0x0000002a, 0x00000018, 0x0000002a, 0x00000019, 0x0000002a, 0x0000001a, 0x0000002a, 0x0000001b, 0x0000002a, 0x0000001c, 0x0000002a, 0x0000001c, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001d, 0x0000002a, 0x0000001b, 0x0000002a, 0x0000001c, 0x0000002a, 0x0000001c, 0x0000002a, 0x0000001e, 0x0000002a, 0x0000001f, 0x0000002a, 0x00000020, 0x0000002a, 0x00000021, 0x0000002a, 0x00000022, 0x0000002a, 0x00000023, 0x0000002a, 0x00000024, 0x0000002a, 0x00000025, 0x0000002a, 0x00000026, 0x0000002a, 0x00000027, 0x0000002a, 0x00000028, 0x0000002a, 0x00000028, 0x0000002a, 0x00000028, 0x0000002a, 0x00000028, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x0000002a, 0x00000029, 0x00000001, 0x00000029, 0x00000002, 0x00000029, 0x00000003, 0x00000029, 0x00000004, 0x00000029, 0x00000005, 0x00000029, 0x00000006, 0x00000029, 0x00000007, 0x00000029, 0x00000008, 0x00000029, 0x00000009, 0x00000029, 0x0000000a, 0x00000029, 0x0000000b, 0x00000029, 0x0000000c, 0x00000029, 0x0000000d, 0x00000029, 0x0000000e, 0x00000029, 0x0000000f, 0x00000029, 0x00000010, 0x00000029, 0x00000011, 0x00000029, 0x00000012, 0x00000029, 0x00000012, 0x00000029, 0x00000012, 0x00000029, 0x00000012, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000029, 0x00000013, 0x00000028, 0x00000013, 0x00000028, 0x00000013, 0x00000028, 0x00000013, 0x00000028, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x0000002a, 0x00000000],
    maximum: 0x00002aff
};
    


pub fn regex_match<let N: u32>(input: [u8; N]) -> BoundedVec<Sequence, 3> {
    let substrings = unsafe { __regex_match(input) };
    
    // "Previous" state
    let mut s: Field = 0;
    s = table.get(255);
    // "Next"/upcoming state
    let mut s_next: Field = 0;
    let mut start_range = 0;
    let mut end_range = 0;

    // check the match
    for i in 0..N {
        // state transition
        let temp = input[i] as Field;
        s_next = table.get(s * 256 + temp);
        let potential_s_next = table.get(temp);
        if s_next == 0 {
            s = 0;
            s_next = potential_s_next;
        }
        std::as_witness(s_next);

        // range conditions for substring matches
        if ((start_range == 0) & (end_range == 0)) {
            start_range = i as Field;
        }
        if (((s == 41) & (s_next == 42)) & (end_range == 0)) {
            end_range = i as Field + 1;
        }
        

        let range_0 = substrings.get_unchecked(0).in_range(i);
        let case_0 = [
            (s == 16) & ((s_next == 17) | (s_next == 18)),
        	(s == 19) & ((s_next == 17) | (s_next == 18)),
        	(s_next == 19) & ((s == 17) | (s == 18))
        ].any(|case| case == true) | !range_0;

        let range_1 = substrings.get_unchecked(1).in_range(i);
        let case_1 = [
            (s == 26) & ((s_next == 27) | (s_next == 28)),
        	(s == 29) & ((s_next == 27) | (s_next == 28)),
        	(s_next == 29) & ((s == 27) | (s == 28))
        ].any(|case| case == true) | !range_1;

        let range_2 = substrings.get_unchecked(2).in_range(i);
        let case_2 = [
            (s_next == 40) & ((s == 39) | (s == 41)),
        	(s_next == 41) & ((s == 40))
        ].any(|case| case == true) | !range_2;



        let substring_range_check = [case_0, case_1, case_2]
            .all(|case| case == true);
    
        assert(substring_range_check, "substr array ranges wrong");
                
    
        s = s_next;
    }
    // check final state
    
    assert((s == 41) | (s == 42), "Match not found");
            
    // constrain extracted substrings to be in match range
    //let full_match = Sequence::new(start_range as u32, end_range as u32 - start_range as u32);
    //let full_match_end = full_match.end();
    // for i in 0..3 {
    //     let substring = substrings.get_unchecked(i);
    //     let is_not_valid = i >= substrings.len();
    //     let index_check = substring.index >= full_match.index;
    //     let length_check = substring.end() <= full_match_end;
    //     let check = (index_check) | is_not_valid;
    //     assert(check, f"Substring {i} range is out of bounds of the full match found");
    // }
    substrings
}
    

pub unconstrained fn __regex_match<let N: u32>(input: [u8; N]) ->  BoundedVec<Sequence, 3> {
    // regex: Latin-Extension=[\u{00a1}-\u{01bf}]+ Greek=[\u{0370}-\u{03ff}]+ Cyrillic=[\u{0400}-\u{04ff}]+
    let mut substrings: BoundedVec<Sequence, 3> = BoundedVec::new();
    let mut current_substring = Sequence::default();
    let mut full_match = Sequence::default();

    // "Previous" state
    let mut s: Field = 0;
    s = table.get(255);
    // "Next"/upcoming state
    let mut s_next: Field = 0;

    let mut consecutive_substr = 0;
    let mut complete = false;

    for i in 0..input.len() {
        let temp = input[i] as Field;
        let mut reset = false;
        s_next = table.get(s * 256 + temp);
        let potential_s_next = table.get(temp);
        if s_next == 0 {
            reset = true;
            s = 0;
            s_next = potential_s_next;
        }
        // If a substring was in the making, but the state was reset
        // we disregard previous progress because apparently it is invalid
        if (reset & (consecutive_substr == 1)) {
            current_substring = Sequence::default();
            consecutive_substr = 0;
        }
        // Fill up substrings


        if ((s == 16) & (s_next == 17) | (s == 16) & (s_next == 18) | (s == 17) & (s_next == 19) | (s == 18) & (s_next == 19) | (s == 19) & (s_next == 17) | (s == 19) & (s_next == 18)) {
    
            if (consecutive_substr == 0) {
                current_substring.index = i;
            };
            current_substring.length += 1;
            consecutive_substr = 1; 
        }

        else if ((s == 26) & (s_next == 27) | (s == 26) & (s_next == 28) | (s == 27) & (s_next == 29) | (s == 28) & (s_next == 29) | (s == 29) & (s_next == 27) | (s == 29) & (s_next == 28)) {
    
            if (consecutive_substr == 0) {
                current_substring.index = i;
            };
            current_substring.length += 1;
            consecutive_substr = 1; 
        }

        else if ((s == 39) & (s_next == 40) | (s == 40) & (s_next == 41) | (s == 41) & (s_next == 40)) {
    
            if (consecutive_substr == 0) {
                current_substring.index = i;
            };
            current_substring.length += 1;
            consecutive_substr = 1; 
        } else if ((consecutive_substr == 1) & (s_next == 0)) {
            current_substring = Sequence::default();
            full_match = Sequence::default();
            substrings = BoundedVec::new();
            consecutive_substr = 0;
        } else if (s == 41) & (s_next == 42) {
            full_match.length = i - full_match.index + 1;
            complete = true;
        } else if (consecutive_substr == 1) {
            // The substring is done so "save" it
            substrings.push(current_substring);
            // reset the substring holder for next use
            current_substring = Sequence::default();
            consecutive_substr = 0;
        }
        s = s_next;
        if complete == true {
            break;
        }
    }
    assert((s == 41) | (s == 42), f"no match: {s}");
    // Add pending substring that hasn't been added
    if consecutive_substr == 1 {
        substrings.push(current_substring);
        full_match.length = input.len() - full_match.index;
    }

    

    substrings
}
    
            
        
            