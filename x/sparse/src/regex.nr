global table: sparse_array::SparseArray<1501, Field> = sparse_array::SparseArray {
    keys: [0x00000000, 0x0000000d, 0x000000ff, 0x0000010a, 0x00000264, 0x0000036b, 0x00000469, 0x0000056d, 0x0000062d, 0x00000773, 0x00000869, 0x00000967, 0x00000a6e, 0x00000b61, 0x00000c74, 0x00000d75, 0x00000e72, 0x00000f65, 0x0000103a, 0x00001161, 0x00001162, 0x00001163, 0x00001164, 0x00001165, 0x00001166, 0x00001167, 0x00001168, 0x00001169, 0x0000116a, 0x0000116b, 0x0000116c, 0x0000116d, 0x0000116e, 0x0000116f, 0x00001170, 0x00001171, 0x00001172, 0x00001173, 0x00001174, 0x00001175, 0x00001176, 0x00001177, 0x00001178, 0x00001179, 0x0000117a, 0x0000123d, 0x00001261, 0x00001262, 0x00001263, 0x00001264, 0x00001265, 0x00001266, 0x00001267, 0x00001268, 0x00001269, 0x0000126a, 0x0000126b, 0x0000126c, 0x0000126d, 0x0000126e, 0x0000126f, 0x00001270, 0x00001271, 0x00001272, 0x00001273, 0x00001274, 0x00001275, 0x00001276, 0x00001277, 0x00001278, 0x00001279, 0x0000127a, 0x00001300, 0x00001301, 0x00001302, 0x00001303, 0x00001304, 0x00001305, 0x00001306, 0x00001307, 0x00001308, 0x00001309, 0x0000130a, 0x0000130b, 0x0000130c, 0x0000130d, 0x0000130e, 0x0000130f, 0x00001310, 0x00001311, 0x00001312, 0x00001313, 0x00001314, 0x00001315, 0x00001316, 0x00001317, 0x00001318, 0x00001319, 0x0000131a, 0x0000131b, 0x0000131c, 0x0000131d, 0x0000131e, 0x0000131f, 0x00001320, 0x00001321, 0x00001322, 0x00001323, 0x00001324, 0x00001325, 0x00001326, 0x00001327, 0x00001328, 0x00001329, 0x0000132a, 0x0000132b, 0x0000132c, 0x0000132d, 0x0000132e, 0x0000132f, 0x00001330, 0x00001331, 0x00001332, 0x00001333, 0x00001334, 0x00001335, 0x00001336, 0x00001337, 0x00001338, 0x00001339, 0x0000133a, 0x0000133c, 0x0000133d, 0x0000133e, 0x0000133f, 0x00001340, 0x00001341, 0x00001342, 0x00001343, 0x00001344, 0x00001345, 0x00001346, 0x00001347, 0x00001348, 0x00001349, 0x0000134a, 0x0000134b, 0x0000134c, 0x0000134d, 0x0000134e, 0x0000134f, 0x00001350, 0x00001351, 0x00001352, 0x00001353, 0x00001354, 0x00001355, 0x00001356, 0x00001357, 0x00001358, 0x00001359, 0x0000135a, 0x0000135b, 0x0000135c, 0x0000135d, 0x0000135e, 0x0000135f, 0x00001360, 0x00001361, 0x00001362, 0x00001363, 0x00001364, 0x00001365, 0x00001366, 0x00001367, 0x00001368, 0x00001369, 0x0000136a, 0x0000136b, 0x0000136c, 0x0000136d, 0x0000136e, 0x0000136f, 0x00001370, 0x00001371, 0x00001372, 0x00001373, 0x00001374, 0x00001375, 0x00001376, 0x00001377, 0x00001378, 0x00001379, 0x0000137a, 0x0000137b, 0x0000137c, 0x0000137d, 0x0000137e, 0x0000137f, 0x000013c2, 0x000013c3, 0x000013c4, 0x000013c5, 0x000013c6, 0x000013c7, 0x000013c8, 0x000013c9, 0x000013ca, 0x000013cb, 0x000013cc, 0x000013cd, 0x000013ce, 0x000013cf, 0x000013d0, 0x000013d1, 0x000013d2, 0x000013d3, 0x000013d4, 0x000013d5, 0x000013d6, 0x000013d7, 0x000013d8, 0x000013d9, 0x000013da, 0x000013db, 0x000013dc, 0x000013dd, 0x000013de, 0x000013df, 0x000013e0, 0x000013e1, 0x000013e2, 0x000013e3, 0x000013e4, 0x000013e5, 0x000013e6, 0x000013e7, 0x000013e8, 0x000013e9, 0x000013ea, 0x000013eb, 0x000013ec, 0x000013ed, 0x000013ee, 0x000013ef, 0x000013f0, 0x000013f1, 0x000013f2, 0x000013f3, 0x000013f4, 0x00001400, 0x00001401, 0x00001402, 0x00001403, 0x00001404, 0x00001405, 0x00001406, 0x00001407, 0x00001408, 0x00001409, 0x0000140a, 0x0000140b, 0x0000140c, 0x0000140d, 0x0000140e, 0x0000140f, 0x00001410, 0x00001411, 0x00001412, 0x00001413, 0x00001414, 0x00001415, 0x00001416, 0x00001417, 0x00001418, 0x00001419, 0x0000141a, 0x0000141b, 0x0000141c, 0x0000141d, 0x0000141e, 0x0000141f, 0x00001420, 0x00001421, 0x00001422, 0x00001423, 0x00001424, 0x00001425, 0x00001426, 0x00001427, 0x00001428, 0x00001429, 0x0000142a, 0x0000142b, 0x0000142c, 0x0000142d, 0x0000142e, 0x0000142f, 0x00001430, 0x00001431, 0x00001432, 0x00001433, 0x00001434, 0x00001435, 0x00001436, 0x00001437, 0x00001438, 0x00001439, 0x0000143a, 0x0000143b, 0x0000143c, 0x0000143d, 0x0000143e, 0x0000143f, 0x00001440, 0x00001441, 0x00001442, 0x00001443, 0x00001444, 0x00001445, 0x00001446, 0x00001447, 0x00001448, 0x00001449, 0x0000144a, 0x0000144b, 0x0000144c, 0x0000144d, 0x0000144e, 0x0000144f, 0x00001450, 0x00001451, 0x00001452, 0x00001453, 0x00001454, 0x00001455, 0x00001456, 0x00001457, 0x00001458, 0x00001459, 0x0000145a, 0x0000145b, 0x0000145c, 0x0000145d, 0x0000145e, 0x0000145f, 0x00001460, 0x00001461, 0x00001462, 0x00001463, 0x00001464, 0x00001465, 0x00001466, 0x00001467, 0x00001468, 0x00001469, 0x0000146a, 0x0000146b, 0x0000146c, 0x0000146d, 0x0000146e, 0x0000146f, 0x00001470, 0x00001471, 0x00001472, 0x00001473, 0x00001474, 0x00001475, 0x00001476, 0x00001477, 0x00001478, 0x00001479, 0x0000147a, 0x0000147b, 0x0000147c, 0x0000147d, 0x0000147e, 0x0000147f, 0x000014c2, 0x000014c3, 0x000014c4, 0x000014c5, 0x000014c6, 0x000014c7, 0x000014c8, 0x000014c9, 0x000014ca, 0x000014cb, 0x000014cc, 0x000014cd, 0x000014ce, 0x000014cf, 0x000014d0, 0x000014d1, 0x000014d2, 0x000014d3, 0x000014d4, 0x000014d5, 0x000014d6, 0x000014d7, 0x000014d8, 0x000014d9, 0x000014da, 0x000014db, 0x000014dc, 0x000014dd, 0x000014de, 0x000014df, 0x000014e0, 0x000014e1, 0x000014e2, 0x000014e3, 0x000014e4, 0x000014e5, 0x000014e6, 0x000014e7, 0x000014e8, 0x000014e9, 0x000014ea, 0x000014eb, 0x000014ec, 0x000014ed, 0x000014ee, 0x000014ef, 0x000014f0, 0x000014f1, 0x000014f2, 0x000014f3, 0x000014f4, 0x00001580, 0x00001581, 0x00001582, 0x00001583, 0x00001584, 0x00001585, 0x00001586, 0x00001587, 0x00001588, 0x00001589, 0x0000158a, 0x0000158b, 0x0000158c, 0x0000158d, 0x0000158e, 0x0000158f, 0x00001590, 0x00001591, 0x00001592, 0x00001593, 0x00001594, 0x00001595, 0x00001596, 0x00001597, 0x00001598, 0x00001599, 0x0000159a, 0x0000159b, 0x0000159c, 0x0000159d, 0x0000159e, 0x0000159f, 0x000015a0, 0x000015a1, 0x000015a2, 0x000015a3, 0x000015a4, 0x000015a5, 0x000015a6, 0x000015a7, 0x000015a8, 0x000015a9, 0x000015aa, 0x000015ab, 0x000015ac, 0x000015ad, 0x000015ae, 0x000015af, 0x000015b0, 0x000015b1, 0x000015b2, 0x000015b3, 0x000015b4, 0x000015b5, 0x000015b6, 0x000015b7, 0x000015b8, 0x000015b9, 0x000015ba, 0x000015bb, 0x000015bc, 0x000015bd, 0x000015be, 0x000015bf, 0x000016a0, 0x000016a1, 0x000016a2, 0x000016a3, 0x000016a4, 0x000016a5, 0x000016a6, 0x000016a7, 0x000016a8, 0x000016a9, 0x000016aa, 0x000016ab, 0x000016ac, 0x000016ad, 0x000016ae, 0x000016af, 0x000016b0, 0x000016b1, 0x000016b2, 0x000016b3, 0x000016b4, 0x000016b5, 0x000016b6, 0x000016b7, 0x000016b8, 0x000016b9, 0x000016ba, 0x000016bb, 0x000016bc, 0x000016bd, 0x000016be, 0x000016bf, 0x00001780, 0x00001781, 0x00001782, 0x00001783, 0x00001784, 0x00001785, 0x00001786, 0x00001787, 0x00001788, 0x00001789, 0x0000178a, 0x0000178b, 0x0000178c, 0x0000178d, 0x0000178e, 0x0000178f, 0x00001790, 0x00001791, 0x00001792, 0x00001793, 0x00001794, 0x00001795, 0x00001796, 0x00001797, 0x00001798, 0x00001799, 0x0000179a, 0x0000179b, 0x0000179c, 0x0000179d, 0x0000179e, 0x0000179f, 0x000017a0, 0x000017a1, 0x000017a2, 0x000017a3, 0x000017a4, 0x000017a5, 0x000017a6, 0x000017a7, 0x000017a8, 0x000017a9, 0x000017aa, 0x000017ab, 0x000017ac, 0x000017ad, 0x000017ae, 0x000017af, 0x000017b0, 0x000017b1, 0x000017b2, 0x000017b3, 0x000017b4, 0x000017b5, 0x000017b6, 0x000017b7, 0x000017b8, 0x000017b9, 0x000017ba, 0x000017bb, 0x000017bc, 0x000017bd, 0x000017be, 0x000017bf, 0x00001880, 0x00001881, 0x00001882, 0x00001883, 0x00001884, 0x00001885, 0x00001886, 0x00001887, 0x00001888, 0x00001889, 0x0000188a, 0x0000188b, 0x0000188c, 0x0000188d, 0x0000188e, 0x0000188f, 0x00001890, 0x00001891, 0x00001892, 0x00001893, 0x00001894, 0x00001895, 0x00001896, 0x00001897, 0x00001898, 0x00001899, 0x0000189a, 0x0000189b, 0x0000189c, 0x0000189d, 0x0000189e, 0x0000189f, 0x00001990, 0x00001991, 0x00001992, 0x00001993, 0x00001994, 0x00001995, 0x00001996, 0x00001997, 0x00001998, 0x00001999, 0x0000199a, 0x0000199b, 0x0000199c, 0x0000199d, 0x0000199e, 0x0000199f, 0x000019a0, 0x000019a1, 0x000019a2, 0x000019a3, 0x000019a4, 0x000019a5, 0x000019a6, 0x000019a7, 0x000019a8, 0x000019a9, 0x000019aa, 0x000019ab, 0x000019ac, 0x000019ad, 0x000019ae, 0x000019af, 0x000019b0, 0x000019b1, 0x000019b2, 0x000019b3, 0x000019b4, 0x000019b5, 0x000019b6, 0x000019b7, 0x000019b8, 0x000019b9, 0x000019ba, 0x000019bb, 0x000019bc, 0x000019bd, 0x000019be, 0x000019bf, 0x00001a80, 0x00001a81, 0x00001a82, 0x00001a83, 0x00001a84, 0x00001a85, 0x00001a86, 0x00001a87, 0x00001a88, 0x00001a89, 0x00001a8a, 0x00001a8b, 0x00001a8c, 0x00001a8d, 0x00001a8e, 0x00001a8f, 0x00001a90, 0x00001a91, 0x00001a92, 0x00001a93, 0x00001a94, 0x00001a95, 0x00001a96, 0x00001a97, 0x00001a98, 0x00001a99, 0x00001a9a, 0x00001a9b, 0x00001a9c, 0x00001a9d, 0x00001a9e, 0x00001a9f, 0x00001aa0, 0x00001aa1, 0x00001aa2, 0x00001aa3, 0x00001aa4, 0x00001aa5, 0x00001aa6, 0x00001aa7, 0x00001aa8, 0x00001aa9, 0x00001aaa, 0x00001aab, 0x00001aac, 0x00001aad, 0x00001aae, 0x00001aaf, 0x00001ab0, 0x00001ab1, 0x00001ab2, 0x00001ab3, 0x00001ab4, 0x00001ab5, 0x00001ab6, 0x00001ab7, 0x00001ab8, 0x00001ab9, 0x00001aba, 0x00001abb, 0x00001abc, 0x00001abd, 0x00001abe, 0x00001abf, 0x00001b80, 0x00001b81, 0x00001b82, 0x00001b83, 0x00001b84, 0x00001b85, 0x00001b86, 0x00001b87, 0x00001b88, 0x00001b89, 0x00001b8a, 0x00001b8b, 0x00001b8c, 0x00001b8d, 0x00001b8e, 0x00001b8f, 0x00001c20, 0x00001d61, 0x00001d62, 0x00001d63, 0x00001d64, 0x00001d65, 0x00001d66, 0x00001d67, 0x00001d68, 0x00001d69, 0x00001d6a, 0x00001d6b, 0x00001d6c, 0x00001d6d, 0x00001d6e, 0x00001d6f, 0x00001d70, 0x00001d71, 0x00001d72, 0x00001d73, 0x00001d74, 0x00001d75, 0x00001d76, 0x00001d77, 0x00001d78, 0x00001d79, 0x00001d7a, 0x00001e3d, 0x00001e61, 0x00001e62, 0x00001e63, 0x00001e64, 0x00001e65, 0x00001e66, 0x00001e67, 0x00001e68, 0x00001e69, 0x00001e6a, 0x00001e6b, 0x00001e6c, 0x00001e6d, 0x00001e6e, 0x00001e6f, 0x00001e70, 0x00001e71, 0x00001e72, 0x00001e73, 0x00001e74, 0x00001e75, 0x00001e76, 0x00001e77, 0x00001e78, 0x00001e79, 0x00001e7a, 0x00001f00, 0x00001f01, 0x00001f02, 0x00001f03, 0x00001f04, 0x00001f05, 0x00001f06, 0x00001f07, 0x00001f08, 0x00001f09, 0x00001f0a, 0x00001f0b, 0x00001f0c, 0x00001f0d, 0x00001f0e, 0x00001f0f, 0x00001f10, 0x00001f11, 0x00001f12, 0x00001f13, 0x00001f14, 0x00001f15, 0x00001f16, 0x00001f17, 0x00001f18, 0x00001f19, 0x00001f1a, 0x00001f1b, 0x00001f1c, 0x00001f1d, 0x00001f1e, 0x00001f1f, 0x00001f20, 0x00001f21, 0x00001f22, 0x00001f23, 0x00001f24, 0x00001f25, 0x00001f26, 0x00001f27, 0x00001f28, 0x00001f29, 0x00001f2a, 0x00001f2b, 0x00001f2c, 0x00001f2d, 0x00001f2e, 0x00001f2f, 0x00001f30, 0x00001f31, 0x00001f32, 0x00001f33, 0x00001f34, 0x00001f35, 0x00001f36, 0x00001f37, 0x00001f38, 0x00001f39, 0x00001f3a, 0x00001f3c, 0x00001f3d, 0x00001f3e, 0x00001f3f, 0x00001f40, 0x00001f41, 0x00001f42, 0x00001f43, 0x00001f44, 0x00001f45, 0x00001f46, 0x00001f47, 0x00001f48, 0x00001f49, 0x00001f4a, 0x00001f4b, 0x00001f4c, 0x00001f4d, 0x00001f4e, 0x00001f4f, 0x00001f50, 0x00001f51, 0x00001f52, 0x00001f53, 0x00001f54, 0x00001f55, 0x00001f56, 0x00001f57, 0x00001f58, 0x00001f59, 0x00001f5a, 0x00001f5b, 0x00001f5c, 0x00001f5d, 0x00001f5e, 0x00001f5f, 0x00001f60, 0x00001f61, 0x00001f62, 0x00001f63, 0x00001f64, 0x00001f65, 0x00001f66, 0x00001f67, 0x00001f68, 0x00001f69, 0x00001f6a, 0x00001f6b, 0x00001f6c, 0x00001f6d, 0x00001f6e, 0x00001f6f, 0x00001f70, 0x00001f71, 0x00001f72, 0x00001f73, 0x00001f74, 0x00001f75, 0x00001f76, 0x00001f77, 0x00001f78, 0x00001f79, 0x00001f7a, 0x00001f7b, 0x00001f7c, 0x00001f7d, 0x00001f7e, 0x00001f7f, 0x00001fc2, 0x00001fc3, 0x00001fc4, 0x00001fc5, 0x00001fc6, 0x00001fc7, 0x00001fc8, 0x00001fc9, 0x00001fca, 0x00001fcb, 0x00001fcc, 0x00001fcd, 0x00001fce, 0x00001fcf, 0x00001fd0, 0x00001fd1, 0x00001fd2, 0x00001fd3, 0x00001fd4, 0x00001fd5, 0x00001fd6, 0x00001fd7, 0x00001fd8, 0x00001fd9, 0x00001fda, 0x00001fdb, 0x00001fdc, 0x00001fdd, 0x00001fde, 0x00001fdf, 0x00001fe0, 0x00001fe1, 0x00001fe2, 0x00001fe3, 0x00001fe4, 0x00001fe5, 0x00001fe6, 0x00001fe7, 0x00001fe8, 0x00001fe9, 0x00001fea, 0x00001feb, 0x00001fec, 0x00001fed, 0x00001fee, 0x00001fef, 0x00001ff0, 0x00001ff1, 0x00001ff2, 0x00001ff3, 0x00001ff4, 0x00002030, 0x00002031, 0x00002032, 0x00002033, 0x00002034, 0x00002035, 0x00002036, 0x00002037, 0x00002038, 0x00002039, 0x0000203b, 0x00002100, 0x00002101, 0x00002102, 0x00002103, 0x00002104, 0x00002105, 0x00002106, 0x00002107, 0x00002108, 0x00002109, 0x0000210a, 0x0000210b, 0x0000210c, 0x0000210d, 0x0000210e, 0x0000210f, 0x00002110, 0x00002111, 0x00002112, 0x00002113, 0x00002114, 0x00002115, 0x00002116, 0x00002117, 0x00002118, 0x00002119, 0x0000211a, 0x0000211b, 0x0000211c, 0x0000211d, 0x0000211e, 0x0000211f, 0x00002120, 0x00002121, 0x00002122, 0x00002123, 0x00002124, 0x00002125, 0x00002126, 0x00002127, 0x00002128, 0x00002129, 0x0000212a, 0x0000212b, 0x0000212c, 0x0000212d, 0x0000212e, 0x0000212f, 0x00002130, 0x00002131, 0x00002132, 0x00002133, 0x00002134, 0x00002135, 0x00002136, 0x00002137, 0x00002138, 0x00002139, 0x0000213a, 0x0000213b, 0x0000213c, 0x0000213d, 0x0000213e, 0x0000213f, 0x00002140, 0x00002141, 0x00002142, 0x00002143, 0x00002144, 0x00002145, 0x00002146, 0x00002147, 0x00002148, 0x00002149, 0x0000214a, 0x0000214b, 0x0000214c, 0x0000214d, 0x0000214e, 0x0000214f, 0x00002150, 0x00002151, 0x00002152, 0x00002153, 0x00002154, 0x00002155, 0x00002156, 0x00002157, 0x00002158, 0x00002159, 0x0000215a, 0x0000215b, 0x0000215c, 0x0000215d, 0x0000215e, 0x0000215f, 0x00002160, 0x00002161, 0x00002162, 0x00002163, 0x00002164, 0x00002165, 0x00002166, 0x00002167, 0x00002168, 0x00002169, 0x0000216a, 0x0000216b, 0x0000216c, 0x0000216d, 0x0000216e, 0x0000216f, 0x00002170, 0x00002171, 0x00002172, 0x00002173, 0x00002174, 0x00002175, 0x00002176, 0x00002177, 0x00002178, 0x00002179, 0x0000217a, 0x0000217b, 0x0000217c, 0x0000217d, 0x0000217e, 0x0000217f, 0x00002180, 0x00002181, 0x00002182, 0x00002183, 0x00002184, 0x00002185, 0x00002186, 0x00002187, 0x00002188, 0x00002189, 0x0000218a, 0x0000218b, 0x0000218c, 0x0000218d, 0x0000218e, 0x0000218f, 0x00002190, 0x00002191, 0x00002192, 0x00002193, 0x00002194, 0x00002195, 0x00002196, 0x00002197, 0x00002198, 0x00002199, 0x0000219a, 0x0000219b, 0x0000219c, 0x0000219d, 0x0000219e, 0x0000219f, 0x000021a0, 0x000021a1, 0x000021a2, 0x000021a3, 0x000021a4, 0x000021a5, 0x000021a6, 0x000021a7, 0x000021a8, 0x000021a9, 0x000021aa, 0x000021ab, 0x000021ac, 0x000021ad, 0x000021ae, 0x000021af, 0x000021b0, 0x000021b1, 0x000021b2, 0x000021b3, 0x000021b4, 0x000021b5, 0x000021b6, 0x000021b7, 0x000021b8, 0x000021b9, 0x000021ba, 0x000021bb, 0x000021bc, 0x000021bd, 0x000021be, 0x000021bf, 0x000021c0, 0x000021c1, 0x000021c2, 0x000021c3, 0x000021c4, 0x000021c5, 0x000021c6, 0x000021c7, 0x000021c8, 0x000021c9, 0x000021ca, 0x000021cb, 0x000021cc, 0x000021cd, 0x000021ce, 0x000021cf, 0x000021d0, 0x000021d1, 0x000021d2, 0x000021d3, 0x000021d4, 0x000021d5, 0x000021d6, 0x000021d7, 0x000021d8, 0x000021d9, 0x000021da, 0x000021db, 0x000021dc, 0x000021dd, 0x000021de, 0x000021df, 0x000021e0, 0x000021e1, 0x000021e2, 0x000021e3, 0x000021e4, 0x000021e5, 0x000021e6, 0x000021e7, 0x000021e8, 0x000021e9, 0x000021ea, 0x000021eb, 0x000021ec, 0x000021ed, 0x000021ee, 0x000021ef, 0x000021f0, 0x000021f1, 0x000021f2, 0x000021f3, 0x000021f4, 0x000021f5, 0x000021f6, 0x000021f7, 0x000021f8, 0x000021f9, 0x000021fa, 0x000021fb, 0x000021fc, 0x000021fd, 0x000021fe, 0x00002200, 0x00002201, 0x00002202, 0x00002203, 0x00002204, 0x00002205, 0x00002206, 0x00002207, 0x00002208, 0x00002209, 0x0000220a, 0x0000220b, 0x0000220c, 0x0000220d, 0x0000220e, 0x0000220f, 0x00002210, 0x00002211, 0x00002212, 0x00002213, 0x00002214, 0x00002215, 0x00002216, 0x00002217, 0x00002218, 0x00002219, 0x0000221a, 0x0000221b, 0x0000221c, 0x0000221d, 0x0000221e, 0x0000221f, 0x00002220, 0x00002221, 0x00002222, 0x00002223, 0x00002224, 0x00002225, 0x00002226, 0x00002227, 0x00002228, 0x00002229, 0x0000222a, 0x0000222b, 0x0000222c, 0x0000222d, 0x0000222e, 0x0000222f, 0x00002230, 0x00002231, 0x00002232, 0x00002233, 0x00002234, 0x00002235, 0x00002236, 0x00002237, 0x00002238, 0x00002239, 0x0000223a, 0x0000223b, 0x0000223c, 0x0000223d, 0x0000223e, 0x0000223f, 0x00002240, 0x00002241, 0x00002242, 0x00002243, 0x00002244, 0x00002245, 0x00002246, 0x00002247, 0x00002248, 0x00002249, 0x0000224a, 0x0000224b, 0x0000224c, 0x0000224d, 0x0000224e, 0x0000224f, 0x00002250, 0x00002251, 0x00002252, 0x00002253, 0x00002254, 0x00002255, 0x00002256, 0x00002257, 0x00002258, 0x00002259, 0x0000225a, 0x0000225b, 0x0000225c, 0x0000225d, 0x0000225e, 0x0000225f, 0x00002260, 0x00002261, 0x00002262, 0x00002263, 0x00002264, 0x00002265, 0x00002266, 0x00002267, 0x00002268, 0x00002269, 0x0000226a, 0x0000226b, 0x0000226c, 0x0000226d, 0x0000226e, 0x0000226f, 0x00002270, 0x00002271, 0x00002272, 0x00002273, 0x00002274, 0x00002275, 0x00002276, 0x00002277, 0x00002278, 0x00002279, 0x0000227a, 0x0000227b, 0x0000227c, 0x0000227d, 0x0000227e, 0x0000227f, 0x00002280, 0x00002281, 0x00002282, 0x00002283, 0x00002284, 0x00002285, 0x00002286, 0x00002287, 0x00002288, 0x00002289, 0x0000228a, 0x0000228b, 0x0000228c, 0x0000228d, 0x0000228e, 0x0000228f, 0x00002290, 0x00002291, 0x00002292, 0x00002293, 0x00002294, 0x00002295, 0x00002296, 0x00002297, 0x00002298, 0x00002299, 0x0000229a, 0x0000229b, 0x0000229c, 0x0000229d, 0x0000229e, 0x0000229f, 0x000022a0, 0x000022a1, 0x000022a2, 0x000022a3, 0x000022a4, 0x000022a5, 0x000022a6, 0x000022a7, 0x000022a8, 0x000022a9, 0x000022aa, 0x000022ab, 0x000022ac, 0x000022ad, 0x000022ae, 0x000022af, 0x000022b0, 0x000022b1, 0x000022b2, 0x000022b3, 0x000022b4, 0x000022b5, 0x000022b6, 0x000022b7, 0x000022b8, 0x000022b9, 0x000022ba, 0x000022bb, 0x000022bc, 0x000022bd, 0x000022be, 0x000022bf, 0x000022c0, 0x000022c1, 0x000022c2, 0x000022c3, 0x000022c4, 0x000022c5, 0x000022c6, 0x000022c7, 0x000022c8, 0x000022c9, 0x000022ca, 0x000022cb, 0x000022cc, 0x000022cd, 0x000022ce, 0x000022cf, 0x000022d0, 0x000022d1, 0x000022d2, 0x000022d3, 0x000022d4, 0x000022d5, 0x000022d6, 0x000022d7, 0x000022d8, 0x000022d9, 0x000022da, 0x000022db, 0x000022dc, 0x000022dd, 0x000022de, 0x000022df, 0x000022e0, 0x000022e1, 0x000022e2, 0x000022e3, 0x000022e4, 0x000022e5, 0x000022e6, 0x000022e7, 0x000022e8, 0x000022e9, 0x000022ea, 0x000022eb, 0x000022ec, 0x000022ed, 0x000022ee, 0x000022ef, 0x000022f0, 0x000022f1, 0x000022f2, 0x000022f3, 0x000022f4, 0x000022f5, 0x000022f6, 0x000022f7, 0x000022f8, 0x000022f9, 0x000022fa, 0x000022fb, 0x000022fc, 0x000022fd, 0x000022fe, 0x000022ff],
    values: [0x00000000, 0x00000000, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x0000001d, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x0000001e, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x00000012, 0x00000015, 0x0000001f, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000015, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000014, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000015, 0x00000017, 0x00000016, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000018, 0x00000017, 0x00000019, 0x00000017, 0x0000001a, 0x00000017, 0x0000001a, 0x00000017, 0x0000001a, 0x00000017, 0x0000001b, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000020, 0x00000017, 0x00000021, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000022, 0x00000001, 0x00000002, 0x00000002, 0x00000003, 0x00000004, 0x00000005, 0x00000006, 0x00000007, 0x00000008, 0x00000009, 0x0000000a, 0x0000000b, 0x0000000c, 0x0000000d, 0x0000000e, 0x0000000f, 0x00000010, 0x00000011, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000012, 0x00000013, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000016, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000018, 0x00000019, 0x0000001a, 0x0000001a, 0x0000001a, 0x0000001b, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000015, 0x00000016, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000017, 0x00000018, 0x00000019, 0x0000001a, 0x0000001a, 0x0000001a, 0x0000001b, 0x0000001c, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000014, 0x00000000],
    maximum: 0x000022ff
};

            
pub fn regex_match<let N: u32>(input: [u8; N]) -> BoundedVec<BoundedVec<u8, N>, 1> {
    let pattern_match = unsafe { __regex_match(input) };
    
    // "Previous" state
    let mut s: Field = 0;
    s = table.get(255);
    // "Next"/upcoming state
    let mut s_next: Field = 0;

    // check the match
    for i in 0..N {
        let temp = input[i] as Field;
        s_next = table.get(s * 256 + temp);
        let potential_s_next = table.get(temp);
        if s_next == 0 {
            s = 0;
            s_next = potential_s_next;
        }
        std::as_witness(s_next);

        
        let range_0 = pattern_match.substrings.get_unchecked(0).in_range(i);
        let case_0 = [
            (s_next == 32) & ((s == 31) | (s == 32))
        ].any(|case| case == true) | !range_0;


        
        let substring_range_check = [case_0]
            .all(|case| case == true);

        assert(substring_range_check, "substr array ranges wrong");
            

        s = s_next;
    }
    // check final state
    assert((s == 33) | (s == 34), f"no match: {s}");

    // extract substrings
    let mut substrings: BoundedVec<BoundedVec<u8, N>, 1> = BoundedVec::new();
    for i in 0..1 {
        let substring = pattern_match.substrings.get_unchecked(i);
        let mut extracted_substring = extract_substring(substring, input);
        let mut len = substrings.len() + 1;
        if i >= pattern_match.substrings.len() {
            extracted_substring = BoundedVec::new();
            len = substrings.len();
        }
        substrings.len = len;
        substrings.storage[i] = extracted_substring;
    }

    substrings
}

pub unconstrained fn __regex_match<let N: u32>(input: [u8; N]) -> RegexMatch<N, 1> {
    // regex: (\r\n|^)dkim-signature:([a-z]+=[^;]+; )+t=[0-9]+;
    let mut substrings: BoundedVec<Sequence, 1> = BoundedVec::new();
    let mut current_substring = Sequence::default();
    let mut full_match = Sequence::default();

    // "Previous" state
    let mut s: Field = 0;
    s = table.get(255);
    // "Next"/upcoming state
    let mut s_next: Field = 0;

    let mut consecutive_substr = 0;
    let mut complete = false;

    for i in 0..input.len() {
        let temp = input[i] as Field;
        let mut reset = false;
        s_next = table.get(s * 256 + temp);
        let potential_s_next = table.get(temp);
        if s_next == 0 {
            reset = true;
            s = 0;
            s_next = potential_s_next;
        }
        // If a substring was in the making, but the state was reset
        // we disregard previous progress because apparently it is invalid
        if (reset & (consecutive_substr == 1)) {
            current_substring = Sequence::default();
            consecutive_substr = 0;
        }
        // Fill up substrings
        if ((s == 31) & (s_next == 32) | (s == 32) & (s_next == 32)) {
            if (consecutive_substr == 0) {
                full_match.index = i;
                current_substring.index = i;
            };

            current_substring.length += 1;
            consecutive_substr = 1; 
        } else if ((consecutive_substr == 1) & (s_next == 0)) {
            current_substring = Sequence::default();
            full_match = Sequence::default();
            substrings = BoundedVec::new();
            consecutive_substr = 0;
        } else if (s == 33) & (s_next == 34) {
            full_match.length = i - full_match.index + 1;
            complete = true;
        } else if (consecutive_substr == 1) {
            // The substring is done so "save" it
            substrings.push(current_substring);
            // reset the substring holder for next use
            current_substring = Sequence::default();
            consecutive_substr = 0;
        }
        s = s_next;
        if complete == true {
            break;
        }
    }
    assert((s == 33) | (s == 34), f"no match: {s}");
    // Add pending substring that hasn't been added
    if consecutive_substr == 1 {
        substrings.push(current_substring);
        full_match.length = input.len() - full_match.index;
    }

    // make masked array
    let mut masked = [0; N];
    for i in 0..substrings.len() {
        let substring = substrings.get(i);
        let start_index = substring.index;
        let end_index = start_index + substring.length;
        for j in start_index..end_index {
            masked[j] = input[j];
        }
    }

    RegexMatch { masked, full_match, substrings }
}


pub struct Sequence {
    index: u32,
    length: u32,
}

impl Sequence {
    pub fn new(index: u32, length: u32) -> Self {
        Self { index, length }
    }

    pub fn default() -> Self {
        Self { index: 0, length: 0 }
    }

    pub fn end(self) -> u32 {
        self.index + self.length
    }

    pub fn in_range(self, index: u32) -> bool {
        index >= self.index & index < self.end()
    }
}

pub struct RegexMatch<let INPUT_LENGTH: u32, let NUM_SUBSTRINGS: u32> {
    masked: [u8; INPUT_LENGTH],
    full_match: Sequence,
    substrings: BoundedVec<Sequence, NUM_SUBSTRINGS>,
}

pub fn extract_substring<let INPUT_LENGTH: u32, let MAX_SUBSTRING_LENGTH: u32>(
    substring_sequence: Sequence,
    input: [u8; INPUT_LENGTH],
) -> BoundedVec<u8, MAX_SUBSTRING_LENGTH> {
    let mut substring: BoundedVec<u8, MAX_SUBSTRING_LENGTH> = unsafe { __extract_substring(substring_sequence, input) };
    assert(substring_sequence.length == substring.len(), "length mismatch");
    for i in 0..MAX_SUBSTRING_LENGTH {
        // hack for index to never exceed array bounds
        // must be constrained to be true when matching is required to prevent 0's passing when shouldn't
        // @dev while this adds constraints in worse case it can be more efficient if MAX_SUBSTRING_LENGTH < INPUT_LENGTH
        let input_range_check = substring_sequence.index + i < INPUT_LENGTH;
        let index = (substring_sequence.index + i) as Field * input_range_check as Field;

        // range where input should match substring
        let sequence_range_check = i >= substring_sequence.length;
        
        // constrain array construction if in range
        let expected_byte = input[index];
        let byte = substring.get_unchecked(i);
        let matched = (expected_byte as Field == byte as Field);
        assert(matched | sequence_range_check, "incorrect substring construction");
    }
    substring
}

unconstrained fn __extract_substring<let INPUT_LENGTH: u32, let MAX_SUBSTRING_LENGTH: u32>(
    substring_sequence: Sequence,
    input: [u8; INPUT_LENGTH],
) -> BoundedVec<u8, MAX_SUBSTRING_LENGTH> {
    let mut substring: BoundedVec<u8, MAX_SUBSTRING_LENGTH> = BoundedVec::new();
    for i in 0..substring_sequence.length {
        let byte = input[substring_sequence.index + i];
        substring.push(byte);
    }
    substring
}