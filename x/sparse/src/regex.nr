global table: sparse_array::SparseArray<538, Field> = sparse_array::SparseArray {
    keys: [0x00000000, 0x00000078, 0x00000130, 0x00000131, 0x00000132, 0x00000133, 0x00000134, 0x00000135, 0x00000136, 0x00000137, 0x00000138, 0x00000139, 0x00000230, 0x00000231, 0x00000232, 0x00000233, 0x00000234, 0x00000235, 0x00000236, 0x00000237, 0x00000238, 0x00000239, 0x0000032d, 0x00000479, 0x00000579, 0x0000065f, 0x00000679, 0x0000075f, 0x0000087a, 0x00000900, 0x00000901, 0x00000902, 0x00000903, 0x00000904, 0x00000905, 0x00000906, 0x00000907, 0x00000908, 0x00000909, 0x0000090a, 0x0000090b, 0x0000090c, 0x0000090d, 0x0000090e, 0x0000090f, 0x00000910, 0x00000911, 0x00000912, 0x00000913, 0x00000914, 0x00000915, 0x00000916, 0x00000917, 0x00000918, 0x00000919, 0x0000091a, 0x0000091b, 0x0000091c, 0x0000091d, 0x0000091e, 0x0000091f, 0x00000920, 0x00000921, 0x00000922, 0x00000923, 0x00000924, 0x00000925, 0x00000926, 0x00000927, 0x00000928, 0x00000929, 0x0000092a, 0x0000092b, 0x0000092c, 0x0000092d, 0x0000092e, 0x0000092f, 0x00000930, 0x00000931, 0x00000932, 0x00000933, 0x00000934, 0x00000935, 0x00000936, 0x00000937, 0x00000938, 0x00000939, 0x0000093a, 0x0000093b, 0x0000093c, 0x0000093d, 0x0000093e, 0x0000093f, 0x00000940, 0x00000941, 0x00000942, 0x00000943, 0x00000944, 0x00000945, 0x00000946, 0x00000947, 0x00000948, 0x00000949, 0x0000094a, 0x0000094b, 0x0000094c, 0x0000094d, 0x0000094e, 0x0000094f, 0x00000950, 0x00000951, 0x00000952, 0x00000953, 0x00000954, 0x00000955, 0x00000956, 0x00000957, 0x00000958, 0x00000959, 0x0000095a, 0x0000095b, 0x0000095c, 0x0000095d, 0x0000095e, 0x0000095f, 0x00000960, 0x00000961, 0x00000962, 0x00000963, 0x00000964, 0x00000965, 0x00000966, 0x00000967, 0x00000968, 0x00000969, 0x0000096a, 0x0000096b, 0x0000096c, 0x0000096d, 0x0000096e, 0x0000096f, 0x00000970, 0x00000971, 0x00000972, 0x00000973, 0x00000974, 0x00000975, 0x00000976, 0x00000977, 0x00000978, 0x00000979, 0x0000097a, 0x0000097b, 0x0000097c, 0x0000097d, 0x0000097e, 0x0000097f, 0x00000980, 0x00000981, 0x00000982, 0x00000983, 0x00000984, 0x00000985, 0x00000986, 0x00000987, 0x00000988, 0x00000989, 0x0000098a, 0x0000098b, 0x0000098c, 0x0000098d, 0x0000098e, 0x0000098f, 0x00000990, 0x00000991, 0x00000992, 0x00000993, 0x00000994, 0x00000995, 0x00000996, 0x00000997, 0x00000998, 0x00000999, 0x0000099a, 0x0000099b, 0x0000099c, 0x0000099d, 0x0000099e, 0x0000099f, 0x000009a0, 0x000009a1, 0x000009a2, 0x000009a3, 0x000009a4, 0x000009a5, 0x000009a6, 0x000009a7, 0x000009a8, 0x000009a9, 0x000009aa, 0x000009ab, 0x000009ac, 0x000009ad, 0x000009ae, 0x000009af, 0x000009b0, 0x000009b1, 0x000009b2, 0x000009b3, 0x000009b4, 0x000009b5, 0x000009b6, 0x000009b7, 0x000009b8, 0x000009b9, 0x000009ba, 0x000009bb, 0x000009bc, 0x000009bd, 0x000009be, 0x000009bf, 0x000009c0, 0x000009c1, 0x000009c2, 0x000009c3, 0x000009c4, 0x000009c5, 0x000009c6, 0x000009c7, 0x000009c8, 0x000009c9, 0x000009ca, 0x000009cb, 0x000009cc, 0x000009cd, 0x000009ce, 0x000009cf, 0x000009d0, 0x000009d1, 0x000009d2, 0x000009d3, 0x000009d4, 0x000009d5, 0x000009d6, 0x000009d7, 0x000009d8, 0x000009d9, 0x000009da, 0x000009db, 0x000009dc, 0x000009dd, 0x000009de, 0x000009df, 0x000009e0, 0x000009e1, 0x000009e2, 0x000009e3, 0x000009e4, 0x000009e5, 0x000009e6, 0x000009e7, 0x000009e8, 0x000009e9, 0x000009ea, 0x000009eb, 0x000009ec, 0x000009ed, 0x000009ee, 0x000009ef, 0x000009f0, 0x000009f1, 0x000009f2, 0x000009f3, 0x000009f4, 0x000009f5, 0x000009f6, 0x000009f7, 0x000009f8, 0x000009f9, 0x000009fa, 0x000009fb, 0x000009fc, 0x000009fd, 0x000009fe, 0x00000a00, 0x00000a01, 0x00000a02, 0x00000a03, 0x00000a04, 0x00000a05, 0x00000a06, 0x00000a07, 0x00000a08, 0x00000a09, 0x00000a0a, 0x00000a0b, 0x00000a0c, 0x00000a0d, 0x00000a0e, 0x00000a0f, 0x00000a10, 0x00000a11, 0x00000a12, 0x00000a13, 0x00000a14, 0x00000a15, 0x00000a16, 0x00000a17, 0x00000a18, 0x00000a19, 0x00000a1a, 0x00000a1b, 0x00000a1c, 0x00000a1d, 0x00000a1e, 0x00000a1f, 0x00000a20, 0x00000a21, 0x00000a22, 0x00000a23, 0x00000a24, 0x00000a25, 0x00000a26, 0x00000a27, 0x00000a28, 0x00000a29, 0x00000a2a, 0x00000a2b, 0x00000a2c, 0x00000a2d, 0x00000a2e, 0x00000a2f, 0x00000a30, 0x00000a31, 0x00000a32, 0x00000a33, 0x00000a34, 0x00000a35, 0x00000a36, 0x00000a37, 0x00000a38, 0x00000a39, 0x00000a3a, 0x00000a3b, 0x00000a3c, 0x00000a3d, 0x00000a3e, 0x00000a3f, 0x00000a40, 0x00000a41, 0x00000a42, 0x00000a43, 0x00000a44, 0x00000a45, 0x00000a46, 0x00000a47, 0x00000a48, 0x00000a49, 0x00000a4a, 0x00000a4b, 0x00000a4c, 0x00000a4d, 0x00000a4e, 0x00000a4f, 0x00000a50, 0x00000a51, 0x00000a52, 0x00000a53, 0x00000a54, 0x00000a55, 0x00000a56, 0x00000a57, 0x00000a58, 0x00000a59, 0x00000a5a, 0x00000a5b, 0x00000a5c, 0x00000a5d, 0x00000a5e, 0x00000a5f, 0x00000a60, 0x00000a61, 0x00000a62, 0x00000a63, 0x00000a64, 0x00000a65, 0x00000a66, 0x00000a67, 0x00000a68, 0x00000a69, 0x00000a6a, 0x00000a6b, 0x00000a6c, 0x00000a6d, 0x00000a6e, 0x00000a6f, 0x00000a70, 0x00000a71, 0x00000a72, 0x00000a73, 0x00000a74, 0x00000a75, 0x00000a76, 0x00000a77, 0x00000a78, 0x00000a79, 0x00000a7a, 0x00000a7b, 0x00000a7c, 0x00000a7d, 0x00000a7e, 0x00000a7f, 0x00000a80, 0x00000a81, 0x00000a82, 0x00000a83, 0x00000a84, 0x00000a85, 0x00000a86, 0x00000a87, 0x00000a88, 0x00000a89, 0x00000a8a, 0x00000a8b, 0x00000a8c, 0x00000a8d, 0x00000a8e, 0x00000a8f, 0x00000a90, 0x00000a91, 0x00000a92, 0x00000a93, 0x00000a94, 0x00000a95, 0x00000a96, 0x00000a97, 0x00000a98, 0x00000a99, 0x00000a9a, 0x00000a9b, 0x00000a9c, 0x00000a9d, 0x00000a9e, 0x00000a9f, 0x00000aa0, 0x00000aa1, 0x00000aa2, 0x00000aa3, 0x00000aa4, 0x00000aa5, 0x00000aa6, 0x00000aa7, 0x00000aa8, 0x00000aa9, 0x00000aaa, 0x00000aab, 0x00000aac, 0x00000aad, 0x00000aae, 0x00000aaf, 0x00000ab0, 0x00000ab1, 0x00000ab2, 0x00000ab3, 0x00000ab4, 0x00000ab5, 0x00000ab6, 0x00000ab7, 0x00000ab8, 0x00000ab9, 0x00000aba, 0x00000abb, 0x00000abc, 0x00000abd, 0x00000abe, 0x00000abf, 0x00000ac0, 0x00000ac1, 0x00000ac2, 0x00000ac3, 0x00000ac4, 0x00000ac5, 0x00000ac6, 0x00000ac7, 0x00000ac8, 0x00000ac9, 0x00000aca, 0x00000acb, 0x00000acc, 0x00000acd, 0x00000ace, 0x00000acf, 0x00000ad0, 0x00000ad1, 0x00000ad2, 0x00000ad3, 0x00000ad4, 0x00000ad5, 0x00000ad6, 0x00000ad7, 0x00000ad8, 0x00000ad9, 0x00000ada, 0x00000adb, 0x00000adc, 0x00000add, 0x00000ade, 0x00000adf, 0x00000ae0, 0x00000ae1, 0x00000ae2, 0x00000ae3, 0x00000ae4, 0x00000ae5, 0x00000ae6, 0x00000ae7, 0x00000ae8, 0x00000ae9, 0x00000aea, 0x00000aeb, 0x00000aec, 0x00000aed, 0x00000aee, 0x00000aef, 0x00000af0, 0x00000af1, 0x00000af2, 0x00000af3, 0x00000af4, 0x00000af5, 0x00000af6, 0x00000af7, 0x00000af8, 0x00000af9, 0x00000afa, 0x00000afb, 0x00000afc, 0x00000afd, 0x00000afe, 0x00000aff],
    values: [0x00000000, 0x00000000, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x00000001, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000002, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000003, 0x0000000a, 0x00000004, 0x0000000a, 0x00000005, 0x0000000a, 0x00000006, 0x0000000a, 0x00000007, 0x0000000a, 0x00000008, 0x0000000a, 0x00000008, 0x0000000a, 0x00000009, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x0000000a, 0x00000000],
    maximum: 0x00000aff
};

            
pub fn regex_match<let N: u32>(input: [u8; N]) -> BoundedVec<BoundedVec<Field, N>, 2> {
    let (substrings, start, end) = unsafe { __regex_match(input) };
    
    let mut s: Field = 0;
    s = table[255];
    // check the match
    for i in 0..N {
        let temp = input[i] as Field;
        let s_next: Field = table[s * 256 + temp];
        let range = i >= start & i <= end;
        let cases = [
            (s == 0) & (s_next == 1),
            (s == 1) & (s_next == 2),
            (s == 2) & (s_next == 3),
            (s == 6) & (s_next == 8),
            (s == 7) & (s_next == 8),
            (s == 8) & (s_next == 9),
            (s == 9) & (s_next == 10),
            (s == 10) & (s_next == 10)
		];
        // idk why have to say == true
        let found = cases.any(|case|  case == true | range == false );
        s = s_next;
        assert(found, "no match");
    }
    // check last is 9 or 10

    substrings
}

pub unconstrained fn __regex_match<let N: u32>(input: [u8; N]) -> (BoundedVec<BoundedVec<Field, N>, 2>, u32, u32) {
    // regex: x[0-9]{2}-y{2,3}_z
    let mut substrings: BoundedVec<BoundedVec<Field, N>, 2> = BoundedVec::new();

    // "Previous" state
    let mut s: Field = 0;
    s = table.get(255);
    // "Next"/upcoming state
    let mut s_next: Field = 0;

    let mut consecutive_substr = 0;
    let mut current_substring = BoundedVec::new();
    let mut start_index = 0;
    let mut end_index = 0;
    let mut complete = false;

    for i in 0..input.len() {
        let temp = input[i] as Field;
        let mut reset = false;
        let mut s_next_idx = s * 256 + temp;
        if s_next == 0 {
          // Check if there is any transition that could be done from a "restart"
          s_next_idx = temp;
          // whether the next state changes or not, we mark this as a reset.
          reset = true;
          s = 0;
        }
        s_next = table.get(s_next_idx);
        

        // If a substring was in the making, but the state was reset
        // we disregard previous progress because apparently it is invalid
        if (reset & (consecutive_substr == 1)) {
            current_substring = BoundedVec::new();
            consecutive_substr = 0;
        }
        // Fill up substrings
        if ((s == 0) & (s_next == 1) | (s == 1) & (s_next == 2) | (s == 2) & (s_next == 3)) {
            	if (consecutive_substr == 0) {
                                start_index = i;
                            };

            current_substring.push(temp);
            consecutive_substr = 1;   
        }
        else if ((s == 6) & (s_next == 8) | (s == 7) & (s_next == 8) | (s == 8) & (s_next == 9)) {
    
            current_substring.push(temp);
            consecutive_substr = 1;   
        } else if ((consecutive_substr == 1) & (s_next == 0)) {
            current_substring = BoundedVec::new();
            substrings = BoundedVec::new();
            consecutive_substr = 0;
            start_index = 0;
            end_index = 0;
        } else if (s == 9) & (s_next == 10) {
            end_index = i;
            complete = true;
            break;
        } else if (consecutive_substr == 1) {
            // The substring is done so "save" it
            substrings.push(current_substring);
            // reset the substring holder for next use
            current_substring = BoundedVec::new();
            consecutive_substr = 0;
        }
        s = s_next;
    }
    assert((s == 9) | (s == 10), f"no match: {s}");
    // Add pending substring that hasn't been added
    if consecutive_substr == 1 {
        substrings.push(current_substring);
    }
    (substrings, start_index, end_index)
}