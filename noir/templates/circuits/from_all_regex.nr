use zkregex::utils::{
   select_subarray,
   captures::capture_substring,
   sparse_array::SparseArray,
   transitions::check_transition_with_captures
};

global TRANSITION_TABLE: SparseArray<685, Field> = SparseArray {
    keys: [0x00000000, 0x0002110f, 0x00021110, 0x0003100f, 0x00046e6a, 0x00046e6d, 0x00057c7b, 0x00067b7a, 0x00077b7a, 0x00084a49, 0x00099294, 0x00099295, 0x00099395, 0x00099396, 0x00099496, 0x00099497, 0x00099597, 0x00099598, 0x00099698, 0x00099699, 0x00099799, 0x0009979a, 0x0009989a, 0x0009989b, 0x0009999b, 0x0009999c, 0x00099a9c, 0x00099a9d, 0x00099b9d, 0x00099b9e, 0x00099c9e, 0x00099c9f, 0x00099d9f, 0x00099da0, 0x00099ea0, 0x00099ea1, 0x00099fa1, 0x00099fa2, 0x0009a0a2, 0x0009a0a3, 0x0009a1a3, 0x0009a1a4, 0x0009a2a4, 0x0009a2a5, 0x0009a3a5, 0x0009a3a6, 0x0009a4a6, 0x0009a4a7, 0x0009a5a7, 0x0009a5a8, 0x0009a6a8, 0x0009a6a9, 0x0009a7a9, 0x0009a7aa, 0x0009a8aa, 0x0009a8ab, 0x0009a9ab, 0x0009a9ac, 0x0009aaac, 0x0009aaad, 0x0009abad, 0x0009abae, 0x0009acae, 0x0009acaf, 0x0009adaf, 0x0009adb0, 0x0009aeb0, 0x0009aeb1, 0x0009afb1, 0x0009afb2, 0x0009b0b2, 0x0009b0b3, 0x0009b1b3, 0x0009b1b4, 0x0009b2b3, 0x0009b2b4, 0x0009b3b4, 0x0009b3b5, 0x0009b4b5, 0x0009b4b6, 0x0009b5b6, 0x0009b5b7, 0x0009b6b7, 0x0009b6b8, 0x0009b7b8, 0x0009b7b9, 0x0009b8b9, 0x0009b8ba, 0x0009b9ba, 0x0009b9bb, 0x0009babb, 0x0009babc, 0x0009bbbc, 0x0009bbbd, 0x0009bcbd, 0x0009bcbe, 0x0009bdbe, 0x0009bdbf, 0x0009bebf, 0x0009bec0, 0x0009bfc0, 0x0009bfc1, 0x0009c0c1, 0x0009c0c2, 0x0009c1c2, 0x0009c1c3, 0x0009c2c3, 0x0009c2c4, 0x0009c3c4, 0x0009c3c5, 0x0009c4c5, 0x0009c4c6, 0x0009c5c6, 0x0009c5c7, 0x0009c6c7, 0x0009c6c8, 0x0009c7c8, 0x0009c7c9, 0x0009c8c9, 0x0009c8ca, 0x0009c9ca, 0x0009c9cb, 0x0009cacb, 0x0009cacc, 0x0009cbcc, 0x0009cbcd, 0x0009cccd, 0x0009ccce, 0x0009cdce, 0x0009cdcf, 0x0009cecf, 0x0009ced0, 0x0009cfd0, 0x0009cfd1, 0x0009d0d1, 0x0009d0d2, 0x0009d1d2, 0x0009d1d3, 0x0009d4d3, 0x0009d4db, 0x0009d5d4, 0x0009d5dc, 0x0009d6d5, 0x0009d6dd, 0x0009d7d6, 0x0009d7de, 0x0009d8d7, 0x0009d8df, 0x0009d9d8, 0x0009d9e0, 0x0009dad9, 0x0009dae1, 0x0009dbda, 0x0009dbe2, 0x0009dcdb, 0x0009dce3, 0x0009dddc, 0x0009dde4, 0x0009dedd, 0x0009dee5, 0x0009dfde, 0x0009dfe6, 0x0009e0df, 0x0009e0e7, 0x0009e1e0, 0x0009e1e8, 0x0009e2e1, 0x0009e2e9, 0x0009e3e2, 0x0009e3ea, 0x0009e4e3, 0x0009e4eb, 0x0009e5e4, 0x0009e5ec, 0x0009e6e5, 0x0009e6ed, 0x0009e7e6, 0x0009e7ee, 0x0009e8e7, 0x0009e8ef, 0x0009e9e8, 0x0009e9f0, 0x0009eae9, 0x0009eaf1, 0x0009ebea, 0x0009ebf2, 0x0009eceb, 0x0009ecf3, 0x0009edec, 0x0009edf4, 0x0009eeed, 0x0009eef5, 0x0009efee, 0x0009eff6, 0x0009f0ef, 0x0009f0f7, 0x0009f1f0, 0x0009f1f8, 0x000af4f2, 0x000af4fa, 0x000b9699, 0x000b969a, 0x000b979a, 0x000b979b, 0x000b989b, 0x000b989c, 0x000b999c, 0x000b999d, 0x000b9a9d, 0x000b9a9e, 0x000b9b9e, 0x000b9b9f, 0x000b9c9f, 0x000b9ca0, 0x000b9da0, 0x000b9da1, 0x000b9ea1, 0x000b9ea2, 0x000b9fa2, 0x000b9fa3, 0x000ba0a3, 0x000ba0a4, 0x000ba1a4, 0x000ba1a5, 0x000ba2a5, 0x000ba2a6, 0x000ba3a6, 0x000ba3a7, 0x000ba4a7, 0x000ba4a8, 0x000ba5a8, 0x000ba5a9, 0x000ba6a8, 0x000ba6a9, 0x000ba7a9, 0x000ba7aa, 0x000ba8aa, 0x000ba8ab, 0x000ba9ab, 0x000ba9ac, 0x000baaac, 0x000baaad, 0x000babad, 0x000babae, 0x000bacae, 0x000bacaf, 0x000badaf, 0x000badb0, 0x000baeb0, 0x000baeb1, 0x000bafb1, 0x000bafb2, 0x000bb0b2, 0x000bb0b3, 0x000bb1b3, 0x000bb1b4, 0x000bb2b4, 0x000bb2b5, 0x000bb3b5, 0x000bb3b6, 0x000bb4b6, 0x000bb4b7, 0x000bb5b7, 0x000bb5b8, 0x000bb6b8, 0x000bb6b9, 0x000bb7b9, 0x000bb7ba, 0x000bb8ba, 0x000bb8bb, 0x000bb9bb, 0x000bb9bc, 0x000bbabc, 0x000bbabd, 0x000bbbbd, 0x000bbbbe, 0x000bbcbe, 0x000bbcbf, 0x000bbdbf, 0x000bbdc0, 0x000bbec0, 0x000bbec1, 0x000bbfc1, 0x000bbfc2, 0x000bc0c2, 0x000bc0c3, 0x000bc1c3, 0x000bc1c4, 0x000bc2c4, 0x000bc2c5, 0x000bc3c5, 0x000bc3c6, 0x000bc4c6, 0x000bc4c7, 0x000bc5c7, 0x000bc5c8, 0x000bc6c8, 0x000bc6c9, 0x000bc7c9, 0x000bc7ca, 0x000bc8ca, 0x000bc8cb, 0x000bc9cb, 0x000bc9cc, 0x000bcacc, 0x000bcacd, 0x000bcbcd, 0x000bcbce, 0x000bccce, 0x000bcccf, 0x000bcdcf, 0x000bcdd0, 0x000bced0, 0x000bced1, 0x000bcfd1, 0x000bcfd2, 0x000bd0d2, 0x000bd0d3, 0x000bd1d3, 0x000bd1d4, 0x000bd2d4, 0x000bd2d5, 0x000bd3d5, 0x000bd3d6, 0x000bd4d6, 0x000bd4d7, 0x000bd5d7, 0x000bd5d8, 0x000bf7f4, 0x000bf7fc, 0x000bf8f5, 0x000bf8fd, 0x000bf9f6, 0x000bf9fe, 0x000bfaf7, 0x000bfaff, 0x000bfbf8, 0x000bfc00, 0x000bfcf9, 0x000bfd01, 0x000bfdfa, 0x000bfe02, 0x000bfefb, 0x000bff03, 0x000bfffc, 0x000c0004, 0x000c00fd, 0x000c0105, 0x000c01fe, 0x000c0206, 0x000c02ff, 0x000c0307, 0x000c0501, 0x000c0509, 0x000c0602, 0x000c060a, 0x000d0601, 0x000d0609, 0x000e0b05, 0x000e0b0d, 0x000f0e07, 0x000f0e0f, 0x000f0f08, 0x000f0f10, 0x000f1009, 0x000f1011, 0x0010130b, 0x00101313, 0x00102018, 0x00102020, 0x00102119, 0x00102121, 0x0010221a, 0x00102222, 0x0010231b, 0x00102323, 0x0010241c, 0x00102424, 0x0010251d, 0x00102525, 0x0010261e, 0x00102626, 0x0010271f, 0x00102727, 0x00102820, 0x00102828, 0x00102921, 0x00102929, 0x00102b23, 0x00102b2b, 0x00102c24, 0x00102c2c, 0x00102e26, 0x00102e2e, 0x00102f27, 0x00102f2f, 0x00103028, 0x00103030, 0x00103129, 0x00103131, 0x0010322a, 0x00103232, 0x0010332b, 0x00103333, 0x0010342c, 0x00103434, 0x0010352d, 0x00103535, 0x0010362e, 0x00103636, 0x0010372f, 0x00103737, 0x00103830, 0x00103838, 0x00103931, 0x00103939, 0x00103a32, 0x00103a3a, 0x00103b33, 0x00103b3b, 0x00103c34, 0x00103c3c, 0x00103d35, 0x00103d3d, 0x00103e36, 0x00103e3e, 0x00103f37, 0x00103f3f, 0x00104038, 0x00104040, 0x00104139, 0x00104141, 0x0010423a, 0x00104242, 0x0010433b, 0x00104343, 0x0010443c, 0x00104444, 0x0010453d, 0x00104545, 0x0010463e, 0x00104646, 0x0010473f, 0x00104747, 0x00104840, 0x00104848, 0x00104941, 0x00104949, 0x00104a42, 0x00104a4a, 0x00104b43, 0x00104b4b, 0x00104c44, 0x00104c4c, 0x00104d45, 0x00104d4d, 0x00104e46, 0x00104e4e, 0x00104f47, 0x00104f4f, 0x00105048, 0x00105050, 0x00105149, 0x00105151, 0x0010524a, 0x00105252, 0x0010534b, 0x00105353, 0x0010544c, 0x00105454, 0x0010554d, 0x00105555, 0x0010564e, 0x00105656, 0x0010574f, 0x00105757, 0x00105850, 0x00105858, 0x00105951, 0x00105959, 0x00105a52, 0x00105a5a, 0x00105b53, 0x00105b5b, 0x00105c54, 0x00105c5c, 0x00105d55, 0x00105d5d, 0x00105e56, 0x00105e5e, 0x00105f57, 0x00105f5f, 0x00106058, 0x00106060, 0x00106159, 0x00106161, 0x0010625a, 0x00106262, 0x0010635b, 0x00106363, 0x0010645c, 0x00106464, 0x0010655d, 0x00106565, 0x0010665e, 0x00106666, 0x0010675f, 0x00106767, 0x00106860, 0x00106868, 0x00106961, 0x00106969, 0x00106a62, 0x00106a6a, 0x00106b63, 0x00106b6b, 0x00106c64, 0x00106c6c, 0x00106d65, 0x00106d6d, 0x00106e66, 0x00106e6e, 0x00106f67, 0x00106f6f, 0x00107068, 0x00107070, 0x00107169, 0x00107171, 0x0010726a, 0x00107272, 0x0010736b, 0x00107373, 0x0010746c, 0x00107474, 0x0010756d, 0x00107575, 0x0010766e, 0x00107676, 0x0010776f, 0x00107777, 0x00107870, 0x00107878, 0x00107971, 0x00107979, 0x00107a72, 0x00107a7a, 0x00107b73, 0x00107b7b, 0x00107c74, 0x00107c7c, 0x00107d75, 0x00107d7d, 0x00107e76, 0x00107e7e, 0x00107f77, 0x00107f7f, 0x00108078, 0x00108080, 0x00108179, 0x00108181, 0x0010827a, 0x00108282, 0x0010837b, 0x00108383, 0x0010847c, 0x00108484, 0x0010857d, 0x00108585, 0x0010867e, 0x00108686, 0x0010877f, 0x00108787, 0x00108880, 0x00108888, 0x00108981, 0x00108989, 0x00108a82, 0x00108a8a, 0x00108b83, 0x00108b8b, 0x00108c84, 0x00108c8c, 0x00108d85, 0x00108d8d, 0x00108e86, 0x00108e8e, 0x00108f87, 0x00108f8f, 0x00109088, 0x00109090, 0x00109189, 0x00109191, 0x0010928a, 0x00109292, 0x0010938b, 0x00109393, 0x0010948c, 0x00109494, 0x0010958d, 0x00109595, 0x0010968e, 0x00109696, 0x0010978f, 0x00109797, 0x00109890, 0x00109898, 0x00109991, 0x00109999, 0x00109a92, 0x00109a9a, 0x00109b93, 0x00109b9b, 0x00109c94, 0x00109c9c, 0x00109d95, 0x00109d9d, 0x00109e96, 0x00109e9e, 0x00109f97, 0x00109f9f, 0x0010a099, 0x0010a19a, 0x0010a29b, 0x0010a39c, 0x0010a49d, 0x0010a59e, 0x0010a69f, 0x0010a7a0, 0x0010a8a1, 0x0010a9a2, 0x0010aaa3, 0x0010aba4, 0x0010aca5, 0x0010ada6, 0x0010aea7, 0x0010afa8, 0x0010b0a9, 0x0010b1aa, 0x0010b2ab, 0x0010b3ac, 0x0010b4ad, 0x0010b5ae, 0x0010b6af, 0x0010b7b0, 0x0010b8b1, 0x0010b9b2, 0x0010bab3, 0x0010bbb4, 0x0010bcb5, 0x0010bdb6, 0x0010beb7, 0x0010bfb8, 0x0010c0b9, 0x0010c1ba, 0x0010c2bb, 0x0010c3bc, 0x0010c4bd, 0x0010c5be, 0x0010c6bf, 0x0010c7c0, 0x0010c8c1, 0x0010c9c2, 0x0010cac3, 0x0010cbc4, 0x0010ccc5, 0x0010cdc6, 0x0010cec7, 0x0010cfc8, 0x0010d0c9, 0x0010d1ca, 0x0010d2cb, 0x0010d3cc, 0x0010d4cd, 0x0010d5ce, 0x0010d6cf, 0x0010d7d0, 0x0010d8d1, 0x0010d9d2, 0x0010dad3, 0x0010dbd4, 0x0010dcd5, 0x0010ddd6, 0x0010ded7, 0x0010dfd8, 0x00112f2e, 0x00122e2d, 0x00c98f8d],
    values: [0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000007, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000005, 0x00000001, 0x00000001, 0x00000000],
    maximum: 0x00c98f8d
};

pub global CAPTURE_1_MAX_LENGTH: u32 = 64;
pub global NUM_CAPTURE_GROUPS: u32 = 1;

/**
 * Constrains a start state to be valid
 * @dev start states are hardcoded in this function - "(start_state - {state})" for each start
 *      example: `(start_state - 0) * (start_state - 1) * (start_state - 2)` means 0, 1, or 2
 *      are valid first states
 * 
 * @param start_state - The start state of the NFA
 */
fn check_start_state(start_state: Field) {
    let valid_start_state = (start_state - 0) * (start_state - 1) * (start_state - 3);
    assert(valid_start_state == 0, "Invalid start state");
}
    
/**
 * Constrains the recognition of accept_state being reached. If an aceppt state is reached,
 *      ensures asserted traversal path is valid
 * @dev accept states are hardcoded in this function - "(next_state - {state})" for each accept
 *      example: `(next_state - 19) * (next_state - 20) * (next_state - 21)` means 19, 20, or 21
 *      are valid accept states
 * 
 * @param next_state - The asserted next state of the NFA
 * @param haystack_index - The index being operated on in the haystack
 * @param asserted_match_length - The asserted traversal path length
 * @return - 0 if accept_state is reached, nonzero otherwise
 */
fn check_accept_state(
    next_state: Field,
    haystack_index: Field, 
    asserted_match_length: Field
) -> Field {
    // check if the next state is an accept state
    let accept_state_reached = (next_state - 18);
    let accept_state_reached_bool = (accept_state_reached == 0) as Field;

    // check if the haystack index is the asserted match length
    // should equal 1 since haystack_index should be 1 less than asserted_match)length
    let asserted_path_traversed = (asserted_match_length - haystack_index == 1) as Field;

    // if accept state reached, check asserted path traversed. Else return 1
    let valid_condition =
        (1 - accept_state_reached_bool) + (accept_state_reached_bool * asserted_path_traversed);
    assert(valid_condition == 1, "Accept state reached but not at asserted path end");

    // return accept_state reached value
    accept_state_reached
}

/**
 * FromAllRegex matching function
 * Regex: (?:\r\n|^)from:([^\r\n]+)\r\n
 * @param in_haystack - The input haystack to search from
 * @param match_start - The start index in the haystack for the subarray to match from
 * @param match_length - The length of the subarray to extract from haystack
 * @param current_states - The current states of the NFA at each index in the match subarray
 * @param next_states - The next states of the NFA at each index in the match subarray
 * @param capture_group_<group>_ids - The ids of the capture groups in the match subarray
 * @param capture_group_<group>_starts - The start positions of the capture groups in the match subarray
 * @param capture_group_start_indices - The start indices of the capture groups in the match subarray
 * @return - tuple of substring captures as dictated by the regular expression
 */
pub fn regex_match<let MAX_HAYSTACK_LEN: u32, let MAX_MATCH_LEN: u32>(
    in_haystack: [u8; MAX_HAYSTACK_LEN],
    match_start: u32,
    match_length: u32,
    current_states: [Field; MAX_MATCH_LEN],
    next_states: [Field; MAX_MATCH_LEN],
    capture_group_1_id: [Field; MAX_MATCH_LEN],
    capture_group_1_start: [Field; MAX_MATCH_LEN],
    capture_group_start_indices: [Field; NUM_CAPTURE_GROUPS],
) -> (BoundedVec<u8, CAPTURE_1_MAX_LENGTH>) {
    // resize haystack 
    let haystack: [u8; MAX_MATCH_LEN] = select_subarray::<MAX_HAYSTACK_LEN, MAX_MATCH_LEN>(in_haystack, match_start, match_length);

    check_start_state(current_states[0]);
    for i in 0..MAX_MATCH_LEN-1 {
        // match length - 1 since current states should be 1 less than next states
        let in_range = (i < match_length - 1) as Field;
        let matching_states = current_states[i + 1] - next_states[i];
        assert(in_range * matching_states == 0, "Invalid Transition Input");
    }
    let mut reached_end_state = 1;
    for i in 0..MAX_MATCH_LEN {
        let active_capture_groups_at_index = [capture_group_1_id[i]];
        let active_capture_groups_starts_at_index = [capture_group_1_start[i]];
        check_transition_with_captures(
            TRANSITION_TABLE,
            haystack[i] as Field,
            current_states[i],
            next_states[i],
            active_capture_groups_at_index,
            active_capture_groups_starts_at_index,
            reached_end_state
        );
        reached_end_state = reached_end_state * check_accept_state(next_states[i], i as Field, match_length as Field);
    }
    assert(reached_end_state == 0, "Did not reach a valid end state");

    // Capture Group 1
    let capture_1 = capture_substring::<MAX_MATCH_LEN, CAPTURE_1_MAX_LENGTH, 1>(
       haystack,
       capture_group_1_id,
       capture_group_1_start,
       capture_group_start_indices[0] - (match_start as Field),
    );

    (capture_1)
}

