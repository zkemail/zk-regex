use crate::utils::{
   sparse_array::SparseArray,
   transitions::check_transition
};

global TRANSITION_TABLE: SparseArray<688, Field> = SparseArray {
    keys: [0x00000000, 0x0002110f, 0x00021110, 0x0003100f, 0x00047b77, 0x00047b7a, 0x00057f7e, 0x00066e6d, 0x00077877, 0x00087574, 0x00097574, 0x000a8887, 0x000b9698, 0x000b9699, 0x000b9799, 0x000b979a, 0x000b989a, 0x000b989b, 0x000b999b, 0x000b999c, 0x000b9a9c, 0x000b9a9d, 0x000b9b9d, 0x000b9b9e, 0x000b9c9e, 0x000b9c9f, 0x000b9d9f, 0x000b9da0, 0x000b9ea0, 0x000b9ea1, 0x000b9fa1, 0x000b9fa2, 0x000ba0a2, 0x000ba0a3, 0x000ba1a3, 0x000ba1a4, 0x000ba2a4, 0x000ba2a5, 0x000ba3a5, 0x000ba3a6, 0x000ba4a6, 0x000ba4a7, 0x000ba5a7, 0x000ba5a8, 0x000ba6a8, 0x000ba6a9, 0x000ba7a9, 0x000ba7aa, 0x000ba8aa, 0x000ba8ab, 0x000ba9ab, 0x000ba9ac, 0x000baaac, 0x000baaad, 0x000babad, 0x000babae, 0x000bacae, 0x000bacaf, 0x000badaf, 0x000badb0, 0x000baeb0, 0x000baeb1, 0x000bafb1, 0x000bafb2, 0x000bb0b2, 0x000bb0b3, 0x000bb1b3, 0x000bb1b4, 0x000bb2b4, 0x000bb2b5, 0x000bb3b5, 0x000bb3b6, 0x000bb4b6, 0x000bb4b7, 0x000bb5b7, 0x000bb5b8, 0x000bb6b7, 0x000bb6b8, 0x000bb7b8, 0x000bb7b9, 0x000bb8b9, 0x000bb8ba, 0x000bb9ba, 0x000bb9bb, 0x000bbabb, 0x000bbabc, 0x000bbbbc, 0x000bbbbd, 0x000bbcbd, 0x000bbcbe, 0x000bbdbe, 0x000bbdbf, 0x000bbebf, 0x000bbec0, 0x000bbfc0, 0x000bbfc1, 0x000bc0c1, 0x000bc0c2, 0x000bc1c2, 0x000bc1c3, 0x000bc2c3, 0x000bc2c4, 0x000bc3c4, 0x000bc3c5, 0x000bc4c5, 0x000bc4c6, 0x000bc5c6, 0x000bc5c7, 0x000bc6c7, 0x000bc6c8, 0x000bc7c8, 0x000bc7c9, 0x000bc8c9, 0x000bc8ca, 0x000bc9ca, 0x000bc9cb, 0x000bcacb, 0x000bcacc, 0x000bcbcc, 0x000bcbcd, 0x000bcccd, 0x000bccce, 0x000bcdce, 0x000bcdcf, 0x000bcecf, 0x000bced0, 0x000bcfd0, 0x000bcfd1, 0x000bd0d1, 0x000bd0d2, 0x000bd1d2, 0x000bd1d3, 0x000bd2d3, 0x000bd2d4, 0x000bd3d4, 0x000bd3d5, 0x000bd4d5, 0x000bd4d6, 0x000bd5d6, 0x000bd5d7, 0x000bd8df, 0x000bd8e0, 0x000bd9e0, 0x000bd9e1, 0x000bdae1, 0x000bdae2, 0x000bdbe2, 0x000bdbe3, 0x000bdce3, 0x000bdce4, 0x000bdde4, 0x000bdde5, 0x000bdee5, 0x000bdee6, 0x000bdfe6, 0x000bdfe7, 0x000be0e7, 0x000be0e8, 0x000be1e8, 0x000be1e9, 0x000be2e9, 0x000be2ea, 0x000be3ea, 0x000be3eb, 0x000be4eb, 0x000be4ec, 0x000be5ec, 0x000be5ed, 0x000be6ed, 0x000be6ee, 0x000be7ee, 0x000be7ef, 0x000be8ef, 0x000be8f0, 0x000be9f0, 0x000be9f1, 0x000beaf1, 0x000beaf2, 0x000bebf2, 0x000bebf3, 0x000becf3, 0x000becf4, 0x000bedf4, 0x000bedf5, 0x000beef5, 0x000beef6, 0x000beff6, 0x000beff7, 0x000bf0f7, 0x000bf0f8, 0x000bf1f8, 0x000bf1f9, 0x000bf2f9, 0x000bf2fa, 0x000bf3fa, 0x000bf3fb, 0x000bf4fb, 0x000bf4fc, 0x000bf5fc, 0x000bf5fd, 0x000cf8fe, 0x000cf8ff, 0x000d9a9d, 0x000d9a9e, 0x000d9b9e, 0x000d9b9f, 0x000d9c9f, 0x000d9ca0, 0x000d9da0, 0x000d9da1, 0x000d9ea1, 0x000d9ea2, 0x000d9fa2, 0x000d9fa3, 0x000da0a3, 0x000da0a4, 0x000da1a4, 0x000da1a5, 0x000da2a5, 0x000da2a6, 0x000da3a6, 0x000da3a7, 0x000da4a7, 0x000da4a8, 0x000da5a8, 0x000da5a9, 0x000da6a9, 0x000da6aa, 0x000da7aa, 0x000da7ab, 0x000da8ab, 0x000da8ac, 0x000da9ac, 0x000da9ad, 0x000daaac, 0x000daaad, 0x000dabad, 0x000dabae, 0x000dacae, 0x000dacaf, 0x000dadaf, 0x000dadb0, 0x000daeb0, 0x000daeb1, 0x000dafb1, 0x000dafb2, 0x000db0b2, 0x000db0b3, 0x000db1b3, 0x000db1b4, 0x000db2b4, 0x000db2b5, 0x000db3b5, 0x000db3b6, 0x000db4b6, 0x000db4b7, 0x000db5b7, 0x000db5b8, 0x000db6b8, 0x000db6b9, 0x000db7b9, 0x000db7ba, 0x000db8ba, 0x000db8bb, 0x000db9bb, 0x000db9bc, 0x000dbabc, 0x000dbabd, 0x000dbbbd, 0x000dbbbe, 0x000dbcbe, 0x000dbcbf, 0x000dbdbf, 0x000dbdc0, 0x000dbec0, 0x000dbec1, 0x000dbfc1, 0x000dbfc2, 0x000dc0c2, 0x000dc0c3, 0x000dc1c3, 0x000dc1c4, 0x000dc2c4, 0x000dc2c5, 0x000dc3c5, 0x000dc3c6, 0x000dc4c6, 0x000dc4c7, 0x000dc5c7, 0x000dc5c8, 0x000dc6c8, 0x000dc6c9, 0x000dc7c9, 0x000dc7ca, 0x000dc8ca, 0x000dc8cb, 0x000dc9cb, 0x000dc9cc, 0x000dcacc, 0x000dcacd, 0x000dcbcd, 0x000dcbce, 0x000dccce, 0x000dcccf, 0x000dcdcf, 0x000dcdd0, 0x000dced0, 0x000dced1, 0x000dcfd1, 0x000dcfd2, 0x000dd0d2, 0x000dd0d3, 0x000dd1d3, 0x000dd1d4, 0x000dd2d4, 0x000dd2d5, 0x000dd3d5, 0x000dd3d6, 0x000dd4d6, 0x000dd4d7, 0x000dd5d7, 0x000dd5d8, 0x000dd6d8, 0x000dd6d9, 0x000dd7d9, 0x000dd7da, 0x000dd8da, 0x000dd8db, 0x000dd9db, 0x000dd9dc, 0x000dfc00, 0x000dfc01, 0x000dfd01, 0x000dfd02, 0x000dfe02, 0x000dfe03, 0x000dff03, 0x000dff04, 0x000e0004, 0x000e0005, 0x000e0105, 0x000e0106, 0x000e0206, 0x000e0207, 0x000e0307, 0x000e0308, 0x000e0408, 0x000e0409, 0x000e0509, 0x000e050a, 0x000e060a, 0x000e060b, 0x000e070b, 0x000e070c, 0x000e090d, 0x000e090e, 0x000e0a0e, 0x000e0a0f, 0x000f0a0d, 0x000f0a0e, 0x00100f11, 0x00100f12, 0x00111213, 0x00111214, 0x00111314, 0x00111315, 0x00111415, 0x00111416, 0x00121717, 0x00121718, 0x00125e56, 0x00132625, 0x00132626, 0x00132726, 0x00132727, 0x00132827, 0x00132828, 0x00132928, 0x00132929, 0x00132a29, 0x00132a2a, 0x00132b2a, 0x00132b2b, 0x00132c2b, 0x00132c2c, 0x00132d2c, 0x00132d2d, 0x00132e2d, 0x00132e2e, 0x00132f2e, 0x00132f2f, 0x00133130, 0x00133131, 0x00133231, 0x00133232, 0x00133433, 0x00133434, 0x00133534, 0x00133535, 0x00133635, 0x00133636, 0x00133736, 0x00133737, 0x00133837, 0x00133838, 0x00133938, 0x00133939, 0x00133a39, 0x00133a3a, 0x00133b3a, 0x00133b3b, 0x00133c3b, 0x00133c3c, 0x00133d3c, 0x00133d3d, 0x00133e3d, 0x00133e3e, 0x00133f3e, 0x00133f3f, 0x0013403f, 0x00134040, 0x00134140, 0x00134141, 0x00134241, 0x00134242, 0x00134342, 0x00134343, 0x00134443, 0x00134444, 0x00134544, 0x00134545, 0x00134645, 0x00134646, 0x00134746, 0x00134747, 0x00134847, 0x00134848, 0x00134948, 0x00134949, 0x00134a49, 0x00134a4a, 0x00134b4a, 0x00134b4b, 0x00134c4b, 0x00134c4c, 0x00134d4c, 0x00134d4d, 0x00134e4d, 0x00134e4e, 0x00134f4e, 0x00134f4f, 0x0013504f, 0x00135050, 0x00135150, 0x00135151, 0x00135251, 0x00135252, 0x00135352, 0x00135353, 0x00135453, 0x00135454, 0x00135554, 0x00135555, 0x00135655, 0x00135656, 0x00135756, 0x00135757, 0x00135857, 0x00135858, 0x00135958, 0x00135959, 0x00135a59, 0x00135a5a, 0x00135b5a, 0x00135b5b, 0x00135c5b, 0x00135c5c, 0x00135d5c, 0x00135d5d, 0x00135e5d, 0x00135e5e, 0x00135f5e, 0x00135f5f, 0x0013605f, 0x00136060, 0x00136160, 0x00136161, 0x00136261, 0x00136262, 0x00136362, 0x00136363, 0x00136463, 0x00136464, 0x00136564, 0x00136565, 0x00136665, 0x00136666, 0x00136766, 0x00136767, 0x00136867, 0x00136868, 0x00136968, 0x00136969, 0x00136a69, 0x00136a6a, 0x00136b6a, 0x00136b6b, 0x00136c6b, 0x00136c6c, 0x00136d6c, 0x00136d6d, 0x00136e6d, 0x00136e6e, 0x00136f6e, 0x00136f6f, 0x0013706f, 0x00137070, 0x00137170, 0x00137171, 0x00137271, 0x00137272, 0x00137372, 0x00137373, 0x00137473, 0x00137474, 0x00137574, 0x00137575, 0x00137675, 0x00137676, 0x00137776, 0x00137777, 0x00137877, 0x00137878, 0x00137978, 0x00137979, 0x00137a79, 0x00137a7a, 0x00137b7a, 0x00137b7b, 0x00137c7b, 0x00137c7c, 0x00137d7c, 0x00137d7d, 0x00137e7d, 0x00137e7e, 0x00137f7e, 0x00137f7f, 0x0013807f, 0x00138080, 0x00138180, 0x00138181, 0x00138281, 0x00138282, 0x00138382, 0x00138383, 0x00138483, 0x00138484, 0x00138584, 0x00138585, 0x00138685, 0x00138686, 0x00138786, 0x00138787, 0x00138887, 0x00138888, 0x00138988, 0x00138989, 0x00138a89, 0x00138a8a, 0x00138b8a, 0x00138b8b, 0x00138c8b, 0x00138c8c, 0x00138d8c, 0x00138d8d, 0x00138e8d, 0x00138e8e, 0x00138f8e, 0x00138f8f, 0x0013908f, 0x00139090, 0x00139190, 0x00139191, 0x00139291, 0x00139292, 0x00139392, 0x00139393, 0x00139493, 0x00139494, 0x00139594, 0x00139595, 0x00139695, 0x00139696, 0x00139796, 0x00139797, 0x00139897, 0x00139898, 0x00139998, 0x00139999, 0x00139a99, 0x00139a9a, 0x00139b9a, 0x00139b9b, 0x00139c9b, 0x00139c9c, 0x00139d9c, 0x00139d9d, 0x00139e9d, 0x00139e9e, 0x00139f9e, 0x00139f9f, 0x0013a09f, 0x0013a0a0, 0x0013a1a0, 0x0013a1a1, 0x0013a2a1, 0x0013a2a2, 0x0013a3a2, 0x0013a3a3, 0x0013a4a3, 0x0013a4a4, 0x0013a5a4, 0x0013a5a5, 0x0013a69e, 0x0013a79f, 0x0013a8a0, 0x0013a9a1, 0x0013aaa2, 0x0013aba3, 0x0013aca4, 0x0013ada5, 0x0013aea6, 0x0013afa7, 0x0013b0a8, 0x0013b1a9, 0x0013b2aa, 0x0013b3ab, 0x0013b4ac, 0x0013b5ad, 0x0013b6ae, 0x0013b7af, 0x0013b8b0, 0x0013b9b1, 0x0013bab2, 0x0013bbb3, 0x0013bcb4, 0x0013bdb5, 0x0013beb6, 0x0013bfb7, 0x0013c0b8, 0x0013c1b9, 0x0013c2ba, 0x0013c3bb, 0x0013c4bc, 0x0013c5bd, 0x0013c6be, 0x0013c7bf, 0x0013c8c0, 0x0013c9c1, 0x0013cac2, 0x0013cbc3, 0x0013ccc4, 0x0013cdc5, 0x0013cec6, 0x0013cfc7, 0x0013d0c8, 0x0013d1c9, 0x0013d2ca, 0x0013d3cb, 0x0013d4cc, 0x0013d5cd, 0x0013d6ce, 0x0013d7cf, 0x0013d8d0, 0x0013d9d1, 0x0013dad2, 0x0013dbd3, 0x0013dcd4, 0x0013ddd5, 0x0013ded6, 0x0013dfd7, 0x0013e0d8, 0x0013e1d9, 0x0013e2da, 0x0013e3db, 0x0013e4dc, 0x0013e5dd, 0x00143534, 0x00153433, 0x00ca91f2],
    values: [0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000],
    maximum: 0x00ca91f2
};


/**
 * Constrains a start state to be valid
 * @dev start states are hardcoded in this function - "(start_state - {state})" for each start
 *      example: `(start_state - 0) * (start_state - 1) * (start_state - 2)` means 0, 1, or 2
 *      are valid first states
 * 
 * @param start_state - The start state of the NFA
 */
fn check_start_state(start_state: Field) {
    let valid_start_state = (start_state - 0) * (start_state - 1) * (start_state - 3);
    assert(valid_start_state == 0, "Invalid start state");
}
    
/**
 * Constrains the recognition of accept_state being reached. If an aceppt state is reached,
 *      ensures asserted traversal path is valid
 * @dev accept states are hardcoded in this function - "(next_state - {state})" for each accept
 *      example: `(next_state - 19) * (next_state - 20) * (next_state - 21)` means 19, 20, or 21
 *      are valid accept states
 * 
 * @param next_state - The asserted next state of the NFA
 * @param haystack_index - The index being operated on in the haystack
 * @param asserted_transition_length - The asserted traversal path length
 * @return - 0 if accept_state is reached, nonzero otherwise
 */
fn check_accept_state(
    next_state: Field,
    haystack_index: Field, 
    asserted_transition_length: Field
) -> Field {
    // check if the next state is an accept state
    let accept_state_reached = (next_state - 21);
    let accept_state_reached_bool = (accept_state_reached == 0) as Field;

    // check if the haystack index is the asserted transition length
    // should equal 1 since haystack_index should be 1 less than asserted_transition length
    let asserted_path_traversed = (asserted_transition_length - haystack_index == 1) as Field;

    // if accept state reached, check asserted path traversed. Else return 1
    let valid_condition =
        (1 - accept_state_reached_bool) + (accept_state_reached_bool * asserted_path_traversed);
    assert(valid_condition == 1, "Accept state reached but not at asserted path end");

    // return accept_state reached value
    accept_state_reached
}

pub fn regex_match<let MAX_HAYSTACK_LENTH: u32>(
    haystack: [u8; MAX_HAYSTACK_LENTH],
    current_states: [Field; MAX_HAYSTACK_LENTH],
    next_states: [Field; MAX_HAYSTACK_LENTH],
    transition_length: u32,
) {
    // regex:"(?:\r\n|^)subject:[^\r\n]+\r\n"
    let mut reached_end_state = 1;
    check_start_state(current_states[0]);
    for i in 0..MAX_HAYSTACK_LENTH-1 {
        // transition length - 1 since current states should be 1 less than next states
        let in_range = (i < transition_length - 1) as Field;
        let matching_states = current_states[i + 1] - next_states[i];
        assert(in_range * matching_states == 0, "Invalid Transition Input");
    }
    for i in 0..MAX_HAYSTACK_LENTH {
        check_transition(
            TRANSITION_TABLE,
            haystack[i] as Field,
            current_states[i],
            next_states[i],
            reached_end_state
        );
        reached_end_state = reached_end_state * check_accept_state(
            next_states[i],
            i as Field,
            transition_length as Field,
        );
    }
    assert(reached_end_state == 0, "Did not reach a valid end state");
}

