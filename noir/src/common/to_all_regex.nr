use crate::utils::{
   select_subarray,
   captures::capture_substring,
   sparse_array::SparseArray,
   transitions::check_transition_with_captures
};

global TRANSITION_TABLE: SparseArray<683, Field> = SparseArray {
    keys: [0x00000000, 0x0002110f, 0x00021110, 0x0003100f, 0x00047c78, 0x00047c7b, 0x00057978, 0x00064645, 0x00078e90, 0x00078e91, 0x00078f91, 0x00078f92, 0x00079092, 0x00079093, 0x00079193, 0x00079194, 0x00079294, 0x00079295, 0x00079395, 0x00079396, 0x00079496, 0x00079497, 0x00079597, 0x00079598, 0x00079698, 0x00079699, 0x00079799, 0x0007979a, 0x0007989a, 0x0007989b, 0x0007999b, 0x0007999c, 0x00079a9c, 0x00079a9d, 0x00079b9d, 0x00079b9e, 0x00079c9e, 0x00079c9f, 0x00079d9f, 0x00079da0, 0x00079ea0, 0x00079ea1, 0x00079fa1, 0x00079fa2, 0x0007a0a2, 0x0007a0a3, 0x0007a1a3, 0x0007a1a4, 0x0007a2a4, 0x0007a2a5, 0x0007a3a5, 0x0007a3a6, 0x0007a4a6, 0x0007a4a7, 0x0007a5a7, 0x0007a5a8, 0x0007a6a8, 0x0007a6a9, 0x0007a7a9, 0x0007a7aa, 0x0007a8aa, 0x0007a8ab, 0x0007a9ab, 0x0007a9ac, 0x0007aaac, 0x0007aaad, 0x0007abad, 0x0007abae, 0x0007acae, 0x0007acaf, 0x0007adaf, 0x0007adb0, 0x0007aeaf, 0x0007aeb0, 0x0007afb0, 0x0007afb1, 0x0007b0b1, 0x0007b0b2, 0x0007b1b2, 0x0007b1b3, 0x0007b2b3, 0x0007b2b4, 0x0007b3b4, 0x0007b3b5, 0x0007b4b5, 0x0007b4b6, 0x0007b5b6, 0x0007b5b7, 0x0007b6b7, 0x0007b6b8, 0x0007b7b8, 0x0007b7b9, 0x0007b8b9, 0x0007b8ba, 0x0007b9ba, 0x0007b9bb, 0x0007babb, 0x0007babc, 0x0007bbbc, 0x0007bbbd, 0x0007bcbd, 0x0007bcbe, 0x0007bdbe, 0x0007bdbf, 0x0007bebf, 0x0007bec0, 0x0007bfc0, 0x0007bfc1, 0x0007c0c1, 0x0007c0c2, 0x0007c1c2, 0x0007c1c3, 0x0007c2c3, 0x0007c2c4, 0x0007c3c4, 0x0007c3c5, 0x0007c4c5, 0x0007c4c6, 0x0007c5c6, 0x0007c5c7, 0x0007c6c7, 0x0007c6c8, 0x0007c7c8, 0x0007c7c9, 0x0007c8c9, 0x0007c8ca, 0x0007c9ca, 0x0007c9cb, 0x0007cacb, 0x0007cacc, 0x0007cbcc, 0x0007cbcd, 0x0007cccd, 0x0007ccce, 0x0007cdce, 0x0007cdcf, 0x0007d0cf, 0x0007d0d7, 0x0007d1d0, 0x0007d1d8, 0x0007d2d1, 0x0007d2d9, 0x0007d3d2, 0x0007d3da, 0x0007d4d3, 0x0007d4db, 0x0007d5d4, 0x0007d5dc, 0x0007d6d5, 0x0007d6dd, 0x0007d7d6, 0x0007d7de, 0x0007d8d7, 0x0007d8df, 0x0007d9d8, 0x0007d9e0, 0x0007dad9, 0x0007dae1, 0x0007dbda, 0x0007dbe2, 0x0007dcdb, 0x0007dce3, 0x0007dddc, 0x0007dde4, 0x0007dedd, 0x0007dee5, 0x0007dfde, 0x0007dfe6, 0x0007e0df, 0x0007e0e7, 0x0007e1e0, 0x0007e1e8, 0x0007e2e1, 0x0007e2e9, 0x0007e3e2, 0x0007e3ea, 0x0007e4e3, 0x0007e4eb, 0x0007e5e4, 0x0007e5ec, 0x0007e6e5, 0x0007e6ed, 0x0007e7e6, 0x0007e7ee, 0x0007e8e7, 0x0007e8ef, 0x0007e9e8, 0x0007e9f0, 0x0007eae9, 0x0007eaf1, 0x0007ebea, 0x0007ebf2, 0x0007eceb, 0x0007ecf3, 0x0007edec, 0x0007edf4, 0x0008f0ee, 0x0008f0f6, 0x00099295, 0x00099296, 0x00099396, 0x00099397, 0x00099497, 0x00099498, 0x00099598, 0x00099599, 0x00099699, 0x0009969a, 0x0009979a, 0x0009979b, 0x0009989b, 0x0009989c, 0x0009999c, 0x0009999d, 0x00099a9d, 0x00099a9e, 0x00099b9e, 0x00099b9f, 0x00099c9f, 0x00099ca0, 0x00099da0, 0x00099da1, 0x00099ea1, 0x00099ea2, 0x00099fa2, 0x00099fa3, 0x0009a0a3, 0x0009a0a4, 0x0009a1a4, 0x0009a1a5, 0x0009a2a4, 0x0009a2a5, 0x0009a3a5, 0x0009a3a6, 0x0009a4a6, 0x0009a4a7, 0x0009a5a7, 0x0009a5a8, 0x0009a6a8, 0x0009a6a9, 0x0009a7a9, 0x0009a7aa, 0x0009a8aa, 0x0009a8ab, 0x0009a9ab, 0x0009a9ac, 0x0009aaac, 0x0009aaad, 0x0009abad, 0x0009abae, 0x0009acae, 0x0009acaf, 0x0009adaf, 0x0009adb0, 0x0009aeb0, 0x0009aeb1, 0x0009afb1, 0x0009afb2, 0x0009b0b2, 0x0009b0b3, 0x0009b1b3, 0x0009b1b4, 0x0009b2b4, 0x0009b2b5, 0x0009b3b5, 0x0009b3b6, 0x0009b4b6, 0x0009b4b7, 0x0009b5b7, 0x0009b5b8, 0x0009b6b8, 0x0009b6b9, 0x0009b7b9, 0x0009b7ba, 0x0009b8ba, 0x0009b8bb, 0x0009b9bb, 0x0009b9bc, 0x0009babc, 0x0009babd, 0x0009bbbd, 0x0009bbbe, 0x0009bcbe, 0x0009bcbf, 0x0009bdbf, 0x0009bdc0, 0x0009bec0, 0x0009bec1, 0x0009bfc1, 0x0009bfc2, 0x0009c0c2, 0x0009c0c3, 0x0009c1c3, 0x0009c1c4, 0x0009c2c4, 0x0009c2c5, 0x0009c3c5, 0x0009c3c6, 0x0009c4c6, 0x0009c4c7, 0x0009c5c7, 0x0009c5c8, 0x0009c6c8, 0x0009c6c9, 0x0009c7c9, 0x0009c7ca, 0x0009c8ca, 0x0009c8cb, 0x0009c9cb, 0x0009c9cc, 0x0009cacc, 0x0009cacd, 0x0009cbcd, 0x0009cbce, 0x0009ccce, 0x0009cccf, 0x0009cdcf, 0x0009cdd0, 0x0009ced0, 0x0009ced1, 0x0009cfd1, 0x0009cfd2, 0x0009d0d2, 0x0009d0d3, 0x0009d1d3, 0x0009d1d4, 0x0009f3f0, 0x0009f3f8, 0x0009f4f1, 0x0009f4f9, 0x0009f5f2, 0x0009f5fa, 0x0009f6f3, 0x0009f6fb, 0x0009f7f4, 0x0009f7fc, 0x0009f8f5, 0x0009f8fd, 0x0009f9f6, 0x0009f9fe, 0x0009faf7, 0x0009faff, 0x0009fbf8, 0x0009fc00, 0x0009fcf9, 0x0009fd01, 0x0009fdfa, 0x0009fe02, 0x0009fefb, 0x0009ff03, 0x000a00fd, 0x000a0105, 0x000a01fe, 0x000a0206, 0x000b01fd, 0x000b0205, 0x000c0701, 0x000c0709, 0x000d0a03, 0x000d0a0b, 0x000d0b04, 0x000d0b0c, 0x000d0c05, 0x000d0c0d, 0x000e0f07, 0x000e0f0f, 0x000e1c14, 0x000e1c1c, 0x000e1d15, 0x000e1d1d, 0x000e1e16, 0x000e1e1e, 0x000e1f17, 0x000e1f1f, 0x000e2018, 0x000e2020, 0x000e2119, 0x000e2121, 0x000e221a, 0x000e2222, 0x000e231b, 0x000e2323, 0x000e241c, 0x000e2424, 0x000e251d, 0x000e2525, 0x000e271f, 0x000e2727, 0x000e2820, 0x000e2828, 0x000e2a22, 0x000e2a2a, 0x000e2b23, 0x000e2b2b, 0x000e2c24, 0x000e2c2c, 0x000e2d25, 0x000e2d2d, 0x000e2e26, 0x000e2e2e, 0x000e2f27, 0x000e2f2f, 0x000e3028, 0x000e3030, 0x000e3129, 0x000e3131, 0x000e322a, 0x000e3232, 0x000e332b, 0x000e3333, 0x000e342c, 0x000e3434, 0x000e352d, 0x000e3535, 0x000e362e, 0x000e3636, 0x000e372f, 0x000e3737, 0x000e3830, 0x000e3838, 0x000e3931, 0x000e3939, 0x000e3a32, 0x000e3a3a, 0x000e3b33, 0x000e3b3b, 0x000e3c34, 0x000e3c3c, 0x000e3d35, 0x000e3d3d, 0x000e3e36, 0x000e3e3e, 0x000e3f37, 0x000e3f3f, 0x000e4038, 0x000e4040, 0x000e4139, 0x000e4141, 0x000e423a, 0x000e4242, 0x000e433b, 0x000e4343, 0x000e443c, 0x000e4444, 0x000e453d, 0x000e4545, 0x000e463e, 0x000e4646, 0x000e473f, 0x000e4747, 0x000e4840, 0x000e4848, 0x000e4941, 0x000e4949, 0x000e4a42, 0x000e4a4a, 0x000e4b43, 0x000e4b4b, 0x000e4c44, 0x000e4c4c, 0x000e4d45, 0x000e4d4d, 0x000e4e46, 0x000e4e4e, 0x000e4f47, 0x000e4f4f, 0x000e5048, 0x000e5050, 0x000e5149, 0x000e5151, 0x000e524a, 0x000e5252, 0x000e534b, 0x000e5353, 0x000e544c, 0x000e5454, 0x000e554d, 0x000e5555, 0x000e564e, 0x000e5656, 0x000e574f, 0x000e5757, 0x000e5850, 0x000e5858, 0x000e5951, 0x000e5959, 0x000e5a52, 0x000e5a5a, 0x000e5b53, 0x000e5b5b, 0x000e5c54, 0x000e5c5c, 0x000e5d55, 0x000e5d5d, 0x000e5e56, 0x000e5e5e, 0x000e5f57, 0x000e5f5f, 0x000e6058, 0x000e6060, 0x000e6159, 0x000e6161, 0x000e625a, 0x000e6262, 0x000e635b, 0x000e6363, 0x000e645c, 0x000e6464, 0x000e655d, 0x000e6565, 0x000e665e, 0x000e6666, 0x000e675f, 0x000e6767, 0x000e6860, 0x000e6868, 0x000e6961, 0x000e6969, 0x000e6a62, 0x000e6a6a, 0x000e6b63, 0x000e6b6b, 0x000e6c64, 0x000e6c6c, 0x000e6d65, 0x000e6d6d, 0x000e6e66, 0x000e6e6e, 0x000e6f67, 0x000e6f6f, 0x000e7068, 0x000e7070, 0x000e7169, 0x000e7171, 0x000e726a, 0x000e7272, 0x000e736b, 0x000e7373, 0x000e746c, 0x000e7474, 0x000e756d, 0x000e7575, 0x000e766e, 0x000e7676, 0x000e776f, 0x000e7777, 0x000e7870, 0x000e7878, 0x000e7971, 0x000e7979, 0x000e7a72, 0x000e7a7a, 0x000e7b73, 0x000e7b7b, 0x000e7c74, 0x000e7c7c, 0x000e7d75, 0x000e7d7d, 0x000e7e76, 0x000e7e7e, 0x000e7f77, 0x000e7f7f, 0x000e8078, 0x000e8080, 0x000e8179, 0x000e8181, 0x000e827a, 0x000e8282, 0x000e837b, 0x000e8383, 0x000e847c, 0x000e8484, 0x000e857d, 0x000e8585, 0x000e867e, 0x000e8686, 0x000e877f, 0x000e8787, 0x000e8880, 0x000e8888, 0x000e8981, 0x000e8989, 0x000e8a82, 0x000e8a8a, 0x000e8b83, 0x000e8b8b, 0x000e8c84, 0x000e8c8c, 0x000e8d85, 0x000e8d8d, 0x000e8e86, 0x000e8e8e, 0x000e8f87, 0x000e8f8f, 0x000e9088, 0x000e9090, 0x000e9189, 0x000e9191, 0x000e928a, 0x000e9292, 0x000e938b, 0x000e9393, 0x000e948c, 0x000e9494, 0x000e958d, 0x000e9595, 0x000e968e, 0x000e9696, 0x000e978f, 0x000e9797, 0x000e9890, 0x000e9898, 0x000e9991, 0x000e9999, 0x000e9a92, 0x000e9a9a, 0x000e9b93, 0x000e9b9b, 0x000e9c95, 0x000e9d96, 0x000e9e97, 0x000e9f98, 0x000ea099, 0x000ea19a, 0x000ea29b, 0x000ea39c, 0x000ea49d, 0x000ea59e, 0x000ea69f, 0x000ea7a0, 0x000ea8a1, 0x000ea9a2, 0x000eaaa3, 0x000eaba4, 0x000eaca5, 0x000eada6, 0x000eaea7, 0x000eafa8, 0x000eb0a9, 0x000eb1aa, 0x000eb2ab, 0x000eb3ac, 0x000eb4ad, 0x000eb5ae, 0x000eb6af, 0x000eb7b0, 0x000eb8b1, 0x000eb9b2, 0x000ebab3, 0x000ebbb4, 0x000ebcb5, 0x000ebdb6, 0x000ebeb7, 0x000ebfb8, 0x000ec0b9, 0x000ec1ba, 0x000ec2bb, 0x000ec3bc, 0x000ec4bd, 0x000ec5be, 0x000ec6bf, 0x000ec7c0, 0x000ec8c1, 0x000ec9c2, 0x000ecac3, 0x000ecbc4, 0x000eccc5, 0x000ecdc6, 0x000ecec7, 0x000ecfc8, 0x000ed0c9, 0x000ed1ca, 0x000ed2cb, 0x000ed3cc, 0x000ed4cd, 0x000ed5ce, 0x000ed6cf, 0x000ed7d0, 0x000ed8d1, 0x000ed9d2, 0x000edad3, 0x000edbd4, 0x000f2b2a, 0x00102a29, 0x00ca91ed],
    values: [0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000005, 0x00000001, 0x00000000],
    maximum: 0x00ca91ed
};

pub global CAPTURE_1_MAX_LENGTH: u32 = 64;
pub global NUM_CAPTURE_GROUPS: u32 = 1;

/**
 * Constrains a start state to be valid
 * @dev start states are hardcoded in this function - "(start_state - {state})" for each start
 *      example: `(start_state - 0) * (start_state - 1) * (start_state - 2)` means 0, 1, or 2
 *      are valid first states
 * 
 * @param start_state - The start state of the NFA
 */
fn check_start_state(start_state: Field) {
    let valid_start_state = (start_state - 0) * (start_state - 1) * (start_state - 3);
    assert(valid_start_state == 0, "Invalid start state");
}
    
/**
 * Constrains the recognition of accept_state being reached. If an aceppt state is reached,
 *      ensures asserted traversal path is valid
 * @dev accept states are hardcoded in this function - "(next_state - {state})" for each accept
 *      example: `(next_state - 19) * (next_state - 20) * (next_state - 21)` means 19, 20, or 21
 *      are valid accept states
 * 
 * @param next_state - The asserted next state of the NFA
 * @param haystack_index - The index being operated on in the haystack
 * @param asserted_match_length - The asserted traversal path length
 * @return - 0 if accept_state is reached, nonzero otherwise
 */
fn check_accept_state(
    next_state: Field,
    haystack_index: Field, 
    asserted_match_length: Field
) -> Field {
    // check if the next state is an accept state
    let accept_state_reached = (next_state - 16);
    let accept_state_reached_bool = (accept_state_reached == 0) as Field;

    // check if the haystack index is the asserted match length
    // should equal 1 since haystack_index should be 1 less than asserted_match)length
    let asserted_path_traversed = (asserted_match_length - haystack_index == 1) as Field;

    // if accept state reached, check asserted path traversed. Else return 1
    let valid_condition =
        (1 - accept_state_reached_bool) + (accept_state_reached_bool * asserted_path_traversed);
    assert(valid_condition == 1, "Accept state reached but not at asserted path end");

    // return accept_state reached value
    accept_state_reached
}

pub fn regex_match<let MAX_HAYSTACK_LEN: u32, let MAX_MATCH_LEN: u32>(
    in_haystack: [u8; MAX_HAYSTACK_LEN],
    match_start: u32,
    match_length: u32,
    current_states: [Field; MAX_MATCH_LEN],
    next_states: [Field; MAX_MATCH_LEN],
    capture_group_ids: [Field; MAX_MATCH_LEN],
    capture_group_starts: [Field; MAX_MATCH_LEN],
    capture_group_start_indices: [Field; NUM_CAPTURE_GROUPS],
) -> (BoundedVec<u8, CAPTURE_1_MAX_LENGTH>) {
    // regex:"(?:\r\n|^)to:([^\r\n]+)\r\n"
    // resize haystack 
    let haystack: [u8; MAX_MATCH_LEN] = select_subarray(in_haystack, match_start, match_length);

    let mut reached_end_state = 1;
    check_start_state(current_states[0]);
    for i in 0..MAX_MATCH_LEN-1 {
        // match length - 1 since current states should be 1 less than next states
        let in_range = (i < match_length - 1) as Field;
        let matching_states = current_states[i + 1] - next_states[i];
        assert(in_range * matching_states == 0, "Invalid Transition Input");
    }
    for i in 0..MAX_MATCH_LEN {
        check_transition_with_captures(
            TRANSITION_TABLE,
            haystack[i] as Field,
            current_states[i],
            next_states[i],
            capture_group_ids[i],
            capture_group_starts[i],
            reached_end_state
        );
        reached_end_state = reached_end_state * check_accept_state(
            next_states[i],
            i as Field,
            match_length as Field,
        );
    }
    assert(reached_end_state == 0, "Did not reach a valid end state");
     // Capture Group 1
     let capture_1 = capture_substring::<MAX_MATCH_LEN, CAPTURE_1_MAX_LENGTH, 1>(
        haystack,
        capture_group_ids,
        capture_group_starts,
        capture_group_start_indices[0],
     );
    (capture_1)
}

