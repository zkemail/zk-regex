use crate::utils::{
   select_subarray,
   captures::capture_substring,
   sparse_array::SparseArray,
   transitions::check_transition_with_captures
};

global TRANSITION_TABLE: SparseArray<799, Field> = SparseArray {
    keys: [0x00000000, 0x0002110f, 0x00021110, 0x0003100f, 0x00046c68, 0x00046c6b, 0x00057574, 0x00067574, 0x00077b7a, 0x00083d3c, 0x00098584, 0x000a7d7c, 0x000b7d7c, 0x000c8685, 0x000d7b7a, 0x000e908f, 0x000f9392, 0x00109291, 0x00118786, 0x00125e5d, 0x00138786, 0x00138787, 0x00138792, 0x00138887, 0x00138888, 0x00138893, 0x00138988, 0x00138989, 0x00138994, 0x00138a89, 0x00138a8a, 0x00138a95, 0x00138b8a, 0x00138b8b, 0x00138b96, 0x00138c8b, 0x00138c8c, 0x00138c97, 0x00138d8c, 0x00138d8d, 0x00138d98, 0x00138e8d, 0x00138e8e, 0x00138e99, 0x00138f8e, 0x00138f8f, 0x00138f9a, 0x0013908f, 0x00139090, 0x0013909b, 0x00139190, 0x00139191, 0x0013919c, 0x00139291, 0x00139292, 0x0013929d, 0x00139392, 0x00139393, 0x0013939e, 0x00139493, 0x00139494, 0x0013949f, 0x00139594, 0x00139595, 0x001395a0, 0x00139695, 0x00139696, 0x001396a1, 0x00139796, 0x00139797, 0x001397a2, 0x00139897, 0x00139898, 0x001398a3, 0x00139998, 0x00139999, 0x001399a4, 0x00139a99, 0x00139a9a, 0x00139aa5, 0x00139b9a, 0x00139b9b, 0x00139ba6, 0x00139c9b, 0x00139c9c, 0x00139ca7, 0x00139d9c, 0x00139d9d, 0x00139da8, 0x00139e9d, 0x00139e9e, 0x00139ea9, 0x00139f9e, 0x00139f9f, 0x00139faa, 0x0013a09f, 0x0013a0a0, 0x0013a0ab, 0x0014a8aa, 0x0014a8ab, 0x0014a9ab, 0x0014a9ac, 0x0014aaac, 0x0014aaad, 0x0014abad, 0x0014abae, 0x0014acae, 0x0014acaf, 0x0014adaf, 0x0014adb0, 0x0014aeb0, 0x0014aeb1, 0x0014afb1, 0x0014afb2, 0x0014b0b2, 0x0014b0b3, 0x0014b1b3, 0x0014b1b4, 0x0014b2b4, 0x0014b2b5, 0x0014b3b5, 0x0014b3b6, 0x0014b4b6, 0x0014b4b7, 0x0014b5b7, 0x0014b5b8, 0x0014b6b8, 0x0014b6b9, 0x0014b7b9, 0x0014b7ba, 0x0014b8ba, 0x0014b8bb, 0x0014b9bb, 0x0014b9bc, 0x0014babc, 0x0014babd, 0x0014bbbd, 0x0014bbbe, 0x0014bcbe, 0x0014bcbf, 0x0014bdbf, 0x0014bdc0, 0x0014bec0, 0x0014bec1, 0x0014bfc1, 0x0014bfc2, 0x0014c0c2, 0x0014c0c3, 0x0014c1c3, 0x0014c1c4, 0x0014c2c4, 0x0014c2c5, 0x0014c3c5, 0x0014c3c6, 0x0014c4c6, 0x0014c4c7, 0x0014c5c7, 0x0014c5c8, 0x0014c6c8, 0x0014c6c9, 0x0014c7c9, 0x0014c7ca, 0x0014c8c9, 0x0014c8ca, 0x0014c9ca, 0x0014c9cb, 0x0014cacb, 0x0014cacc, 0x0014cbcc, 0x0014cbcd, 0x0014cccd, 0x0014ccce, 0x0014cdce, 0x0014cdcf, 0x0014cecf, 0x0014ced0, 0x0014cfd0, 0x0014cfd1, 0x0014d0d1, 0x0014d0d2, 0x0014d1d2, 0x0014d1d3, 0x0014d2d3, 0x0014d2d4, 0x0014d3d4, 0x0014d3d5, 0x0014d4d5, 0x0014d4d6, 0x0014d5d6, 0x0014d5d7, 0x0014d6d7, 0x0014d6d8, 0x0014d7d8, 0x0014d7d9, 0x0014d8d9, 0x0014d8da, 0x0014d9da, 0x0014d9db, 0x0014dadb, 0x0014dadc, 0x0014dbdc, 0x0014dbdd, 0x0014dcdd, 0x0014dcde, 0x0014ddde, 0x0014dddf, 0x0014dedf, 0x0014dee0, 0x0014dfe0, 0x0014dfe1, 0x0014e0e1, 0x0014e0e2, 0x0014e1e2, 0x0014e1e3, 0x0014e2e3, 0x0014e2e4, 0x0014e3e4, 0x0014e3e5, 0x0014e4e5, 0x0014e4e6, 0x0014e5e6, 0x0014e5e7, 0x0014e6e7, 0x0014e6e8, 0x0014e7e8, 0x0014e7e9, 0x0014eaf1, 0x0014eaf2, 0x0014ebf2, 0x0014ebf3, 0x0014ecf3, 0x0014ecf4, 0x0014edf4, 0x0014edf5, 0x0014eef5, 0x0014eef6, 0x0014eff6, 0x0014eff7, 0x0014f0f7, 0x0014f0f8, 0x0014f1f8, 0x0014f1f9, 0x0014f2f9, 0x0014f2fa, 0x0014f3fa, 0x0014f3fb, 0x0014f4fb, 0x0014f4fc, 0x0014f5fc, 0x0014f5fd, 0x0014f6fd, 0x0014f6fe, 0x0014f7fe, 0x0014f7ff, 0x0014f8ff, 0x0014f900, 0x0014fa00, 0x0014fa01, 0x0014fb01, 0x0014fb02, 0x0014fc02, 0x0014fc03, 0x0014fd03, 0x0014fd04, 0x0014fe04, 0x0014fe05, 0x0014ff05, 0x0014ff06, 0x00150006, 0x00150007, 0x00150107, 0x00150108, 0x00150208, 0x00150209, 0x00150309, 0x0015030a, 0x0015040a, 0x0015040b, 0x0015050b, 0x0015050c, 0x0015060c, 0x0015060d, 0x0015070d, 0x0015070e, 0x0015080e, 0x0015080f, 0x00160b10, 0x00160b11, 0x0016acaf, 0x0016acb0, 0x0016adb0, 0x0016adb1, 0x0016aeb1, 0x0016aeb2, 0x0016afb2, 0x0016afb3, 0x0016b0b3, 0x0016b0b4, 0x0016b1b4, 0x0016b1b5, 0x0016b2b5, 0x0016b2b6, 0x0016b3b6, 0x0016b3b7, 0x0016b4b7, 0x0016b4b8, 0x0016b5b8, 0x0016b5b9, 0x0016b6b9, 0x0016b6ba, 0x0016b7ba, 0x0016b7bb, 0x0016b8bb, 0x0016b8bc, 0x0016b9bc, 0x0016b9bd, 0x0016babd, 0x0016babe, 0x0016bbbe, 0x0016bbbf, 0x0016bcbe, 0x0016bcbf, 0x0016bdbf, 0x0016bdc0, 0x0016bec0, 0x0016bec1, 0x0016bfc1, 0x0016bfc2, 0x0016c0c2, 0x0016c0c3, 0x0016c1c3, 0x0016c1c4, 0x0016c2c4, 0x0016c2c5, 0x0016c3c5, 0x0016c3c6, 0x0016c4c6, 0x0016c4c7, 0x0016c5c7, 0x0016c5c8, 0x0016c6c8, 0x0016c6c9, 0x0016c7c9, 0x0016c7ca, 0x0016c8ca, 0x0016c8cb, 0x0016c9cb, 0x0016c9cc, 0x0016cacc, 0x0016cacd, 0x0016cbcd, 0x0016cbce, 0x0016ccce, 0x0016cccf, 0x0016cdcf, 0x0016cdd0, 0x0016ced0, 0x0016ced1, 0x0016cfd1, 0x0016cfd2, 0x0016d0d2, 0x0016d0d3, 0x0016d1d3, 0x0016d1d4, 0x0016d2d4, 0x0016d2d5, 0x0016d3d5, 0x0016d3d6, 0x0016d4d6, 0x0016d4d7, 0x0016d5d7, 0x0016d5d8, 0x0016d6d8, 0x0016d6d9, 0x0016d7d9, 0x0016d7da, 0x0016d8da, 0x0016d8db, 0x0016d9db, 0x0016d9dc, 0x0016dadc, 0x0016dadd, 0x0016dbdd, 0x0016dbde, 0x0016dcde, 0x0016dcdf, 0x0016dddf, 0x0016dde0, 0x0016dee0, 0x0016dee1, 0x0016dfe1, 0x0016dfe2, 0x0016e0e2, 0x0016e0e3, 0x0016e1e3, 0x0016e1e4, 0x0016e2e4, 0x0016e2e5, 0x0016e3e5, 0x0016e3e6, 0x0016e4e6, 0x0016e4e7, 0x0016e5e7, 0x0016e5e8, 0x0016e6e8, 0x0016e6e9, 0x0016e7e9, 0x0016e7ea, 0x0016e8ea, 0x0016e8eb, 0x0016e9eb, 0x0016e9ec, 0x0016eaec, 0x0016eaed, 0x0016ebed, 0x0016ebee, 0x00170e12, 0x00170e13, 0x00170f13, 0x00170f14, 0x00171014, 0x00171015, 0x00171115, 0x00171116, 0x00171216, 0x00171217, 0x00171317, 0x00171318, 0x00171418, 0x00171419, 0x00171519, 0x0017151a, 0x0017161a, 0x0017161b, 0x0017171b, 0x0017171c, 0x0017181c, 0x0017181d, 0x0017191d, 0x0017191e, 0x00171b1f, 0x00171b20, 0x00171c20, 0x00171c21, 0x00181c1f, 0x00181c20, 0x00192123, 0x00192124, 0x001a2425, 0x001a2426, 0x001a2526, 0x001a2527, 0x001a2627, 0x001a2628, 0x001b2929, 0x001b292a, 0x001b736b, 0x001c3837, 0x001c3838, 0x001c3938, 0x001c3939, 0x001c3a39, 0x001c3a3a, 0x001c3b3a, 0x001c3b3b, 0x001c3c3b, 0x001c3c3c, 0x001c3d3c, 0x001c3d3d, 0x001c3e3d, 0x001c3e3e, 0x001c3f3e, 0x001c3f3f, 0x001c403f, 0x001c4040, 0x001c4140, 0x001c4141, 0x001c4241, 0x001c4242, 0x001c4342, 0x001c4343, 0x001c4443, 0x001c4444, 0x001c4544, 0x001c4545, 0x001c4645, 0x001c4646, 0x001c4746, 0x001c4747, 0x001c4847, 0x001c4848, 0x001c4948, 0x001c4949, 0x001c4a49, 0x001c4a4a, 0x001c4b4a, 0x001c4b4b, 0x001c4c4b, 0x001c4c4c, 0x001c4d4c, 0x001c4d4d, 0x001c4e4d, 0x001c4e4e, 0x001c4f4e, 0x001c4f4f, 0x001c504f, 0x001c5050, 0x001c5150, 0x001c5151, 0x001c5251, 0x001c5252, 0x001c5352, 0x001c5353, 0x001c5453, 0x001c5454, 0x001c5554, 0x001c5555, 0x001c5655, 0x001c5656, 0x001c5756, 0x001c5757, 0x001c5857, 0x001c5858, 0x001c5958, 0x001c5959, 0x001c5a59, 0x001c5a5a, 0x001c5b5a, 0x001c5b5b, 0x001c5c5b, 0x001c5c5c, 0x001c5d5c, 0x001c5d5d, 0x001c5e5d, 0x001c5e5e, 0x001c5f5e, 0x001c5f5f, 0x001c605f, 0x001c6060, 0x001c6160, 0x001c6161, 0x001c6261, 0x001c6262, 0x001c6362, 0x001c6363, 0x001c6463, 0x001c6464, 0x001c6564, 0x001c6565, 0x001c6665, 0x001c6666, 0x001c6766, 0x001c6767, 0x001c6867, 0x001c6868, 0x001c6968, 0x001c6969, 0x001c6a69, 0x001c6a6a, 0x001c6b6a, 0x001c6b6b, 0x001c6c6b, 0x001c6c6c, 0x001c6d6c, 0x001c6d6d, 0x001c6e6d, 0x001c6e6e, 0x001c6f6e, 0x001c6f6f, 0x001c706f, 0x001c7070, 0x001c7170, 0x001c7171, 0x001c7271, 0x001c7272, 0x001c7473, 0x001c7474, 0x001c7574, 0x001c7575, 0x001c7675, 0x001c7676, 0x001c7776, 0x001c7777, 0x001c7877, 0x001c7878, 0x001c7978, 0x001c7979, 0x001c7a79, 0x001c7a7a, 0x001c7b7a, 0x001c7b7b, 0x001c7c7b, 0x001c7c7c, 0x001c7d7c, 0x001c7d7d, 0x001c7e7d, 0x001c7e7e, 0x001c7f7e, 0x001c7f7f, 0x001c807f, 0x001c8080, 0x001c8180, 0x001c8181, 0x001c8281, 0x001c8282, 0x001c8382, 0x001c8383, 0x001c8483, 0x001c8484, 0x001c8584, 0x001c8585, 0x001c8685, 0x001c8686, 0x001c8786, 0x001c8787, 0x001c8887, 0x001c8888, 0x001c8988, 0x001c8989, 0x001c8a89, 0x001c8a8a, 0x001c8b8a, 0x001c8b8b, 0x001c8c8b, 0x001c8c8c, 0x001c8d8c, 0x001c8d8d, 0x001c8e8d, 0x001c8e8e, 0x001c8f8e, 0x001c8f8f, 0x001c908f, 0x001c9090, 0x001c9190, 0x001c9191, 0x001c9291, 0x001c9292, 0x001c9392, 0x001c9393, 0x001c9493, 0x001c9494, 0x001c9594, 0x001c9595, 0x001c9695, 0x001c9696, 0x001c9796, 0x001c9797, 0x001c9897, 0x001c9898, 0x001c9998, 0x001c9999, 0x001c9a99, 0x001c9a9a, 0x001c9b9a, 0x001c9b9b, 0x001c9c9b, 0x001c9c9c, 0x001c9d9c, 0x001c9d9d, 0x001c9e9d, 0x001c9e9e, 0x001c9f9e, 0x001c9f9f, 0x001ca09f, 0x001ca0a0, 0x001ca1a0, 0x001ca1a1, 0x001ca2a1, 0x001ca2a2, 0x001ca3a2, 0x001ca3a3, 0x001ca4a3, 0x001ca4a4, 0x001ca5a4, 0x001ca5a5, 0x001ca6a5, 0x001ca6a6, 0x001ca7a6, 0x001ca7a7, 0x001ca8a7, 0x001ca8a8, 0x001ca9a8, 0x001ca9a9, 0x001caaa9, 0x001caaaa, 0x001cabaa, 0x001cabab, 0x001cacab, 0x001cacac, 0x001cadac, 0x001cadad, 0x001caead, 0x001caeae, 0x001cafae, 0x001cafaf, 0x001cb0af, 0x001cb0b0, 0x001cb1b0, 0x001cb1b1, 0x001cb2b1, 0x001cb2b2, 0x001cb3b2, 0x001cb3b3, 0x001cb4b3, 0x001cb4b4, 0x001cb5b4, 0x001cb5b5, 0x001cb6b5, 0x001cb6b6, 0x001cb7b6, 0x001cb7b7, 0x001cb8b0, 0x001cb9b1, 0x001cbab2, 0x001cbbb3, 0x001cbcb4, 0x001cbdb5, 0x001cbeb6, 0x001cbfb7, 0x001cc0b8, 0x001cc1b9, 0x001cc2ba, 0x001cc3bb, 0x001cc4bc, 0x001cc5bd, 0x001cc6be, 0x001cc7bf, 0x001cc8c0, 0x001cc9c1, 0x001ccac2, 0x001ccbc3, 0x001cccc4, 0x001ccdc5, 0x001ccec6, 0x001ccfc7, 0x001cd0c8, 0x001cd1c9, 0x001cd2ca, 0x001cd3cb, 0x001cd4cc, 0x001cd5cd, 0x001cd6ce, 0x001cd7cf, 0x001cd8d0, 0x001cd9d1, 0x001cdad2, 0x001cdbd3, 0x001cdcd4, 0x001cddd5, 0x001cded6, 0x001cdfd7, 0x001ce0d8, 0x001ce1d9, 0x001ce2da, 0x001ce3db, 0x001ce4dc, 0x001ce5dd, 0x001ce6de, 0x001ce7df, 0x001ce8e0, 0x001ce9e1, 0x001ceae2, 0x001cebe3, 0x001cece4, 0x001cede5, 0x001ceee6, 0x001cefe7, 0x001cf0e8, 0x001cf1e9, 0x001cf2ea, 0x001cf3eb, 0x001cf4ec, 0x001cf5ed, 0x001cf6ee, 0x001cf7ef, 0x001d7574, 0x001e5c5b, 0x001fb2b1, 0x00207d7c, 0x00217271, 0x00217272, 0x00217372, 0x00217373, 0x00217473, 0x00217474, 0x00217574, 0x00217575, 0x00217675, 0x00217676, 0x00217776, 0x00217777, 0x00217877, 0x00217878, 0x00217978, 0x00217979, 0x00217a79, 0x00217a7a, 0x00217b7a, 0x00217b7b, 0x00227f7e, 0x00ca9200],
    values: [0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000007, 0x00000001, 0x00000005, 0x00000000],
    maximum: 0x00ca9200
};

pub global CAPTURE_1_MAX_LENGTH: u32 = 10;
pub global NUM_CAPTURE_GROUPS: u32 = 1;

/**
 * Constrains a start state to be valid
 * @dev start states are hardcoded in this function - "(start_state - {state})" for each start
 *      example: `(start_state - 0) * (start_state - 1) * (start_state - 2)` means 0, 1, or 2
 *      are valid first states
 * 
 * @param start_state - The start state of the NFA
 */
fn check_start_state(start_state: Field) {
    let valid_start_state = (start_state - 0) * (start_state - 1) * (start_state - 3);
    assert(valid_start_state == 0, "Invalid start state");
}
    
/**
 * Constrains the recognition of accept_state being reached. If an aceppt state is reached,
 *      ensures asserted traversal path is valid
 * @dev accept states are hardcoded in this function - "(next_state - {state})" for each accept
 *      example: `(next_state - 19) * (next_state - 20) * (next_state - 21)` means 19, 20, or 21
 *      are valid accept states
 * 
 * @param next_state - The asserted next state of the NFA
 * @param haystack_index - The index being operated on in the haystack
 * @param asserted_match_length - The asserted traversal path length
 * @return - 0 if accept_state is reached, nonzero otherwise
 */
fn check_accept_state(
    next_state: Field,
    haystack_index: Field,
    asserted_match_length: Field
) -> Field {
    // check if the next state is an accept state
    let accept_state_reached = (next_state - 34);
    let accept_state_reached_bool = (accept_state_reached == 0) as Field;

    // check if the haystack index is the asserted match length
    // should equal 1 since haystack_index should be 1 less than asserted_match)length
    let asserted_path_traversed = (asserted_match_length - haystack_index == 1) as Field;

    // if accept state reached, check asserted path traversed. Else return 1
    let valid_condition =
        (1 - accept_state_reached_bool) + (accept_state_reached_bool * asserted_path_traversed);
    assert(valid_condition == 1, "Accept state reached but not at asserted path end");

    // return accept_state reached value
    accept_state_reached
}

pub fn regex_match<let MAX_HAYSTACK_LEN: u32, let MAX_MATCH_LEN: u32>(
    in_haystack: [u8; MAX_HAYSTACK_LEN],
    match_start: u32,
    match_length: u32,
    current_states: [Field; MAX_MATCH_LEN],
    next_states: [Field; MAX_MATCH_LEN],
    capture_group_ids: [Field; MAX_MATCH_LEN],
    capture_group_starts: [Field; MAX_MATCH_LEN],
    capture_group_start_indices: [Field; NUM_CAPTURE_GROUPS],
) -> (BoundedVec<u8, CAPTURE_1_MAX_LENGTH>) {
    // regex:"(?:\r\n|^)dkim-signature:(?:[a-z]+=[^;]+; )+t=([0-9]+);"
    // resize haystack 
    let haystack: [u8; MAX_MATCH_LEN] = select_subarray(in_haystack, match_start, match_length);
    let mut reached_end_state = 1;
    check_start_state(current_states[0]);
    for i in 0..MAX_MATCH_LEN-1 {
        // match length - 1 since current states should be 1 less than next states
        let in_range = (i < match_length - 1) as Field;
        let matching_states = current_states[i + 1] - next_states[i];
        assert(in_range * matching_states == 0, "Invalid Transition Input");
    }
    for i in 0..MAX_MATCH_LEN {
        check_transition_with_captures(
            TRANSITION_TABLE,
            haystack[i] as Field,
            current_states[i],
            next_states[i],
            capture_group_ids[i],
            capture_group_starts[i],
            reached_end_state
        );
        reached_end_state = reached_end_state * check_accept_state(
            next_states[i],
            i as Field,
            match_length as Field,
        );
    }
    assert(reached_end_state == 0, "Did not reach a valid end state");
     // Capture Group 1
     let capture_1 = capture_substring::<MAX_MATCH_LEN, CAPTURE_1_MAX_LENGTH, 1>(
        haystack,
        capture_group_ids,
        capture_group_starts,
        capture_group_start_indices[0],
     );
    (capture_1)
}

