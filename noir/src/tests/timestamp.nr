use crate::common::timestamp_regex::{CAPTURE_1_MAX_LENGTH, regex_match};

#[test]
fn test_regex_match() {
    let in_haystack = [
        100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32,
        97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120,
        101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 103, 109, 97, 105, 108, 46,
        99, 111, 109, 59, 32, 115, 61, 50, 48, 50, 51, 48, 54, 48, 49, 59, 32, 116, 61, 49, 54, 57,
        52, 57, 56, 57, 56, 49, 50, 59, 32, 120, 61, 49, 54, 57, 53, 53, 57, 52, 54, 49, 50, 59, 32,
        100, 97, 114, 97, 61, 103, 111, 111, 103, 108, 101, 46, 99, 111, 109, 59, 32, 104, 61, 116,
        111, 58, 115, 117, 98, 106, 101, 99, 116, 58, 109, 101, 115, 115, 97, 103, 101, 45, 105,
        100, 58, 100, 97, 116, 101, 58, 102, 114, 111, 109, 58, 109, 105, 109, 101, 45, 118, 101,
        114, 115, 105, 111, 110, 58, 102, 114, 111, 109, 58, 116, 111, 58, 99, 99, 58, 115, 117, 98,
        106, 101, 99, 116, 32, 58, 100, 97, 116, 101, 58, 109, 101, 115, 115, 97, 103, 101, 45, 105,
        100, 58, 114, 101, 112, 108, 121, 45, 116, 111, 59, 32, 98, 104, 61, 66, 87, 69, 84, 119,
        81, 57, 74, 68, 82, 101, 83, 52, 71, 121, 82, 50, 118, 50, 84, 84, 82, 56, 66, 112, 122,
        106, 57, 97, 121, 117, 109, 115, 87, 81, 74, 51, 113, 55, 118, 101, 104, 115, 61, 59, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0,
    ];
    let match_start = 0;
    let match_length = 91;
    let curr_states = [
        3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 19, 27, 28, 28,
        28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 19, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
        28, 28, 28, 28, 29, 30, 19, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 19, 27, 28, 28,
        28, 28, 28, 28, 28, 28, 29, 30, 31, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
    ];
    let next_states = [
        4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 19, 27, 28, 28,
        28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 19, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
        28, 28, 28, 28, 29, 30, 19, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 30, 19, 27, 28, 28,
        28, 28, 28, 28, 28, 28, 29, 30, 31, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
    ];
    let capture_group_ids = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
    ];
    let capture_group_starts = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0,
    ];
    let capture_group_start_indices = [80];

    // execute regex match
    let substring: (BoundedVec<u8, CAPTURE_1_MAX_LENGTH>) = regex_match(
        in_haystack,
        match_start,
        match_length,
        curr_states,
        next_states,
        capture_group_ids,
        capture_group_starts,
        capture_group_start_indices,
    );

    // check expected output
    let expected_substring = "1694989812".as_bytes();
    for i in 0..CAPTURE_1_MAX_LENGTH {
        assert(expected_substring[i] == substring.get(i));
    }
    assert(substring.len() == 10);
}
